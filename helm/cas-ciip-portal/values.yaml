image:
  schema:
    repository: gcr.io/ggl-cas-storage/cas-ciip-portal-schema
    tag: b530194a9df22e64b1a701defd3b65f41b01676b # pragma: allowlist secret
    pullPolicy: IfNotPresent
  app:
    repository: gcr.io/ggl-cas-storage/cas-ciip-portal-app
    tag: b530194a9df22e64b1a701defd3b65f41b01676b # pragma: allowlist secret
    pullPolicy: IfNotPresent
  psql:
    repository: gcr.io/ggl-cas-storage/cas-postgres
    pullPolicy: Always
    tag: "0.1.0"

replicas: 2
port: 3000
resources:
  limits:
    cpu: 500m
    memory: 1Gi
  requests:
    cpu: 10m
    memory: 200Mi

networkPolicies:
  enable: true

# Will tell which target to use when building the NSP for communication with the GGIRCS app
ggircs:
  namespace: ~
  prefix: ~
  environment: ~
  service: cas-ggircs-patroni
  instanceName: cas-ggircs

metabase:
  instanceName: cas-metabase

route:
  # route.host defines the host name for the route template,
  # and the HOST env variable for the app deployment
  host: ciip.gov.bc.ca
  # set to true to create a route with tls and edge redirection disabled
  insecure: false
  # used for both acme.sh rwx volumes
  storageClassName: netapp-file-standard

persistence:
  db: ciip
  dbOwner: ciip
  appUser: ciip_portal
  readonlyUser: ciip_readonly

dag:
  # a command to be executed at the beginning of the init-db job, running in the psql image abov
  preInitDb: ""
  name: "ciip_deploy_db"
  enable: true

env:
  smtpConnectionString: smtp://apps.smtp.gov.bc.ca/?port=25&ignoreTLS=true&secure=false
  senderEmail: no-reply.cas@gov.bc.ca
  adminEmail: GHGRegulator@gov.bc.ca
  supportEmail: ggircs@gov.bc.ca
  enableDbMocks: false

# NOTE: To be displayed properly, content must be an HTML Bootstrap alert, ie: <div class="alert alert-info">Message</div>
sitewide_notice:
  content: null

analytics:
  enable: false

restoreFromProd:
  enable: false

mailhog:
  enable: false
  image:
    repository: gcr.io/ggl-cas-storage/mailhog
  resources:
    limits:
      cpu: 100m
      memory: 128Mi
    requests:
      cpu: 50m
      memory: 128Mi

cas-postgres:
  patroni:
    resources:
      limits:
        cpu: 1000m
        memory: 2Gi
      requests:
        cpu: 15m
        memory: 600Mi
    persistentVolume:
      size: 10Gi
      storageClass: netapp-block-standard
    replicaCount: 3
    env:
      ALLOW_NOSSL: true
      USE_WALG_BACKUP: "true"
      USE_WALG_RESTORE: "true"
    walE:
      enable: true
      # the GCS bucket name should be {{ namespace }}-{{ gcs.bucketSuffix }}
      gcsBucket:
      # kubernetesSecret should be gcp-{{ namespace }}-{{ gcs.bucketSuffix }}-service-account-key
      kubernetesSecret:
    # options below are required if walE.enable is true
  namespace:
  gcs:
    bucketSuffix:

loadTesting:
  enable: false

download-airflow-ciip-cert-renewal:
  airflowEndpoint: https://cas-airflow-dev.apps.silver.devops.gov.bc.ca
  dagId: fetch_and_save_dag_from_github
  helm:
    hook: "pre-install,pre-upgrade"
    hookWeight: -1

download-airflow-ciip-deploy-db:
  airflowEndpoint: https://cas-airflow-dev.apps.silver.devops.gov.bc.ca
  dagId: fetch_and_save_dag_from_github
  helm:
    hook: "pre-install,pre-upgrade"
    hookWeight: -1


airflow-ciip-cert-renewal:
  airflowEndpoint: https://cas-airflow-dev.apps.silver.devops.gov.bc.ca
  dagId: ciip_cert_renewal
  helm:
    hook: "post-install"
    hookWeight: 0

airflow-ciip-deploy-db:
  airflowEndpoint: https://cas-airflow-dev.apps.silver.devops.gov.bc.ca
  dagId: ciip_deploy_db
  # This job requires the cas-postgres dependency to be running,
  # and is required for the app deployment to become ready.
  # Therefore, it needs to be part of the initial install (instead of a pre/post install hook)
  # For upgrades, it needs to be a hook so that the delete policy kicks in
  # and the previous job template gets deleted (as editing job templates is not allowed)
  # It can be a hook during upgrades as the cas-postgres dependency will already be running
  helm:
    hook: "pre-upgrade"
    hookWeight: 0
