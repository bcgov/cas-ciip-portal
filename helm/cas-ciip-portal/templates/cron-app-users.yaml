apiVersion: batch/v1beta1
kind: CronJob
metadata:
  name: {{ template "cas-ciip-portal.fullname" . }}-app-user
  labels:
{{ include "cas-ciip-portal.labels" . | indent 4 }}
  annotations:
    "helm.sh/hook": "pre-upgrade,pre-install"
    "helm.sh/hook-delete-policy": "before-hook-creation"
    "helm.sh/hook-weight": "-5"
spec:
  suspend: true # This cron job is intended to be triggered manually
  schedule: "* * * * *"
  jobTemplate:
    spec:
      backoffLimit: 0
      activeDeadlineSeconds: 600
      template:
        metadata:
          labels:
{{ include "cas-ciip-portal.labels" . | indent 14 }}
        spec:
          activeDeadlineSeconds: 600
          restartPolicy: Never
          containers:
            - env:
                # This job needs to be run as the superuser as the swrs and graphile_worker schemas are owned by the portal user (ciip)
                - name: PGUSER
                  value: postgres
                - name: PGPASSWORD
                  valueFrom:
                    secretKeyRef:
                      key: password-superuser
                      name: {{ template "cas-ciip-portal.fullname" . }}-patroni
                - name: PGDATABASE
                  valueFrom:
                    secretKeyRef:
                      key: database-name
                      name: {{ template "cas-ciip-portal.fullname" . }}
                - name: PGPORT
                  value: "5432"
                - name: PGHOST
                  value: {{ template "cas-ciip-portal.fullname" . }}-patroni
                - name: PORTAL_APP_USER
                  valueFrom:
                    secretKeyRef:
                      key: database-app-user
                      name: {{ template "cas-ciip-portal.fullname" . }}
                - name: PORTAL_APP_PASSWORD
                  valueFrom:
                    secretKeyRef:
                      key: database-app-password
                      name: {{ template "cas-ciip-portal.fullname" . }}
                - name: PORTAL_READONLY_USER
                  valueFrom:
                    secretKeyRef:
                      key: database-readonly-user
                      name: {{ template "cas-ciip-portal.fullname" . }}
                - name: PORTAL_READONLY_PASSWORD
                  valueFrom:
                    secretKeyRef:
                      key: database-readonly-password
                      name: {{ template "cas-ciip-portal.fullname" . }}
                - name: NAMESPACE
                  valueFrom:
                    fieldRef:
                      apiVersion: v1
                      fieldPath: metadata.namespace
              name: {{ template "cas-ciip-portal.fullname" . }}-app-user
              image: {{ .Values.image.psql.repository }}:{{ .Values.image.psql.tag }}
              resources:
                limits:
                  cpu: 50m
                  memory: 128Mi
                requests:
                  cpu: 10m
                  memory: 64Mi
              command:
                - /usr/bin/env
                - bash
                - -c
                - |
                  set -euo pipefail;
                  create-user-db -d $(PGDATABASE) -u $(PORTAL_APP_USER) -p $(PORTAL_APP_PASSWORD) --schemas swrs,graphile_worker --privileges select,insert,update,delete
                  create-user-db -d $(PGDATABASE) -u $(PORTAL_READONLY_USER) -p $(PORTAL_READONLY_PASSWORD) --schemas swrs,graphile_worker --privileges select
                  psql<<EOF
                    drop policy if exists jobs_policy on graphile_worker.jobs;
                    drop policy if exists job_queues_policy on graphile_worker.job_queues;
                    create policy jobs_policy on graphile_worker.jobs for all to $(PORTAL_APP_USER) using (true);
                    create policy job_queues_policy on graphile_worker.job_queues for all to $(PORTAL_APP_USER) using (true);
                    grant ciip_administrator,ciip_analyst,ciip_industry_user,ciip_guest to $(PORTAL_APP_USER);
                    grant usage on schema swrs to ciip_administrator, ciip_analyst, ciip_industry_user;
                    grant select on all tables in schema swrs to ciip_administrator, ciip_analyst, ciip_industry_user;
                  EOF
