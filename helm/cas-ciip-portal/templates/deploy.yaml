apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ template "cas-ciip-portal.fullname" . }}
  labels:
    component: app
{{ include "cas-ciip-portal.labels" . | indent 4 }}

spec:
  replicas: {{ .Values.replicas }}
  selector:
    name: {{ template "cas-ciip-portal.fullname" . }}
  strategy:
    type: RollingUpdate
  selector:
    matchLabels:
      component: app
{{ include "cas-ciip-portal.selectorLabels" . | indent 6 }}
  template:
    metadata:
      labels:
        component: app
{{ include "cas-ciip-portal.labels" . | indent 8 }}
    spec:
      initContainers:
      - name: cas-ciip-portal-db-trigger
        image: {{ index .Values "airflow-ciip-deploy-db" "image" "repository" }}:{{ index .Values "airflow-ciip-deploy-db" "image" "tag" }}
        resources:
          limits:
            cpu: 50m
            memory: 128Mi
          requests:
            cpu: 10m
            memory: 64Mi
        imagePullPolicy: {{ index .Values "airflow-ciip-deploy-db" "image" "pullPolicy" }}
        env:
          - name: AIRFLOW_ENDPOINT
            value: {{ index .Values "airflow-ciip-deploy-db" "airflowEndpoint" }}
          - name: AIRFLOW_USERNAME
            value: cas-airflow-admin
          - name: AIRFLOW_PASSWORD
            valueFrom:
              secretKeyRef:
                key: {{ index .Values "airflow-ciip-deploy-db" "airflowSecret" "key" }}
                name: {{ index .Values "airflow-ciip-deploy-db" "airflowSecret" "name" }}
          - name: RELEASE_SUFFIX
            value: {{ include "cas-ciip-portal.namespaceSuffix" . }}
        command:
          - /usr/bin/env
          - bash
          - -c
          - ./airflow-dag-trigger.sh {{ index .Values "airflow-ciip-deploy-db" "dagId" }} {{ index .Values "airflow-ciip-deploy-db" "dagConfiguration" | default "e30K" | quote }}

      containers:
      - name: {{ template "cas-ciip-portal.fullname" . }}
        imagePullPolicy: {{ .Values.image.pullPolicy }}
        image: {{ .Values.image.app.repository }}:{{ .Values.image.app.tag }}
{{- if .Values.env.enableDbMocks }}
        args:
          - yarn
          - start
          - AS_CYPRESS
{{- end }}
        env:
          - name: SESSION_SECRET
            valueFrom:
              secretKeyRef:
                key: session-secret
                name: {{ template "cas-ciip-portal.fullname" . }}
          - name: PGUSER
            valueFrom:
              secretKeyRef:
                key: database-app-user
                name: {{ template "cas-ciip-portal.fullname" . }}
          - name: PGPASSWORD
            valueFrom:
              secretKeyRef:
                key: database-app-password
                name: {{ template "cas-ciip-portal.fullname" . }}
          - name: PGDATABASE
            valueFrom:
              secretKeyRef:
                key: database-name
                name: {{ template "cas-ciip-portal.fullname" . }}
          - name: PGPORT
            value: "5432"
          - name: PGHOST
            value: {{ template "cas-ciip-portal.fullname" . }}-patroni
          - name: PORT
            value: {{ .Values.port | quote }}
          - name: SMTP_CONNECTION_STRING
            value: {{ .Values.env.smtpConnectionString }}
          - name: SENDER_EMAIL
            value: {{ .Values.env.senderEmail }}
          - name: ADMIN_EMAIL
            value: {{ .Values.env.adminEmail }}
          - name: SUPPORT_EMAIL
            value: {{ .Values.env.supportEmail }}
          - name: ENABLE_ANALYTICS
            value: {{ .Values.analytics.enable | quote }}
          - name: SITEWIDE_NOTICE
            value: {{ .Values.sitewide_notice.content | quote }}
          - name: HOST
            value: http{{ if not .Values.route.insecure }}s{{ end }}://{{ .Values.route.host }}
          - name: SENTRY_ENVIRONMENT
            value: {{ include "cas-ciip-portal.namespaceSuffix" . }}
          - name: SENTRY_RELEASE
            value: {{ .Values.image.app.tag }}
          - name: NAMESPACE
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
          - name: ENABLE_DB_MOCKS
            value: {{ .Values.env.enableDbMocks | quote }}
        ports:
        - containerPort: {{ .Values.port }}
          protocol: TCP
        readinessProbe:
          httpGet:
            path: /ready
            port: {{ .Values.probesPort }}
          # we want the readiness threshold to fail fast,
          # to prevent any request from going to a pod that is not ready
          failureThreshold: 1
          successThreshold: 1
          periodSeconds: 5
          timeoutSeconds: 5
          initialDelaySeconds: 5
        livenessProbe:
          # the liveness probe is here to ensure that a pod does not get
          # stuck in a shutdown state. It needs to allow enough time for
          # the registered shutdown handler to run to completion.
          httpGet:
            path: /live
            port: {{ .Values.probesPort }}
          initialDelaySeconds: 10
          periodSeconds: 10
          failureThreshold: 3
          successThreshold: 1
          timeoutSeconds: 5
        resources:
{{ toYaml .Values.resources | indent 10 }}
        securityContext:
          capabilities: {}
          privileged: false
        terminationMessagePath: /dev/termination-log
{{- if (index .Values "nginx-sidecar") }}
{{- include "nginx-sidecar.deployment-container.tpl" (index .Values "nginx-sidecar") | indent 6 }}
{{- end }}
      volumes:
{{- if (index .Values "nginx-sidecar") }}
{{- include "nginx-sidecar.deployment-volumes.tpl" (index .Values "nginx-sidecar") | nindent 8 }}
{{- end }}
      dnsPolicy: ClusterFirst
      restartPolicy: Always
