version: 2.1

orbs:
  redhat-openshift: circleci/redhat-openshift@0.2.0

jobs:
  tools:
    machine:
      image: ubuntu-1604:201903-01
    working_directory: ~/cas-ciip-portal
    steps:
      - checkout:
          path: ~/cas-ciip-portal
      - restore_cache:
          name: Restore asdf Tools Cache
          keys:
            - tool-versions-{{ checksum ".tool-versions" }}
      - run:
          name: Install tools via asdf
          command: |
            [[ -d ~/.asdf ]] || git clone https://github.com/asdf-vm/asdf.git ~/.asdf --branch v0.7.4
            pushd ~/.asdf && git checkout v0.7.4 && popd
            echo -e '\n. $HOME/.asdf/asdf.sh' >> ~/.bashrc
            source ~/.asdf/asdf.sh
            cat .tool-versions | cut -f 1 -d ' ' | xargs -n 1 asdf plugin-add || true
            asdf plugin-update --all
            bash ~/.asdf/plugins/nodejs/bin/import-release-team-keyring
            asdf install
            asdf reshim
            pip install -r requirements.txt
            asdf reshim
            pushd app && yarn install --frozen-lockfile && popd
      - save_cache:
          name: Save asdf Tools Cache
          key: tool-versions-{{ checksum ".tool-versions" }}
          paths:
            - ~/.asdf
      - persist_to_workspace:
          root: ~/
          paths:
            - .asdf

  test:
    docker:
      - image: circleci/node:10.14.1
      - image: circleci/postgres:11.4
    working_directory: ~/cas-ciip-portal/app
    steps:
      - checkout:
          path: ~/cas-ciip-portal
      - restore_cache:
          name: Restore Yarn Package Cache
          keys:
            - yarn-packages-{{ checksum "yarn.lock" }}
      - run:
          name: Install Dependencies
          command: yarn install --frozen-lockfile
      - save_cache:
          name: Save Yarn Package Cache
          key: yarn-packages-{{ checksum "yarn.lock" }}
          paths:
            - ~/.cache/yarn
      - run:
          name: Run Tests via Yarn
          command: yarn test
      - run:
          name: Audit Dependencies
          # https://yarnpkg.com/lang/en/docs/cli/audit/
          command: yarn audit --level info

  integration:
    docker:
      - image: circleci/node:10.14.1
    working_directory: ~/cas-ciip-portal
    steps:
      - checkout:
          path: ~/cas-ciip-portal
      - restore_cache:
          name: Restore asdf Tools Cache
          keys:
            - tool-versions-{{ checksum ".tool-versions" }}
      - run:
          name: Install tools via asdf
          command: |
            [[ -d ~/.asdf ]] || git clone https://github.com/asdf-vm/asdf.git ~/.asdf --branch v0.7.4
            pushd ~/.asdf && git checkout v0.7.4 && popd
            echo -e '\n. $HOME/.asdf/asdf.sh' >> ~/.bashrc
            source ~/.asdf/asdf.sh
            cat .tool-versions | cut -f 1 -d ' ' | xargs -n 1 asdf plugin-add || true
            asdf plugin-update --all
            bash ~/.asdf/plugins/nodejs/bin/import-release-team-keyring
            asdf install
            asdf reshim
            pip install -r requirements.txt
            asdf reshim
            pushd app && yarn install --frozen-lockfile && popd
      - save_cache:
          name: Save asdf Tools Cache
          key: tool-versions-{{ checksum ".tool-versions" }}
          paths:
            - ~/.asdf
      - run:
          name: Verify style with pre-commit
          command: |
            source ~/.asdf/asdf.sh
            pre-commit run --all-files

  check-code-style:
    docker:
      - image: circleci/node:10.14.1
    working_directory: ~/cas-ciip-portal/app
    steps:
      - checkout:
          path: ~/cas-ciip-portal
      - restore_cache:
          name: Restore Yarn Package Cache
          keys:
            - yarn-packages-{{ checksum "yarn.lock" }}
      - run:
          name: Install Dependencies
          command: yarn install --frozen-lockfile
      - save_cache:
          name: Save Yarn Package Cache
          key: yarn-packages-{{ checksum "yarn.lock" }}
          paths:
            - ~/.cache/yarn
      - run:
          name: Run XO via Yarn
          command: yarn format || exit 0;
      - run:
          name: Check if there is some unformatted code
          command: git diff --exit-code || (echo 'These files are not formatted correctly. Did you forget to \"yarn format\"?' && false)

  test-local-cluster:
    executor: redhat-openshift/machine-for-local-cluster
    steps:
      - checkout
      - run:
          name: "Pull Submodules"
          command: |
            git submodule init
            git submodule update --remote
      - redhat-openshift/create-local-cluster-with-oc:
          skip-registry-check: true
      - redhat-openshift/login-and-update-kubeconfig:
          insecure-skip-tls-verify: true
          openshift-platform-version: 3.x
          password: password
          server-address: "https://127.0.0.1:8443"
          username: dev1
      - run:
          command: docker login -u "$RED_HAT_DOCKER_USERNAME" -p "$RED_HAT_DOCKER_PASSWORD" "$RED_HAT_DOCKER_SERVER"
          name: Log in to Red Hat docker registry
      - run:
          command: make provision
          name: Provision the cluster project set
      - run:
          command: make configure
          name: Configure the cluster
      - run:
          command: make build
          name: Build image on the cluster
      - run:
          command: make install-dev
          name: Deploy to dev
      - run:
          command: make install-test
          name: Deploy to test
      - run:
          command: make install-prod
          name: Deploy to prod

  openshift-lint:
    executor: redhat-openshift/default
    steps:
      - checkout
      - run:
          name: "Pull Submodules"
          command: |
            git submodule init
            git submodule update --remote
      - redhat-openshift/login-and-update-kubeconfig:
          insecure-skip-tls-verify: true
          openshift-platform-version: 3.x
          server-address: $OC_SERVER_ADDRESS
          token: $OC_TOKEN
      - run:
          command: make lint
          name: Lint the openshift yaml

  configure:
    executor: redhat-openshift/default
    steps:
      - checkout
      - run:
          name: "Pull Submodules"
          command: |
            git submodule init
            git submodule update --remote
      - redhat-openshift/login-and-update-kubeconfig:
          insecure-skip-tls-verify: true
          openshift-platform-version: 3.x
          server-address: $OC_SERVER_ADDRESS
          token: $OC_TOKEN
      - run:
          command: make configure
          name: Configure imagestream to point at the current SHA1

  build_schema:
    executor: redhat-openshift/default
    steps:
      - checkout
      - run:
          name: "Pull Submodules"
          command: |
            git submodule init
            git submodule update --remote
      - redhat-openshift/login-and-update-kubeconfig:
          insecure-skip-tls-verify: true
          openshift-platform-version: 3.x
          server-address: $OC_SERVER_ADDRESS
          token: $OC_TOKEN
      - run:
          command: make build_schema
          name: Build image on the remote cluster

  build_app:
    executor: redhat-openshift/default
    steps:
      - checkout
      - run:
          name: "Pull Submodules"
          command: |
            git submodule init
            git submodule update --remote
      - redhat-openshift/login-and-update-kubeconfig:
          insecure-skip-tls-verify: true
          openshift-platform-version: 3.x
          server-address: $OC_SERVER_ADDRESS
          token: $OC_TOKEN
      - run:
          command: make build_app
          name: Build image on the remote cluster

workflows:
  version: 2
  test:
    jobs:
      - tools
      - test
      - integration
      - check-code-style
      - openshift-lint:
          context: cas-pipeline
          filters:
            branches:
              ignore: /^shipit-deploy\/.*/
      - configure:
          context: cas-pipeline
          requires:
            - openshift-lint
          filters:
            branches:
              ignore: /^shipit-deploy\/.*/
      - build_schema:
          context: cas-pipeline
          requires:
            - configure
          filters:
            branches:
              ignore: /^shipit-deploy\/.*/
      - build_app:
          context: cas-pipeline
          requires:
            - configure
          filters:
            branches:
              ignore: /^shipit-deploy\/.*/
      # - test-local-cluster:
      #     context: cas-pipeline
      #     requires:
      #       - lint
