version: 2.1

orbs:
  redhat-openshift: circleci/redhat-openshift@0.2.0
  gcp-gcr: circleci/gcp-gcr@0.7.1
  helm: circleci/helm@0.2.3

jobs:
  tools:
    machine:
      image: ubuntu-1604:201903-01
    working_directory: ~/cas-ciip-portal
    steps:
      - checkout:
          path: ~/cas-ciip-portal
      - run:
          name: Ensure python has OpenSSL
          command: |
            # @see https://github.com/pyenv/pyenv/wiki/Common-build-problems
            sudo apt-get update
            sudo apt-get install -y build-essential zlib1g-dev libncurses5-dev libgdbm-dev libnss3-dev libssl-dev libreadline-dev libffi-dev wget
      - restore_cache:
          name: Restore asdf Tools Cache
          keys:
            - tool-versions-{{ checksum ".tool-versions" }}-v2
      - run:
          name: Install tools via asdf
          command: |
            [[ -d ~/.asdf ]] || git clone https://github.com/asdf-vm/asdf.git ~/.asdf --branch v0.7.4
            pushd ~/.asdf && git checkout v0.7.4 && popd
            echo -e '\n. $HOME/.asdf/asdf.sh' >> ~/.bashrc
            echo -e '\nexport BASH_ENV="~/.asdf/asdf.sh"' >> ~/.bashrc
            source ~/.bashrc
            make install_asdf_tools
            pg_ctl start
            make -C schema install_pgtap
            pg_ctl stop
      - save_cache:
          name: Save asdf Tools Cache
          key: tool-versions-{{ checksum ".tool-versions" }}-v2
          paths:
            - ~/.asdf
      - restore_cache:
          name: Restore Yarn Package Cache
          keys:
            - yarn-packages-{{ checksum "app/yarn.lock" }}-1
      - run:
          name: Install Yarn Dependencies
          command: |
            source ~/.bashrc
            pushd app
            yarn install --frozen-lockfile
            popd
      - save_cache:
          name: Save Yarn Package Cache
          key: yarn-packages-{{ checksum "app/yarn.lock" }}-1
          paths:
            - ~/.cache/yarn
            - ~/.cache/Cypress
      - run:
          name: Configure Cpan
          command: |
            echo | cpan # accept cpan defaults
      - restore_cache:
          name: Restore Cpan Package Cache
          keys:
            - cpanm-packages-b-{{ checksum "schema/cpanfile" }}
      - run:
          name: Install Cpan Dependencies
          command: |
            source ~/.bashrc # load perl config (just written by cpan) & asdf
            cat .tool-versions | xargs -n2 asdf global # make this project's versions global
            make install_perl_tools
      - save_cache:
          name: Save Cpan Package Cache
          key: cpanm-packages-b-{{ checksum "schema/cpanfile" }}
          paths:
            - ~/perl5
      - persist_to_workspace:
          root: ~/
          paths:
            - .asdf
            - .bashrc
            - .cache/Cypress # contains the cypress binary. Needed for the e2e job
            - cas-ciip-portal
            - perl5

  build_image:
    executor: gcp-gcr/default
    parameters:
      dockerfile:
        type: string
        default: Dockerfile
      image_tag:
        type: string
      image_name:
        type: string
      cache_version:
        type: integer
        default: 1
    steps:
      - checkout
      - gcp-gcr/gcr-auth
      - restore_cache:
          keys:
            - v<< parameters.cache_version>>-<< parameters.image_name >>-{{ .Branch }}
          paths:
            - /tmp/<< parameters.image_name >>.tar
      - run:
          name: Load cache
          command: |
            set +o pipefail
            docker load -i /tmp/<< parameters.image_name >>.tar | true
      - run:
          name: Build tools Docker image
          command: >
            docker build --cache-from=<< parameters.image_name >>
              -t << parameters.image_name >>:latest
              -t gcr.io/${GOOGLE_PROJECT_ID}/<< parameters.image_name >>:latest
              -t gcr.io/${GOOGLE_PROJECT_ID}/<< parameters.image_name >>:<< parameters.image_tag >>
              -f << parameters.dockerfile >>
              .
      - run:
          name: Save Docker image layer cache
          command: |
            docker save -o /tmp/<< parameters.image_name >>.tar << parameters.image_name >>:latest
      - save_cache:
          key: v<< parameters.cache_version>>-<< parameters.image_name >>-{{ .Branch }}-{{ epoch }}
          paths:
            - /tmp/<< parameters.image_name >>.tar
      - gcp-gcr/push-image:
          image: << parameters.image_name >>
          tag: << parameters.image_tag >>
          digest-path: /tmp/digest.txt
      - gcp-gcr/tag-image:
          image: << parameters.image_name >>
          source-tag: << parameters.image_tag >>
          target-tag: latest
      - run:
          command: |
            echo "Digest is: $(</tmp/digest.txt)"

  lint:
    machine:
      image: ubuntu-1604:201903-01
    working_directory: ~/cas-ciip-portal/app
    steps:
      - attach_workspace:
          at: ~/
      - run:
          name: Run XO via Yarn
          command: |
            source ~/.asdf/asdf.sh
            yarn format
      - run:
          name: Check if there is some unformatted code
          command: git diff --exit-code || (echo 'These files are not formatted correctly. Did you forget to \"yarn format\"?' && false)
      - run:
          name: Verify style with pre-commit
          command: |
            source ~/.asdf/asdf.sh
            asdf reshim
            pre-commit run --all-files

  unit:
    machine:
      image: ubuntu-1604:201903-01
    working_directory: ~/cas-ciip-portal/app
    steps:
      - attach_workspace:
          at: ~/
      - run:
          name: Run unit tests
          command: |
            source ~/.asdf/asdf.sh
            yarn test

  audit:
    machine:
      image: ubuntu-1604:201903-01
    working_directory: ~/cas-ciip-portal/app
    steps:
      - attach_workspace:
          at: ~/
      - run:
          name: Audit Dependencies
          command: |
            source ~/.asdf/asdf.sh
            yarn audit --level info # https://yarnpkg.com/lang/en/docs/cli/audit/

  schema:
    machine:
      image: ubuntu-1604:201903-01
    working_directory: ~/cas-ciip-portal
    steps:
      - attach_workspace:
          at: ~/
      - run:
          name: start postgres
          command: |
            source ~/.bashrc
            pg_ctl start
            createdb `whoami`
            createdb ciip_portal_dev
      - run:
          name: deploy schema
          command: |
            source ~/.bashrc
            pushd schema
            sqitch deploy
            sqitch verify
            popd
      - run:
          name: regenerate schema via introspection
          command: |
            source ~/.bashrc
            pushd app
            yarn build:schema
            popd
      - run:
          name: check for inconsistency between schema ddl & graphql
          command: git diff --exit-code || (echo 'The contents of the `schema` folder are out of sync with `app/server/schema.graphql`. Did you forget to \"yarn build:relay\"?' && false)
      - run:
          name: redeploy schema
          command: |
            source ~/.bashrc
            pushd schema
            sqitch rebase
            sqitch verify
            popd
      - run:
          name: regenerate schema via introspection
          command: |
            source ~/.bashrc
            pushd app
            yarn build:schema
            popd
      - run:
          name: check for inconsistency between schema ddl & graphql
          command: git diff --exit-code || (echo 'The contents of the `schema` folder are out of sync with `app/server/schema.graphql`. Did you forget to \"yarn build:relay\"?' && false)

  compile:
    machine:
      image: ubuntu-1604:201903-01
    working_directory: ~/cas-ciip-portal/app
    steps:
      - attach_workspace:
          at: ~/
      - run:
          name: Compile for production
          command: |
            source ~/.asdf/asdf.sh
            yarn build:relay # ensure relay modules are compiled from committed schema
            yarn build:next # ensure next.js can compile a production build
      - persist_to_workspace:
          root: ~/
          paths:
            - cas-ciip-portal # persist the build for e2e tests

  deploy-test-data:
    machine:
      image: ubuntu-1604:201903-01
    working_directory: ~/cas-ciip-portal
    steps:
      - attach_workspace:
          at: ~/
      - run:
          name: "Checkout Submodules"
          command: |
            git submodule update --init
      - run:
          name: start postgres
          command: |
            source ~/.bashrc
            pg_ctl start
      - run:
          name: deploy schemas and data
          command: |
            source ~/.bashrc
            ./.bin/deploy-data.sh -dev
      - run:
          name: deploying the data a second time should not fail on primary key conflicts
          command: |
            source ~/.bashrc
            ./.bin/deploy-data.sh -dev

  acceptance:
    machine:
      image: ubuntu-1604:201903-01
    working_directory: ~/cas-ciip-portal/app
    steps:
      - attach_workspace:
          at: ~/
      - run:
          name: Cucumber Acceptance Test
          command: |
            source ~/.asdf/asdf.sh
            yarn cucumber:pretty || true

  test-local-cluster:
    executor: redhat-openshift/machine-for-local-cluster
    steps:
      - checkout
      - run:
          name: "Checkout Submodules"
          command: |
            git submodule update --init
      - redhat-openshift/create-local-cluster-with-oc:
          skip-registry-check: true
      - redhat-openshift/login-and-update-kubeconfig:
          insecure-skip-tls-verify: true
          openshift-platform-version: 3.x
          password: password
          server-address: "https://127.0.0.1:8443"
          username: dev1
      - run:
          command: docker login -u "$RED_HAT_DOCKER_USERNAME" -p "$RED_HAT_DOCKER_PASSWORD" "$RED_HAT_DOCKER_SERVER"
          name: Log in to Red Hat docker registry
      - run:
          command: make provision
          name: Provision the cluster project set
      - run:
          command: make configure
          name: Configure the cluster
      - run:
          command: make build
          name: Build image on the cluster
      - run:
          command: make install-dev
          name: Deploy to dev
      - run:
          command: make install-test
          name: Deploy to test
      - run:
          command: make install-prod
          name: Deploy to prod

  pathfinder_lint:
    executor: redhat-openshift/default
    steps:
      - checkout
      - run:
          name: "Checkout Submodules"
          command: |
            git submodule update --init
      - redhat-openshift/login-and-update-kubeconfig:
          insecure-skip-tls-verify: true
          openshift-platform-version: 3.x
          server-address: $OC_SERVER_ADDRESS
          token: $OC_TOKEN
      - run:
          command: make lint
          name: Lint the openshift yaml

  pathfinder_configure:
    executor: redhat-openshift/default
    steps:
      - checkout
      - run:
          name: "Checkout Submodules"
          command: |
            git submodule update --init
      - redhat-openshift/login-and-update-kubeconfig:
          insecure-skip-tls-verify: true
          openshift-platform-version: 3.x
          server-address: $OC_SERVER_ADDRESS
          token: $OC_TOKEN
      - run:
          command: make configure
          name: Configure imagestream to point at the current SHA1

  pathfinder_build_tools:
    executor: redhat-openshift/default
    steps:
      - checkout
      - run:
          name: "Checkout Submodules"
          command: |
            git submodule update --init
      - redhat-openshift/login-and-update-kubeconfig:
          insecure-skip-tls-verify: true
          openshift-platform-version: 3.x
          server-address: $OC_SERVER_ADDRESS
          token: $OC_TOKEN
      - run:
          command: make build_tools
          name: Build image on the remote cluster

  pathfinder_build_schema:
    executor: redhat-openshift/default
    steps:
      - checkout
      - run:
          name: "Checkout Submodules"
          command: |
            git submodule update --init
      - redhat-openshift/login-and-update-kubeconfig:
          insecure-skip-tls-verify: true
          openshift-platform-version: 3.x
          server-address: $OC_SERVER_ADDRESS
          token: $OC_TOKEN
      - run:
          command: make build_schema
          name: Build image on the remote cluster

  pathfinder_build_app:
    executor: redhat-openshift/default
    steps:
      - checkout
      - run:
          name: "Checkout Submodules"
          command: |
            git submodule update --init
      - redhat-openshift/login-and-update-kubeconfig:
          insecure-skip-tls-verify: true
          openshift-platform-version: 3.x
          server-address: $OC_SERVER_ADDRESS
          token: $OC_TOKEN
      - run:
          command: make build_app
          name: Build image on the remote cluster

  test_database:
    machine:
      image: ubuntu-1604:201903-01
    working_directory: ~/cas-ciip-portal
    steps:
      - attach_workspace:
          at: ~/
      - run:
          name: "Checkout Submodules"
          command: |
            git submodule update --init
      - run:
          name: start postgres
          command: |
            source ~/.bashrc
            pg_ctl start
            createdb `whoami`
      - run:
          name: Test database using Make
          command: |
            source ~/.bashrc
            pushd schema
            make test PSQL="psql -h localhost" CI_NO_PIPELINE=true
            popd

  e2e:
    machine:
      image: ubuntu-1604:201903-01
    working_directory: ~/cas-ciip-portal
    steps:
      - attach_workspace:
          at: ~/
      - run:
          name: "Checkout Submodules"
          command: |
            git submodule update --init
      - run:
          name: start postgres
          command: |
            source ~/.bashrc
            pg_ctl start
            createdb `whoami`
      - run:
          name: deploy schemas and data
          command: |
            source ~/.bashrc
            ./.bin/deploy-data.sh -dev
      - run:
          name: Create Mailhog server via docker image
          command: docker run -d -p 1025:1025 -p 8025:8025 mailhog/mailhog
      - run:
          name: run end-to-end tests with cypress
          environment:
            SMTP_CONNECTION_STRING: smtp://@localhost:1025
            SENDER_EMAIL: BCCAS <example@cas.com>
            ADMIN_EMAIL: GHGRegulator@gov.bc.ca
          command: |
            source ~/.asdf/asdf.sh
            pushd app
            NO_PDF=true NO_MATHJAX=true yarn start & yarn wait-on http://localhost:3004
            yarn test:e2e
            popd

  e2e-snapshots:
    machine:
      image: ubuntu-1604:201903-01
    working_directory: ~/cas-ciip-portal
    steps:
      - attach_workspace:
          at: ~/
      - run:
          name: "Checkout Submodules"
          command: |
            git submodule update --init
      - run:
          name: start postgres
          command: |
            source ~/.bashrc
            pg_ctl start
            createdb `whoami`
      - run:
          name: deploy schemas and data
          command: |
            source ~/.bashrc
            ./.bin/deploy-data.sh -dev
      - run:
          name: Create Mailhog server via docker image
          command: docker run -d -p 1025:1025 -p 8025:8025 mailhog/mailhog
      - run:
          name: run end-to-end tests with percy and cypress
          environment:
            SMTP_CONNECTION_STRING: smtp://@localhost:1025
            SENDER_EMAIL: BCCAS <example@cas.com>
            ADMIN_EMAIL: GHGRegulator@gov.bc.ca
          command: |
            source ~/.asdf/asdf.sh
            pushd app
            NO_PDF=true NO_MATHJAX=true yarn start & yarn wait-on http://localhost:3004
            yarn test:e2e-snapshots
            popd

workflows:
  version: 2
  test:
    jobs:
      - tools:
          context: cas-pipeline
      - lint:
          requires:
            - tools
      - unit:
          requires:
            - tools
      - audit:
          requires:
            - tools
      - schema:
          requires:
            - tools
      - test_database:
          requires:
            - tools
      - compile:
          requires:
            - tools
      - acceptance:
          requires:
            - tools
      - deploy-test-data:
          requires:
            - tools
      - e2e:
          requires:
            - compile
          filters:
            branches:
              ignore:
                - develop
                - master
      - e2e-snapshots:
          requires:
            - compile
          filters:
            branches:
              only:
                - develop
                - master
      - build_image:
          name: build_schema
          context: cas-pipeline
          image_name: cas-ciip-portal-schema
          image_tag: ${CIRCLE_SHA1}
          dockerfile: schema/Dockerfile
      # - test-local-cluster:
      #     context: cas-pipeline
      #     requires:
      #       - lint

  nightly:
    triggers:
      - schedule:
          cron: "0 0 * * *"
          filters:
            branches:
              only:
                - master
                - develop
    jobs:
      - tools
      - audit:
          requires:
            - tools
