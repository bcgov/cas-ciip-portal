version: 2.1

orbs:
  redhat-openshift: circleci/redhat-openshift@0.2.0

jobs:
  tools:
    machine:
      image: ubuntu-1604:201903-01
    working_directory: ~/cas-ciip-portal
    steps:
      - checkout:
          path: ~/cas-ciip-portal
      - run:
          name: Ensure python has OpenSSL
          command: |
            # @see https://github.com/pyenv/pyenv/wiki/Common-build-problems
            sudo apt-get update
            sudo apt-get install -y build-essential zlib1g-dev libncurses5-dev libgdbm-dev libnss3-dev libssl-dev libreadline-dev libffi-dev wget
      - restore_cache:
          name: Restore asdf Tools Cache
          keys:
            - tool-versions-{{ checksum ".tool-versions" }}-v1
      - run:
          name: Install tools via asdf
          command: |
            [[ -d ~/.asdf ]] || git clone https://github.com/asdf-vm/asdf.git ~/.asdf --branch v0.7.4
            pushd ~/.asdf && git checkout v0.7.4 && popd
            echo -e '\n. $HOME/.asdf/asdf.sh' >> ~/.bashrc
            echo -e '\nexport BASH_ENV="~/.asdf/asdf.sh"' >> ~/.bashrc
            source ~/.bashrc
            make install_asdf_tools
      - save_cache:
          name: Save asdf Tools Cache
          key: tool-versions-{{ checksum ".tool-versions" }}-v1
          paths:
            - ~/.asdf
      - restore_cache:
          name: Restore Yarn Package Cache
          keys:
            - yarn-packages-{{ checksum "app/yarn.lock" }}
      - run:
          name: Install Yarn Dependencies
          command: |
            source ~/.bashrc
            pushd app
            yarn install --frozen-lockfile
            popd
      - save_cache:
          name: Save Yarn Package Cache
          key: yarn-packages-{{ checksum "app/yarn.lock" }}
          paths:
            - ~/.cache/yarn
      - run:
          name: Configure Cpan
          command: |
            echo | cpan # accept cpan defaults
      - restore_cache:
          name: Restore Cpan Package Cache
          keys:
            - cpanm-packages-b-{{ checksum "schema/cpanfile" }}
      - run:
          name: Install Cpan Dependencies
          command: |
            source ~/.bashrc # load perl config (just written by cpan) & asdf
            cat .tool-versions | xargs -n2 asdf global # make this project's versions global
            make install_perl_tools
      - run:
          name: Install pgTap
          command: |
            source ~/.bashrd
            cpan TAP::Parser::SourceHandler::pgTAP
      - save_cache:
          name: Save Cpan Package Cache
          key: cpanm-packages-b-{{ checksum "schema/cpanfile" }}
          paths:
            - ~/perl5
      - persist_to_workspace:
          root: ~/
          paths:
            - .asdf
            - .bashrc
            - cas-ciip-portal
            - perl5

  lint:
    machine:
      image: ubuntu-1604:201903-01
    working_directory: ~/cas-ciip-portal/app
    steps:
      - attach_workspace:
          at: ~/
      - run:
          name: Run XO via Yarn
          command: |
            source ~/.asdf/asdf.sh
            yarn format
      - run:
          name: Check if there is some unformatted code
          command: git diff --exit-code || (echo 'These files are not formatted correctly. Did you forget to \"yarn format\"?' && false)
      - run:
          name: Verify style with pre-commit
          command: |
            source ~/.asdf/asdf.sh
            asdf reshim
            pre-commit run --all-files

  unit:
    machine:
      image: ubuntu-1604:201903-01
    working_directory: ~/cas-ciip-portal/app
    steps:
      - attach_workspace:
          at: ~/
      - run:
          name: Lint with Yarn & XO
          command: |
            source ~/.asdf/asdf.sh
            yarn test

  audit:
    machine:
      image: ubuntu-1604:201903-01
    working_directory: ~/cas-ciip-portal/app
    steps:
      - attach_workspace:
          at: ~/
      - run:
          name: Audit Dependencies
          command: |
            source ~/.asdf/asdf.sh
            yarn audit --level info # https://yarnpkg.com/lang/en/docs/cli/audit/

  schema:
    machine:
      image: ubuntu-1604:201903-01
    working_directory: ~/cas-ciip-portal
    steps:
      - attach_workspace:
          at: ~/
      - run:
          name: start postgres
          command: |
            source ~/.bashrc
            pg_ctl start
            createdb `whoami`
            createdb ggircs_dev
      - run:
          name: deploy cas-ggircs schema (SHOULD NOT NEED THIS)
          command: |
            source ~/.bashrc
            cat .tool-versions | xargs -n2 asdf global # make this project's versions global
            git clone https://github.com/bcgov/cas-ggircs.git ~/cas-ggircs --branch master
            pushd ~/cas-ggircs
            sqitch deploy
            popd
      - run:
          name: deploy schema
          command: |
            source ~/.bashrc
            pushd schema
            sqitch deploy
            sqitch verify
            popd
      - run:
          name: regenerate schema via introspection
          command: |
            source ~/.bashrc
            pushd app
            yarn build:schema
            popd
      - run:
          name: check for inconsistency between schema ddl & graphql
          command: git diff --exit-code || (echo 'The contents of the `schema` folder are out of sync with `app/server/schema.graphql`. Did you forget to \"yarn build:relay\"?' && false)
      - run:
          name: redeploy schema
          command: |
            source ~/.bashrc
            pushd schema
            sqitch rebase
            sqitch verify
            popd
      - run:
          name: regenerate schema via introspection
          command: |
            source ~/.bashrc
            pushd app
            yarn build:schema
            popd
      - run:
          name: check for inconsistency between schema ddl & graphql
          command: git diff --exit-code || (echo 'The contents of the `schema` folder are out of sync with `app/server/schema.graphql`. Did you forget to \"yarn build:relay\"?' && false)

  compile:
    machine:
      image: ubuntu-1604:201903-01
    working_directory: ~/cas-ciip-portal/app
    steps:
      - attach_workspace:
          at: ~/
      - run:
          name: Compile for production
          command: |
            source ~/.asdf/asdf.sh
            yarn build:relay # ensure relay modules are compiled from committed schema
            yarn build:next # ensure next.js can compile a production build

  deploy-test-data:
    machine:
      image: ubuntu-1604:201903-01
    working_directory: ~/cas-ciip-portal
    steps:
      - attach_workspace:
          at: ~/
      - run:
          name: "Pull Submodules"
          command: |
            git submodule init
            git submodule update --remote
      - run:
          name: start postgres
          command: |
            source ~/.bashrc
            pg_ctl start
      - run:
          name: deploy schemas and data
          command: |
            source ~/.bashrc
            ./.bin/deploy-test-data.sh
      - run:
          name: deploying the data a second time should not fail on primary key conflicts
          command: |
            source ~/.bashrc
            ./.bin/deploy-test-data.sh

  test-local-cluster:
    executor: redhat-openshift/machine-for-local-cluster
    steps:
      - checkout
      - run:
          name: "Pull Submodules"
          command: |
            git submodule init
            git submodule update --remote
      - redhat-openshift/create-local-cluster-with-oc:
          skip-registry-check: true
      - redhat-openshift/login-and-update-kubeconfig:
          insecure-skip-tls-verify: true
          openshift-platform-version: 3.x
          password: password
          server-address: "https://127.0.0.1:8443"
          username: dev1
      - run:
          command: docker login -u "$RED_HAT_DOCKER_USERNAME" -p "$RED_HAT_DOCKER_PASSWORD" "$RED_HAT_DOCKER_SERVER"
          name: Log in to Red Hat docker registry
      - run:
          command: make provision
          name: Provision the cluster project set
      - run:
          command: make configure
          name: Configure the cluster
      - run:
          command: make build
          name: Build image on the cluster
      - run:
          command: make install-dev
          name: Deploy to dev
      - run:
          command: make install-test
          name: Deploy to test
      - run:
          command: make install-prod
          name: Deploy to prod

  pathfinder_lint:
    executor: redhat-openshift/default
    steps:
      - checkout
      - run:
          name: "Pull Submodules"
          command: |
            git submodule init
            git submodule update --remote
      - redhat-openshift/login-and-update-kubeconfig:
          insecure-skip-tls-verify: true
          openshift-platform-version: 3.x
          server-address: $OC_SERVER_ADDRESS
          token: $OC_TOKEN
      - run:
          command: make lint
          name: Lint the openshift yaml

  pathfinder_configure:
    executor: redhat-openshift/default
    steps:
      - checkout
      - run:
          name: "Pull Submodules"
          command: |
            git submodule init
            git submodule update --remote
      - redhat-openshift/login-and-update-kubeconfig:
          insecure-skip-tls-verify: true
          openshift-platform-version: 3.x
          server-address: $OC_SERVER_ADDRESS
          token: $OC_TOKEN
      - run:
          command: make configure
          name: Configure imagestream to point at the current SHA1

  pathfinder_build_schema:
    executor: redhat-openshift/default
    steps:
      - checkout
      - run:
          name: "Pull Submodules"
          command: |
            git submodule init
            git submodule update --remote
      - redhat-openshift/login-and-update-kubeconfig:
          insecure-skip-tls-verify: true
          openshift-platform-version: 3.x
          server-address: $OC_SERVER_ADDRESS
          token: $OC_TOKEN
      - run:
          command: make build_schema
          name: Build image on the remote cluster

  pathfinder_build_app:
    executor: redhat-openshift/default
    steps:
      - checkout
      - run:
          name: "Pull Submodules"
          command: |
            git submodule init
            git submodule update --remote
      - redhat-openshift/login-and-update-kubeconfig:
          insecure-skip-tls-verify: true
          openshift-platform-version: 3.x
          server-address: $OC_SERVER_ADDRESS
          token: $OC_TOKEN
      - run:
          command: make build_app
          name: Build image on the remote cluster

  test_database:
    machine:
      image: ubuntu-1604:201903-01
    working_directory: ~/cas-ciip-portal
    steps:
      - attach_workspace:
          at: ~/
      - run:
          name: "Pull Submodules"
          command: |
            git submodule init
            git submodule update --remote
      - run:
          name: start postgres
          command: |
            source ~/.bashrc
            pg_ctl start
            createdb `whoami`
      - run:
          name: Test database using Make
          command: |
            source ~/.bashrc
            pushd schema
            make test PSQL="psql -h localhost" CI_NO_PIPELINE=true
            popd

workflows:
  version: 2
  test:
    jobs:
      - tools
      - lint:
          requires:
            - tools
      - unit:
          requires:
            - tools
      - audit:
          requires:
            - tools
      - schema:
          requires:
            - tools
      - test_database:
          requires:
            - tools
      - compile:
          requires:
            - tools
      - deploy-test-data:
          requires:
            - tools
      - pathfinder_lint:
          requires:
            - lint
            - unit
            - audit
            - schema
            - compile
            - deploy-test-data
          context: cas-pipeline
          filters:
            branches:
              only:
                - develop
                - master
      - pathfinder_configure:
          context: cas-pipeline
          requires:
            - pathfinder_lint
      - pathfinder_build_schema:
          context: cas-pipeline
          requires:
            - pathfinder_configure
      - pathfinder_build_app:
          context: cas-pipeline
          requires:
            - pathfinder_configure
      # - test-local-cluster:
      #     context: cas-pipeline
      #     requires:
      #       - lint

  nightly:
    triggers:
      - schedule:
          cron: "0 0 * * *"
          filters:
            branches:
              only:
                - master
                - develop
    jobs:
      - tools
      - audit:
          requires:
            - tools
