"""The application data"""
type Application implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  id: ID!

  """The application id used for reference and join"""
  rowId: Int!

  """Reads and enables pagination through a set of `FormResult`."""
  formResultsByApplicationId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `FormResult`."""
    orderBy: [FormResultsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: FormResultCondition
  ): FormResultsConnection!

  """Reads and enables pagination through a set of `ApplicationStatus`."""
  applicationStatusesByApplicationId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `ApplicationStatus`."""
    orderBy: [ApplicationStatusesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ApplicationStatusCondition
  ): ApplicationStatusesConnection!
}

"""
A condition to be used against `Application` object types. All fields are tested
for equality and combined with a logical ‘and.’
"""
input ApplicationCondition {
  """Checks for equality with the object’s `rowId` field."""
  rowId: Int
}

"""An input for mutations affecting `Application`"""
input ApplicationInput {
  """The application id used for reference and join"""
  rowId: Int
}

"""
Represents an update to a `Application`. Fields that are set will be updated.
"""
input ApplicationPatch {
  """The application id used for reference and join"""
  rowId: Int
}

"""A connection to a list of `Application` values."""
type ApplicationsConnection {
  """A list of `Application` objects."""
  nodes: [Application]!

  """
  A list of edges which contains the `Application` and cursor to aid in pagination.
  """
  edges: [ApplicationsEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Application` you could get from the connection."""
  totalCount: Int!
}

"""A `Application` edge in the connection."""
type ApplicationsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Application` at the end of the edge."""
  node: Application
}

"""Methods to use when ordering `Application`."""
enum ApplicationsOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""The application status data"""
type ApplicationStatus implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  id: ID!

  """The id used for reference and join"""
  rowId: Int!

  """The foreign key to application used for reference and join"""
  applicationId: Int!

  """The application status"""
  applicationStatus: String

  """The date the application status was updated"""
  createdAt: Datetime!

  """The person who updated the application status"""
  createdBy: String

  """The date the application status was updated"""
  updatedAt: Datetime!

  """The person who updated the application status"""
  updatedBy: String

  """The foreign key to the corresponding form_result"""
  formResultId: Int!

  """
  Reads a single `Application` that is related to this `ApplicationStatus`.
  """
  applicationByApplicationId: Application

  """
  Reads a single `FormResult` that is related to this `ApplicationStatus`.
  """
  formResultByFormResultId: FormResult
}

"""
A condition to be used against `ApplicationStatus` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input ApplicationStatusCondition {
  """Checks for equality with the object’s `rowId` field."""
  rowId: Int

  """Checks for equality with the object’s `applicationId` field."""
  applicationId: Int

  """Checks for equality with the object’s `applicationStatus` field."""
  applicationStatus: String

  """Checks for equality with the object’s `createdAt` field."""
  createdAt: Datetime

  """Checks for equality with the object’s `createdBy` field."""
  createdBy: String

  """Checks for equality with the object’s `updatedAt` field."""
  updatedAt: Datetime

  """Checks for equality with the object’s `updatedBy` field."""
  updatedBy: String

  """Checks for equality with the object’s `formResultId` field."""
  formResultId: Int
}

"""A connection to a list of `ApplicationStatus` values."""
type ApplicationStatusesConnection {
  """A list of `ApplicationStatus` objects."""
  nodes: [ApplicationStatus]!

  """
  A list of edges which contains the `ApplicationStatus` and cursor to aid in pagination.
  """
  edges: [ApplicationStatusesEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `ApplicationStatus` you could get from the connection.
  """
  totalCount: Int!
}

"""A `ApplicationStatus` edge in the connection."""
type ApplicationStatusesEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `ApplicationStatus` at the end of the edge."""
  node: ApplicationStatus
}

"""Methods to use when ordering `ApplicationStatus`."""
enum ApplicationStatusesOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  APPLICATION_ID_ASC
  APPLICATION_ID_DESC
  APPLICATION_STATUS_ASC
  APPLICATION_STATUS_DESC
  CREATED_AT_ASC
  CREATED_AT_DESC
  CREATED_BY_ASC
  CREATED_BY_DESC
  UPDATED_AT_ASC
  UPDATED_AT_DESC
  UPDATED_BY_ASC
  UPDATED_BY_DESC
  FORM_RESULT_ID_ASC
  FORM_RESULT_ID_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""An input for mutations affecting `ApplicationStatus`"""
input ApplicationStatusInput {
  """The id used for reference and join"""
  rowId: Int

  """The foreign key to application used for reference and join"""
  applicationId: Int!

  """The application status"""
  applicationStatus: String

  """The date the application status was updated"""
  createdAt: Datetime

  """The person who updated the application status"""
  createdBy: String

  """The date the application status was updated"""
  updatedAt: Datetime

  """The person who updated the application status"""
  updatedBy: String

  """The foreign key to the corresponding form_result"""
  formResultId: Int!
}

"""
Represents an update to a `ApplicationStatus`. Fields that are set will be updated.
"""
input ApplicationStatusPatch {
  """The id used for reference and join"""
  rowId: Int

  """The foreign key to application used for reference and join"""
  applicationId: Int

  """The application status"""
  applicationStatus: String

  """The date the application status was updated"""
  createdAt: Datetime

  """The person who updated the application status"""
  createdBy: String

  """The date the application status was updated"""
  updatedAt: Datetime

  """The person who updated the application status"""
  updatedBy: String

  """The foreign key to the corresponding form_result"""
  formResultId: Int
}

type Benchmark implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  id: ID!

  """Unique ID for the benchmark"""
  rowId: Int!

  """Foreign key to the product"""
  productId: Int!

  """The value of the benchmark"""
  benchmark: Int!

  """The value of eligibility_threshold"""
  eligibilityThreshold: Int!

  """The date when this benchmark became/becomes active"""
  startDate: Datetime

  """The date when this benchmark became/becomes inactive"""
  endDate: Datetime

  """Creation date of row"""
  createdAt: Datetime!

  """Creator of row"""
  createdBy: String

  """Last update date of row"""
  updatedAt: Datetime!

  """The user who last updated the row"""
  updatedBy: String

  """Deletion date of row"""
  deletedAt: Datetime

  """The user who deleted the row"""
  deletedBy: String

  """Reads a single `Product` that is related to this `Benchmark`."""
  productByProductId: Product
}

"""
A condition to be used against `Benchmark` object types. All fields are tested
for equality and combined with a logical ‘and.’
"""
input BenchmarkCondition {
  """Checks for equality with the object’s `rowId` field."""
  rowId: Int

  """Checks for equality with the object’s `productId` field."""
  productId: Int

  """Checks for equality with the object’s `benchmark` field."""
  benchmark: Int

  """Checks for equality with the object’s `eligibilityThreshold` field."""
  eligibilityThreshold: Int

  """Checks for equality with the object’s `startDate` field."""
  startDate: Datetime

  """Checks for equality with the object’s `endDate` field."""
  endDate: Datetime

  """Checks for equality with the object’s `createdAt` field."""
  createdAt: Datetime

  """Checks for equality with the object’s `createdBy` field."""
  createdBy: String

  """Checks for equality with the object’s `updatedAt` field."""
  updatedAt: Datetime

  """Checks for equality with the object’s `updatedBy` field."""
  updatedBy: String

  """Checks for equality with the object’s `deletedAt` field."""
  deletedAt: Datetime

  """Checks for equality with the object’s `deletedBy` field."""
  deletedBy: String
}

"""An input for mutations affecting `Benchmark`"""
input BenchmarkInput {
  """Unique ID for the benchmark"""
  rowId: Int

  """Foreign key to the product"""
  productId: Int!

  """The value of the benchmark"""
  benchmark: Int!

  """The value of eligibility_threshold"""
  eligibilityThreshold: Int!

  """The date when this benchmark became/becomes active"""
  startDate: Datetime

  """The date when this benchmark became/becomes inactive"""
  endDate: Datetime

  """Creation date of row"""
  createdAt: Datetime

  """Creator of row"""
  createdBy: String

  """Last update date of row"""
  updatedAt: Datetime

  """The user who last updated the row"""
  updatedBy: String

  """Deletion date of row"""
  deletedAt: Datetime

  """The user who deleted the row"""
  deletedBy: String
}

"""
Represents an update to a `Benchmark`. Fields that are set will be updated.
"""
input BenchmarkPatch {
  """Unique ID for the benchmark"""
  rowId: Int

  """Foreign key to the product"""
  productId: Int

  """The value of the benchmark"""
  benchmark: Int

  """The value of eligibility_threshold"""
  eligibilityThreshold: Int

  """The date when this benchmark became/becomes active"""
  startDate: Datetime

  """The date when this benchmark became/becomes inactive"""
  endDate: Datetime

  """Creation date of row"""
  createdAt: Datetime

  """Creator of row"""
  createdBy: String

  """Last update date of row"""
  updatedAt: Datetime

  """The user who last updated the row"""
  updatedBy: String

  """Deletion date of row"""
  deletedAt: Datetime

  """The user who deleted the row"""
  deletedBy: String
}

"""A connection to a list of `Benchmark` values."""
type BenchmarksConnection {
  """A list of `Benchmark` objects."""
  nodes: [Benchmark]!

  """
  A list of edges which contains the `Benchmark` and cursor to aid in pagination.
  """
  edges: [BenchmarksEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Benchmark` you could get from the connection."""
  totalCount: Int!
}

"""A `Benchmark` edge in the connection."""
type BenchmarksEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Benchmark` at the end of the edge."""
  node: Benchmark
}

"""Methods to use when ordering `Benchmark`."""
enum BenchmarksOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  PRODUCT_ID_ASC
  PRODUCT_ID_DESC
  BENCHMARK_ASC
  BENCHMARK_DESC
  ELIGIBILITY_THRESHOLD_ASC
  ELIGIBILITY_THRESHOLD_DESC
  START_DATE_ASC
  START_DATE_DESC
  END_DATE_ASC
  END_DATE_DESC
  CREATED_AT_ASC
  CREATED_AT_DESC
  CREATED_BY_ASC
  CREATED_BY_DESC
  UPDATED_AT_ASC
  UPDATED_AT_DESC
  UPDATED_BY_ASC
  UPDATED_BY_DESC
  DELETED_AT_ASC
  DELETED_AT_DESC
  DELETED_BY_ASC
  DELETED_BY_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
A floating point number that requires more precision than IEEE 754 binary 64
"""
scalar BigFloat

type CiipApplication implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  id: ID!
  rowId: Int!
  facilityName: String
  operatorName: String
  submissionDate: Datetime
  bcghgid: BigFloat
  applicationStatus: String
  reportingYear: String
}

"""
A condition to be used against `CiipApplication` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input CiipApplicationCondition {
  """Checks for equality with the object’s `rowId` field."""
  rowId: Int

  """Checks for equality with the object’s `facilityName` field."""
  facilityName: String

  """Checks for equality with the object’s `operatorName` field."""
  operatorName: String

  """Checks for equality with the object’s `submissionDate` field."""
  submissionDate: Datetime

  """Checks for equality with the object’s `bcghgid` field."""
  bcghgid: BigFloat

  """Checks for equality with the object’s `applicationStatus` field."""
  applicationStatus: String

  """Checks for equality with the object’s `reportingYear` field."""
  reportingYear: String
}

"""A connection to a list of `CiipApplication` values."""
type CiipApplicationsConnection {
  """A list of `CiipApplication` objects."""
  nodes: [CiipApplication]!

  """
  A list of edges which contains the `CiipApplication` and cursor to aid in pagination.
  """
  edges: [CiipApplicationsEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `CiipApplication` you could get from the connection.
  """
  totalCount: Int!
}

"""A `CiipApplication` edge in the connection."""
type CiipApplicationsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CiipApplication` at the end of the edge."""
  node: CiipApplication
}

"""Methods to use when ordering `CiipApplication`."""
enum CiipApplicationsOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  FACILITY_NAME_ASC
  FACILITY_NAME_DESC
  OPERATOR_NAME_ASC
  OPERATOR_NAME_DESC
  SUBMISSION_DATE_ASC
  SUBMISSION_DATE_DESC
  BCGHGID_ASC
  BCGHGID_DESC
  APPLICATION_STATUS_ASC
  APPLICATION_STATUS_DESC
  REPORTING_YEAR_ASC
  REPORTING_YEAR_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
A table defining which forms are in the application wizard and their order
"""
type CiipApplicationWizard implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  id: ID!

  """The id of the form"""
  formId: Int!

  """The zero-indexed position of the form in the wizard"""
  formPosition: Int!

  """
  Whether the form is initialized with data submitted in the previous year's application
  """
  prepopulateFromCiip: Boolean!

  """
  Whether the form is initialized with data submitted in the previous year's application
  """
  prepopulateFromSwrs: Boolean!

  """
  Reads a single `FormJson` that is related to this `CiipApplicationWizard`.
  """
  formJsonByFormId: FormJson
}

"""
A condition to be used against `CiipApplicationWizard` object types. All fields
are tested for equality and combined with a logical ‘and.’
"""
input CiipApplicationWizardCondition {
  """Checks for equality with the object’s `formId` field."""
  formId: Int

  """Checks for equality with the object’s `formPosition` field."""
  formPosition: Int

  """Checks for equality with the object’s `prepopulateFromCiip` field."""
  prepopulateFromCiip: Boolean

  """Checks for equality with the object’s `prepopulateFromSwrs` field."""
  prepopulateFromSwrs: Boolean
}

"""An input for mutations affecting `CiipApplicationWizard`"""
input CiipApplicationWizardInput {
  """The id of the form"""
  formId: Int!

  """The zero-indexed position of the form in the wizard"""
  formPosition: Int!

  """
  Whether the form is initialized with data submitted in the previous year's application
  """
  prepopulateFromCiip: Boolean!

  """
  Whether the form is initialized with data submitted in the previous year's application
  """
  prepopulateFromSwrs: Boolean!
}

"""
Represents an update to a `CiipApplicationWizard`. Fields that are set will be updated.
"""
input CiipApplicationWizardPatch {
  """The id of the form"""
  formId: Int

  """The zero-indexed position of the form in the wizard"""
  formPosition: Int

  """
  Whether the form is initialized with data submitted in the previous year's application
  """
  prepopulateFromCiip: Boolean

  """
  Whether the form is initialized with data submitted in the previous year's application
  """
  prepopulateFromSwrs: Boolean
}

"""A connection to a list of `CiipApplicationWizard` values."""
type CiipApplicationWizardsConnection {
  """A list of `CiipApplicationWizard` objects."""
  nodes: [CiipApplicationWizard]!

  """
  A list of edges which contains the `CiipApplicationWizard` and cursor to aid in pagination.
  """
  edges: [CiipApplicationWizardsEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `CiipApplicationWizard` you could get from the connection.
  """
  totalCount: Int!
}

"""A `CiipApplicationWizard` edge in the connection."""
type CiipApplicationWizardsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CiipApplicationWizard` at the end of the edge."""
  node: CiipApplicationWizard
}

"""Methods to use when ordering `CiipApplicationWizard`."""
enum CiipApplicationWizardsOrderBy {
  NATURAL
  FORM_ID_ASC
  FORM_ID_DESC
  FORM_POSITION_ASC
  FORM_POSITION_DESC
  PREPOPULATE_FROM_CIIP_ASC
  PREPOPULATE_FROM_CIIP_DESC
  PREPOPULATE_FROM_SWRS_ASC
  PREPOPULATE_FROM_SWRS_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

type CiipCertifier implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  id: ID!
  rowId: Int!
  fax: String
  phone: String
  position: String
  lastName: String
  firstName: String
  emailAddress: String
  certifierName: String
  certificationDate: Date
}

"""
A condition to be used against `CiipCertifier` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input CiipCertifierCondition {
  """Checks for equality with the object’s `rowId` field."""
  rowId: Int

  """Checks for equality with the object’s `fax` field."""
  fax: String

  """Checks for equality with the object’s `phone` field."""
  phone: String

  """Checks for equality with the object’s `position` field."""
  position: String

  """Checks for equality with the object’s `lastName` field."""
  lastName: String

  """Checks for equality with the object’s `firstName` field."""
  firstName: String

  """Checks for equality with the object’s `emailAddress` field."""
  emailAddress: String

  """Checks for equality with the object’s `certifierName` field."""
  certifierName: String

  """Checks for equality with the object’s `certificationDate` field."""
  certificationDate: Date
}

"""A connection to a list of `CiipCertifier` values."""
type CiipCertifiersConnection {
  """A list of `CiipCertifier` objects."""
  nodes: [CiipCertifier]!

  """
  A list of edges which contains the `CiipCertifier` and cursor to aid in pagination.
  """
  edges: [CiipCertifiersEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CiipCertifier` you could get from the connection."""
  totalCount: Int!
}

"""A `CiipCertifier` edge in the connection."""
type CiipCertifiersEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CiipCertifier` at the end of the edge."""
  node: CiipCertifier
}

"""Methods to use when ordering `CiipCertifier`."""
enum CiipCertifiersOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  FAX_ASC
  FAX_DESC
  PHONE_ASC
  PHONE_DESC
  POSITION_ASC
  POSITION_DESC
  LAST_NAME_ASC
  LAST_NAME_DESC
  FIRST_NAME_ASC
  FIRST_NAME_DESC
  EMAIL_ADDRESS_ASC
  EMAIL_ADDRESS_DESC
  CERTIFIER_NAME_ASC
  CERTIFIER_NAME_DESC
  CERTIFICATION_DATE_ASC
  CERTIFICATION_DATE_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

type CiipContact implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  id: ID!
  rowId: Int!
  fax: String
  phone: String
  position: String
  lastName: String
  firstName: String
  emailAddress: String
}

"""
A condition to be used against `CiipContact` object types. All fields are tested
for equality and combined with a logical ‘and.’
"""
input CiipContactCondition {
  """Checks for equality with the object’s `rowId` field."""
  rowId: Int

  """Checks for equality with the object’s `fax` field."""
  fax: String

  """Checks for equality with the object’s `phone` field."""
  phone: String

  """Checks for equality with the object’s `position` field."""
  position: String

  """Checks for equality with the object’s `lastName` field."""
  lastName: String

  """Checks for equality with the object’s `firstName` field."""
  firstName: String

  """Checks for equality with the object’s `emailAddress` field."""
  emailAddress: String
}

"""A connection to a list of `CiipContact` values."""
type CiipContactsConnection {
  """A list of `CiipContact` objects."""
  nodes: [CiipContact]!

  """
  A list of edges which contains the `CiipContact` and cursor to aid in pagination.
  """
  edges: [CiipContactsEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CiipContact` you could get from the connection."""
  totalCount: Int!
}

"""A `CiipContact` edge in the connection."""
type CiipContactsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CiipContact` at the end of the edge."""
  node: CiipContact
}

"""Methods to use when ordering `CiipContact`."""
enum CiipContactsOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  FAX_ASC
  FAX_DESC
  PHONE_ASC
  PHONE_DESC
  POSITION_ASC
  POSITION_DESC
  LAST_NAME_ASC
  LAST_NAME_DESC
  FIRST_NAME_ASC
  FIRST_NAME_DESC
  EMAIL_ADDRESS_ASC
  EMAIL_ADDRESS_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

type CiipElectricityAndHeat implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  id: ID!
  rowId: Int!
  sold: BigFloat
  quantity: BigFloat
  description: String
  consumedOnsite: String
  generatedOnsite: String
  consumptionType: String
}

"""
A condition to be used against `CiipElectricityAndHeat` object types. All fields
are tested for equality and combined with a logical ‘and.’
"""
input CiipElectricityAndHeatCondition {
  """Checks for equality with the object’s `rowId` field."""
  rowId: Int

  """Checks for equality with the object’s `sold` field."""
  sold: BigFloat

  """Checks for equality with the object’s `quantity` field."""
  quantity: BigFloat

  """Checks for equality with the object’s `description` field."""
  description: String

  """Checks for equality with the object’s `consumedOnsite` field."""
  consumedOnsite: String

  """Checks for equality with the object’s `generatedOnsite` field."""
  generatedOnsite: String

  """Checks for equality with the object’s `consumptionType` field."""
  consumptionType: String
}

"""A connection to a list of `CiipElectricityAndHeat` values."""
type CiipElectricityAndHeatsConnection {
  """A list of `CiipElectricityAndHeat` objects."""
  nodes: [CiipElectricityAndHeat]!

  """
  A list of edges which contains the `CiipElectricityAndHeat` and cursor to aid in pagination.
  """
  edges: [CiipElectricityAndHeatsEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `CiipElectricityAndHeat` you could get from the connection.
  """
  totalCount: Int!
}

"""A `CiipElectricityAndHeat` edge in the connection."""
type CiipElectricityAndHeatsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CiipElectricityAndHeat` at the end of the edge."""
  node: CiipElectricityAndHeat
}

"""Methods to use when ordering `CiipElectricityAndHeat`."""
enum CiipElectricityAndHeatsOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  SOLD_ASC
  SOLD_DESC
  QUANTITY_ASC
  QUANTITY_DESC
  DESCRIPTION_ASC
  DESCRIPTION_DESC
  CONSUMED_ONSITE_ASC
  CONSUMED_ONSITE_DESC
  GENERATED_ONSITE_ASC
  GENERATED_ONSITE_DESC
  CONSUMPTION_TYPE_ASC
  CONSUMPTION_TYPE_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""A connection to a list of `CiipFacility` values."""
type CiipFacilitiesConnection {
  """A list of `CiipFacility` objects."""
  nodes: [CiipFacility]!

  """
  A list of edges which contains the `CiipFacility` and cursor to aid in pagination.
  """
  edges: [CiipFacilitiesEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CiipFacility` you could get from the connection."""
  totalCount: Int!
}

"""A `CiipFacility` edge in the connection."""
type CiipFacilitiesEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CiipFacility` at the end of the edge."""
  node: CiipFacility
}

"""Methods to use when ordering `CiipFacility`."""
enum CiipFacilitiesOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  BCGHGID_ASC
  BCGHGID_DESC
  LATITUDE_ASC
  LATITUDE_DESC
  LONGITUDE_ASC
  LONGITUDE_DESC
  NAICS_CODE_ASC
  NAICS_CODE_DESC
  FACILITY_NAME_ASC
  FACILITY_NAME_DESC
  FACILITY_TYPE_ASC
  FACILITY_TYPE_DESC
  FACILITY_DESCRIPTION_ASC
  FACILITY_DESCRIPTION_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

type CiipFacility implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  id: ID!
  rowId: Int!
  bcghgid: BigFloat
  latitude: BigFloat
  longitude: BigFloat
  naicsCode: BigFloat
  facilityName: String
  facilityType: String
  facilityDescription: String
}

"""
A condition to be used against `CiipFacility` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input CiipFacilityCondition {
  """Checks for equality with the object’s `rowId` field."""
  rowId: Int

  """Checks for equality with the object’s `bcghgid` field."""
  bcghgid: BigFloat

  """Checks for equality with the object’s `latitude` field."""
  latitude: BigFloat

  """Checks for equality with the object’s `longitude` field."""
  longitude: BigFloat

  """Checks for equality with the object’s `naicsCode` field."""
  naicsCode: BigFloat

  """Checks for equality with the object’s `facilityName` field."""
  facilityName: String

  """Checks for equality with the object’s `facilityType` field."""
  facilityType: String

  """Checks for equality with the object’s `facilityDescription` field."""
  facilityDescription: String
}

type CiipFuel implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  id: ID!
  rowId: Int!
  quantity: BigFloat
  fuelType: String
  fuelUnits: String
  methodology: String
  methodologyComment: String
  description: String
}

"""
A condition to be used against `CiipFuel` object types. All fields are tested
for equality and combined with a logical ‘and.’
"""
input CiipFuelCondition {
  """Checks for equality with the object’s `rowId` field."""
  rowId: Int

  """Checks for equality with the object’s `quantity` field."""
  quantity: BigFloat

  """Checks for equality with the object’s `fuelType` field."""
  fuelType: String

  """Checks for equality with the object’s `fuelUnits` field."""
  fuelUnits: String

  """Checks for equality with the object’s `methodology` field."""
  methodology: String

  """Checks for equality with the object’s `methodologyComment` field."""
  methodologyComment: String

  """Checks for equality with the object’s `description` field."""
  description: String
}

"""A connection to a list of `CiipFuel` values."""
type CiipFuelsConnection {
  """A list of `CiipFuel` objects."""
  nodes: [CiipFuel]!

  """
  A list of edges which contains the `CiipFuel` and cursor to aid in pagination.
  """
  edges: [CiipFuelsEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CiipFuel` you could get from the connection."""
  totalCount: Int!
}

"""A `CiipFuel` edge in the connection."""
type CiipFuelsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CiipFuel` at the end of the edge."""
  node: CiipFuel
}

"""Methods to use when ordering `CiipFuel`."""
enum CiipFuelsOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  QUANTITY_ASC
  QUANTITY_DESC
  FUEL_TYPE_ASC
  FUEL_TYPE_DESC
  FUEL_UNITS_ASC
  FUEL_UNITS_DESC
  METHODOLOGY_ASC
  METHODOLOGY_DESC
  METHODOLOGY_COMMENT_ASC
  METHODOLOGY_COMMENT_DESC
  DESCRIPTION_ASC
  DESCRIPTION_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

type CiipOperator implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  id: ID!
  rowId: Int!
  bcCorporateRegistryNumber: BigFloat
  naicsCode: BigFloat
  operatorName: String
  operatorTradeName: String
  dunsNumber: BigFloat
}

"""
A condition to be used against `CiipOperator` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input CiipOperatorCondition {
  """Checks for equality with the object’s `rowId` field."""
  rowId: Int

  """
  Checks for equality with the object’s `bcCorporateRegistryNumber` field.
  """
  bcCorporateRegistryNumber: BigFloat

  """Checks for equality with the object’s `naicsCode` field."""
  naicsCode: BigFloat

  """Checks for equality with the object’s `operatorName` field."""
  operatorName: String

  """Checks for equality with the object’s `operatorTradeName` field."""
  operatorTradeName: String

  """Checks for equality with the object’s `dunsNumber` field."""
  dunsNumber: BigFloat
}

"""A connection to a list of `CiipOperator` values."""
type CiipOperatorsConnection {
  """A list of `CiipOperator` objects."""
  nodes: [CiipOperator]!

  """
  A list of edges which contains the `CiipOperator` and cursor to aid in pagination.
  """
  edges: [CiipOperatorsEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CiipOperator` you could get from the connection."""
  totalCount: Int!
}

"""A `CiipOperator` edge in the connection."""
type CiipOperatorsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CiipOperator` at the end of the edge."""
  node: CiipOperator
}

"""Methods to use when ordering `CiipOperator`."""
enum CiipOperatorsOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  BC_CORPORATE_REGISTRY_NUMBER_ASC
  BC_CORPORATE_REGISTRY_NUMBER_DESC
  NAICS_CODE_ASC
  NAICS_CODE_DESC
  OPERATOR_NAME_ASC
  OPERATOR_NAME_DESC
  OPERATOR_TRADE_NAME_ASC
  OPERATOR_TRADE_NAME_DESC
  DUNS_NUMBER_ASC
  DUNS_NUMBER_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

type CiipProduction implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  id: ID!
  rowId: Int!
  bcghgid: BigFloat
  quantity: BigFloat
  product: String
  fuelUnits: String
  comments: String
  associatedEmissions: String
  attributableFuelPercentage: BigFloat
}

"""
A condition to be used against `CiipProduction` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input CiipProductionCondition {
  """Checks for equality with the object’s `rowId` field."""
  rowId: Int

  """Checks for equality with the object’s `bcghgid` field."""
  bcghgid: BigFloat

  """Checks for equality with the object’s `quantity` field."""
  quantity: BigFloat

  """Checks for equality with the object’s `product` field."""
  product: String

  """Checks for equality with the object’s `fuelUnits` field."""
  fuelUnits: String

  """Checks for equality with the object’s `comments` field."""
  comments: String

  """Checks for equality with the object’s `associatedEmissions` field."""
  associatedEmissions: String

  """
  Checks for equality with the object’s `attributableFuelPercentage` field.
  """
  attributableFuelPercentage: BigFloat
}

"""A connection to a list of `CiipProduction` values."""
type CiipProductionsConnection {
  """A list of `CiipProduction` objects."""
  nodes: [CiipProduction]!

  """
  A list of edges which contains the `CiipProduction` and cursor to aid in pagination.
  """
  edges: [CiipProductionsEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CiipProduction` you could get from the connection."""
  totalCount: Int!
}

"""A `CiipProduction` edge in the connection."""
type CiipProductionsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CiipProduction` at the end of the edge."""
  node: CiipProduction
}

"""Methods to use when ordering `CiipProduction`."""
enum CiipProductionsOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  BCGHGID_ASC
  BCGHGID_DESC
  QUANTITY_ASC
  QUANTITY_DESC
  PRODUCT_ASC
  PRODUCT_DESC
  FUEL_UNITS_ASC
  FUEL_UNITS_DESC
  COMMENTS_ASC
  COMMENTS_DESC
  ASSOCIATED_EMISSIONS_ASC
  ASSOCIATED_EMISSIONS_DESC
  ATTRIBUTABLE_FUEL_PERCENTAGE_ASC
  ATTRIBUTABLE_FUEL_PERCENTAGE_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""All input for the create `Application` mutation."""
input CreateApplicationInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `Application` to be created by this mutation."""
  application: ApplicationInput!
}

"""The output of our create `Application` mutation."""
type CreateApplicationPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Application` that was created by this mutation."""
  application: Application

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `Application`. May be used by Relay 1."""
  applicationEdge(
    """The method to use when ordering `Application`."""
    orderBy: [ApplicationsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ApplicationsEdge
}

"""All input for the create `ApplicationStatus` mutation."""
input CreateApplicationStatusInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `ApplicationStatus` to be created by this mutation."""
  applicationStatus: ApplicationStatusInput!
}

"""The output of our create `ApplicationStatus` mutation."""
type CreateApplicationStatusPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `ApplicationStatus` that was created by this mutation."""
  applicationStatus: ApplicationStatus

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `Application` that is related to this `ApplicationStatus`.
  """
  applicationByApplicationId: Application

  """
  Reads a single `FormResult` that is related to this `ApplicationStatus`.
  """
  formResultByFormResultId: FormResult

  """An edge for our `ApplicationStatus`. May be used by Relay 1."""
  applicationStatusEdge(
    """The method to use when ordering `ApplicationStatus`."""
    orderBy: [ApplicationStatusesOrderBy!] = [PRIMARY_KEY_ASC]
  ): ApplicationStatusesEdge
}

"""All input for the create `Benchmark` mutation."""
input CreateBenchmarkInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `Benchmark` to be created by this mutation."""
  benchmark: BenchmarkInput!
}

"""The output of our create `Benchmark` mutation."""
type CreateBenchmarkPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Benchmark` that was created by this mutation."""
  benchmark: Benchmark

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Product` that is related to this `Benchmark`."""
  productByProductId: Product

  """An edge for our `Benchmark`. May be used by Relay 1."""
  benchmarkEdge(
    """The method to use when ordering `Benchmark`."""
    orderBy: [BenchmarksOrderBy!] = [PRIMARY_KEY_ASC]
  ): BenchmarksEdge
}

"""All input for the create `CiipApplicationWizard` mutation."""
input CreateCiipApplicationWizardInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `CiipApplicationWizard` to be created by this mutation."""
  ciipApplicationWizard: CiipApplicationWizardInput!
}

"""The output of our create `CiipApplicationWizard` mutation."""
type CreateCiipApplicationWizardPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `CiipApplicationWizard` that was created by this mutation."""
  ciipApplicationWizard: CiipApplicationWizard

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `FormJson` that is related to this `CiipApplicationWizard`.
  """
  formJsonByFormId: FormJson

  """An edge for our `CiipApplicationWizard`. May be used by Relay 1."""
  ciipApplicationWizardEdge(
    """The method to use when ordering `CiipApplicationWizard`."""
    orderBy: [CiipApplicationWizardsOrderBy!] = [PRIMARY_KEY_ASC]
  ): CiipApplicationWizardsEdge
}

"""All input for the create `Facility` mutation."""
input CreateFacilityInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `Facility` to be created by this mutation."""
  facility: FacilityInput!
}

"""The output of our create `Facility` mutation."""
type CreateFacilityPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Facility` that was created by this mutation."""
  facility: Facility

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Organisation` that is related to this `Facility`."""
  organisationByOrganisationId: Organisation

  """An edge for our `Facility`. May be used by Relay 1."""
  facilityEdge(
    """The method to use when ordering `Facility`."""
    orderBy: [FacilitiesOrderBy!] = [PRIMARY_KEY_ASC]
  ): FacilitiesEdge
}

"""All input for the create `FormJson` mutation."""
input CreateFormJsonInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `FormJson` to be created by this mutation."""
  formJson: FormJsonInput!
}

"""The output of our create `FormJson` mutation."""
type CreateFormJsonPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `FormJson` that was created by this mutation."""
  formJson: FormJson

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `FormJson`. May be used by Relay 1."""
  formJsonEdge(
    """The method to use when ordering `FormJson`."""
    orderBy: [FormJsonsOrderBy!] = [PRIMARY_KEY_ASC]
  ): FormJsonsEdge
}

"""All input for the create `FormResult` mutation."""
input CreateFormResultInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `FormResult` to be created by this mutation."""
  formResult: FormResultInput!
}

"""The output of our create `FormResult` mutation."""
type CreateFormResultPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `FormResult` that was created by this mutation."""
  formResult: FormResult

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Application` that is related to this `FormResult`."""
  applicationByApplicationId: Application

  """An edge for our `FormResult`. May be used by Relay 1."""
  formResultEdge(
    """The method to use when ordering `FormResult`."""
    orderBy: [FormResultsOrderBy!] = [PRIMARY_KEY_ASC]
  ): FormResultsEdge
}

"""All input for the create `Organisation` mutation."""
input CreateOrganisationInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `Organisation` to be created by this mutation."""
  organisation: OrganisationInput!
}

"""The output of our create `Organisation` mutation."""
type CreateOrganisationPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Organisation` that was created by this mutation."""
  organisation: Organisation

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `Organisation`. May be used by Relay 1."""
  organisationEdge(
    """The method to use when ordering `Organisation`."""
    orderBy: [OrganisationsOrderBy!] = [PRIMARY_KEY_ASC]
  ): OrganisationsEdge
}

"""All input for the create `Product` mutation."""
input CreateProductInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `Product` to be created by this mutation."""
  product: ProductInput!
}

"""The output of our create `Product` mutation."""
type CreateProductPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Product` that was created by this mutation."""
  product: Product

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `Product`. May be used by Relay 1."""
  productEdge(
    """The method to use when ordering `Product`."""
    orderBy: [ProductsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ProductsEdge
}

"""All input for the create `User` mutation."""
input CreateUserInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `User` to be created by this mutation."""
  user: UserInput!
}

"""All input for the create `UserOrganisation` mutation."""
input CreateUserOrganisationInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `UserOrganisation` to be created by this mutation."""
  userOrganisation: UserOrganisationInput!
}

"""The output of our create `UserOrganisation` mutation."""
type CreateUserOrganisationPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `UserOrganisation` that was created by this mutation."""
  userOrganisation: UserOrganisation

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `User` that is related to this `UserOrganisation`."""
  userByUserId: User

  """
  Reads a single `Organisation` that is related to this `UserOrganisation`.
  """
  organisationByOrganisationId: Organisation

  """An edge for our `UserOrganisation`. May be used by Relay 1."""
  userOrganisationEdge(
    """The method to use when ordering `UserOrganisation`."""
    orderBy: [UserOrganisationsOrderBy!] = [PRIMARY_KEY_ASC]
  ): UserOrganisationsEdge
}

"""The output of our create `User` mutation."""
type CreateUserPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `User` that was created by this mutation."""
  user: User

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `User`. May be used by Relay 1."""
  userEdge(
    """The method to use when ordering `User`."""
    orderBy: [UsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): UsersEdge
}

"""A location in a connection that can be used for resuming pagination."""
scalar Cursor

"""The day, does not include a time."""
scalar Date

"""
A point in time as described by the [ISO
8601](https://en.wikipedia.org/wiki/ISO_8601) standard. May or may not include a timezone.
"""
scalar Datetime

"""All input for the `deleteApplicationByRowId` mutation."""
input DeleteApplicationByRowIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The application id used for reference and join"""
  rowId: Int!
}

"""All input for the `deleteApplication` mutation."""
input DeleteApplicationInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Application` to be deleted.
  """
  id: ID!
}

"""The output of our delete `Application` mutation."""
type DeleteApplicationPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Application` that was deleted by this mutation."""
  application: Application
  deletedApplicationId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `Application`. May be used by Relay 1."""
  applicationEdge(
    """The method to use when ordering `Application`."""
    orderBy: [ApplicationsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ApplicationsEdge
}

"""All input for the `deleteApplicationStatusByRowId` mutation."""
input DeleteApplicationStatusByRowIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The id used for reference and join"""
  rowId: Int!
}

"""All input for the `deleteApplicationStatus` mutation."""
input DeleteApplicationStatusInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `ApplicationStatus` to be deleted.
  """
  id: ID!
}

"""The output of our delete `ApplicationStatus` mutation."""
type DeleteApplicationStatusPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `ApplicationStatus` that was deleted by this mutation."""
  applicationStatus: ApplicationStatus
  deletedApplicationStatusId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `Application` that is related to this `ApplicationStatus`.
  """
  applicationByApplicationId: Application

  """
  Reads a single `FormResult` that is related to this `ApplicationStatus`.
  """
  formResultByFormResultId: FormResult

  """An edge for our `ApplicationStatus`. May be used by Relay 1."""
  applicationStatusEdge(
    """The method to use when ordering `ApplicationStatus`."""
    orderBy: [ApplicationStatusesOrderBy!] = [PRIMARY_KEY_ASC]
  ): ApplicationStatusesEdge
}

"""All input for the `deleteBenchmarkByRowId` mutation."""
input DeleteBenchmarkByRowIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """Unique ID for the benchmark"""
  rowId: Int!
}

"""All input for the `deleteBenchmark` mutation."""
input DeleteBenchmarkInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Benchmark` to be deleted.
  """
  id: ID!
}

"""The output of our delete `Benchmark` mutation."""
type DeleteBenchmarkPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Benchmark` that was deleted by this mutation."""
  benchmark: Benchmark
  deletedBenchmarkId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Product` that is related to this `Benchmark`."""
  productByProductId: Product

  """An edge for our `Benchmark`. May be used by Relay 1."""
  benchmarkEdge(
    """The method to use when ordering `Benchmark`."""
    orderBy: [BenchmarksOrderBy!] = [PRIMARY_KEY_ASC]
  ): BenchmarksEdge
}

"""All input for the `deleteCiipApplicationWizardByFormId` mutation."""
input DeleteCiipApplicationWizardByFormIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The id of the form"""
  formId: Int!
}

"""All input for the `deleteCiipApplicationWizard` mutation."""
input DeleteCiipApplicationWizardInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `CiipApplicationWizard` to be deleted.
  """
  id: ID!
}

"""The output of our delete `CiipApplicationWizard` mutation."""
type DeleteCiipApplicationWizardPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `CiipApplicationWizard` that was deleted by this mutation."""
  ciipApplicationWizard: CiipApplicationWizard
  deletedCiipApplicationWizardId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `FormJson` that is related to this `CiipApplicationWizard`.
  """
  formJsonByFormId: FormJson

  """An edge for our `CiipApplicationWizard`. May be used by Relay 1."""
  ciipApplicationWizardEdge(
    """The method to use when ordering `CiipApplicationWizard`."""
    orderBy: [CiipApplicationWizardsOrderBy!] = [PRIMARY_KEY_ASC]
  ): CiipApplicationWizardsEdge
}

"""All input for the `deleteFacilityByRowId` mutation."""
input DeleteFacilityByRowIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """unique id for the facility"""
  rowId: Int!
}

"""All input for the `deleteFacility` mutation."""
input DeleteFacilityInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Facility` to be deleted.
  """
  id: ID!
}

"""The output of our delete `Facility` mutation."""
type DeleteFacilityPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Facility` that was deleted by this mutation."""
  facility: Facility
  deletedFacilityId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Organisation` that is related to this `Facility`."""
  organisationByOrganisationId: Organisation

  """An edge for our `Facility`. May be used by Relay 1."""
  facilityEdge(
    """The method to use when ordering `Facility`."""
    orderBy: [FacilitiesOrderBy!] = [PRIMARY_KEY_ASC]
  ): FacilitiesEdge
}

"""All input for the `deleteFormJsonByRowId` mutation."""
input DeleteFormJsonByRowIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """Unique ID for the form"""
  rowId: Int!
}

"""All input for the `deleteFormJson` mutation."""
input DeleteFormJsonInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `FormJson` to be deleted.
  """
  id: ID!
}

"""The output of our delete `FormJson` mutation."""
type DeleteFormJsonPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `FormJson` that was deleted by this mutation."""
  formJson: FormJson
  deletedFormJsonId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `FormJson`. May be used by Relay 1."""
  formJsonEdge(
    """The method to use when ordering `FormJson`."""
    orderBy: [FormJsonsOrderBy!] = [PRIMARY_KEY_ASC]
  ): FormJsonsEdge
}

"""All input for the `deleteFormResultByRowId` mutation."""
input DeleteFormResultByRowIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """Unique ID for the form"""
  rowId: Int!
}

"""All input for the `deleteFormResult` mutation."""
input DeleteFormResultInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `FormResult` to be deleted.
  """
  id: ID!
}

"""The output of our delete `FormResult` mutation."""
type DeleteFormResultPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `FormResult` that was deleted by this mutation."""
  formResult: FormResult
  deletedFormResultId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Application` that is related to this `FormResult`."""
  applicationByApplicationId: Application

  """An edge for our `FormResult`. May be used by Relay 1."""
  formResultEdge(
    """The method to use when ordering `FormResult`."""
    orderBy: [FormResultsOrderBy!] = [PRIMARY_KEY_ASC]
  ): FormResultsEdge
}

"""All input for the `deleteOrganisationByRowId` mutation."""
input DeleteOrganisationByRowIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """unique if for the organisation"""
  rowId: Int!
}

"""All input for the `deleteOrganisation` mutation."""
input DeleteOrganisationInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Organisation` to be deleted.
  """
  id: ID!
}

"""The output of our delete `Organisation` mutation."""
type DeleteOrganisationPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Organisation` that was deleted by this mutation."""
  organisation: Organisation
  deletedOrganisationId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `Organisation`. May be used by Relay 1."""
  organisationEdge(
    """The method to use when ordering `Organisation`."""
    orderBy: [OrganisationsOrderBy!] = [PRIMARY_KEY_ASC]
  ): OrganisationsEdge
}

"""All input for the `deleteProductByRowId` mutation."""
input DeleteProductByRowIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """Unique ID for the product"""
  rowId: Int!
}

"""All input for the `deleteProduct` mutation."""
input DeleteProductInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Product` to be deleted.
  """
  id: ID!
}

"""The output of our delete `Product` mutation."""
type DeleteProductPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Product` that was deleted by this mutation."""
  product: Product
  deletedProductId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `Product`. May be used by Relay 1."""
  productEdge(
    """The method to use when ordering `Product`."""
    orderBy: [ProductsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ProductsEdge
}

"""All input for the `deleteUserByRowId` mutation."""
input DeleteUserByRowIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """Unique ID for the user"""
  rowId: Int!
}

"""All input for the `deleteUser` mutation."""
input DeleteUserInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `User` to be deleted.
  """
  id: ID!
}

"""All input for the `deleteUserOrganisationByRowId` mutation."""
input DeleteUserOrganisationByRowIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """unique id of the row"""
  rowId: Int!
}

"""All input for the `deleteUserOrganisation` mutation."""
input DeleteUserOrganisationInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `UserOrganisation` to be deleted.
  """
  id: ID!
}

"""The output of our delete `UserOrganisation` mutation."""
type DeleteUserOrganisationPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `UserOrganisation` that was deleted by this mutation."""
  userOrganisation: UserOrganisation
  deletedUserOrganisationId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `User` that is related to this `UserOrganisation`."""
  userByUserId: User

  """
  Reads a single `Organisation` that is related to this `UserOrganisation`.
  """
  organisationByOrganisationId: Organisation

  """An edge for our `UserOrganisation`. May be used by Relay 1."""
  userOrganisationEdge(
    """The method to use when ordering `UserOrganisation`."""
    orderBy: [UserOrganisationsOrderBy!] = [PRIMARY_KEY_ASC]
  ): UserOrganisationsEdge
}

"""The output of our delete `User` mutation."""
type DeleteUserPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `User` that was deleted by this mutation."""
  user: User
  deletedUserId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `User`. May be used by Relay 1."""
  userEdge(
    """The method to use when ordering `User`."""
    orderBy: [UsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): UsersEdge
}

"""A connection to a list of `EmissionDatum` values."""
type EmissionDataConnection {
  """A list of `EmissionDatum` objects."""
  nodes: [EmissionDatum]!

  """
  A list of edges which contains the `EmissionDatum` and cursor to aid in pagination.
  """
  edges: [EmissionDataEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `EmissionDatum` you could get from the connection."""
  totalCount: Int!
}

"""A `EmissionDatum` edge in the connection."""
type EmissionDataEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `EmissionDatum` at the end of the edge."""
  node: EmissionDatum
}

type EmissionDatum {
  reportId: Int
  quantity: BigFloat
  calculatedQuantity: BigFloat
  emissionCategory: String
  gasType: String
}

type EstimatedCarbonTaxPaid {
  reportId: Int
  organisationId: Int
  facilityId: Int
  activityId: Int
  fuelId: Int
  emissionId: Int
  naicsId: Int
  year: Int
  fuelType: String
  fuelAmount: BigFloat
  fuelCharge: BigFloat
  proRatedFuelCharge: BigFloat
  unitConversionFactor: Int
  calculatedCarbonTax: BigFloat
  flatCalculation: String
  proRatedCalculatedCarbonTax: BigFloat
  proRatedCalculation: String
  bcghgid: String
  reportingPeriodDuration: String
}

"""
A condition to be used against `EstimatedCarbonTaxPaid` object types. All fields
are tested for equality and combined with a logical ‘and.’
"""
input EstimatedCarbonTaxPaidCondition {
  """Checks for equality with the object’s `reportId` field."""
  reportId: Int

  """Checks for equality with the object’s `organisationId` field."""
  organisationId: Int

  """Checks for equality with the object’s `facilityId` field."""
  facilityId: Int

  """Checks for equality with the object’s `activityId` field."""
  activityId: Int

  """Checks for equality with the object’s `fuelId` field."""
  fuelId: Int

  """Checks for equality with the object’s `emissionId` field."""
  emissionId: Int

  """Checks for equality with the object’s `naicsId` field."""
  naicsId: Int

  """Checks for equality with the object’s `year` field."""
  year: Int

  """Checks for equality with the object’s `fuelType` field."""
  fuelType: String

  """Checks for equality with the object’s `fuelAmount` field."""
  fuelAmount: BigFloat

  """Checks for equality with the object’s `fuelCharge` field."""
  fuelCharge: BigFloat

  """Checks for equality with the object’s `proRatedFuelCharge` field."""
  proRatedFuelCharge: BigFloat

  """Checks for equality with the object’s `unitConversionFactor` field."""
  unitConversionFactor: Int

  """Checks for equality with the object’s `calculatedCarbonTax` field."""
  calculatedCarbonTax: BigFloat

  """Checks for equality with the object’s `flatCalculation` field."""
  flatCalculation: String

  """
  Checks for equality with the object’s `proRatedCalculatedCarbonTax` field.
  """
  proRatedCalculatedCarbonTax: BigFloat

  """Checks for equality with the object’s `proRatedCalculation` field."""
  proRatedCalculation: String

  """Checks for equality with the object’s `bcghgid` field."""
  bcghgid: String

  """Checks for equality with the object’s `reportingPeriodDuration` field."""
  reportingPeriodDuration: String
}

"""A connection to a list of `EstimatedCarbonTaxPaid` values."""
type EstimatedCarbonTaxPaidsConnection {
  """A list of `EstimatedCarbonTaxPaid` objects."""
  nodes: [EstimatedCarbonTaxPaid]!

  """
  A list of edges which contains the `EstimatedCarbonTaxPaid` and cursor to aid in pagination.
  """
  edges: [EstimatedCarbonTaxPaidsEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `EstimatedCarbonTaxPaid` you could get from the connection.
  """
  totalCount: Int!
}

"""A `EstimatedCarbonTaxPaid` edge in the connection."""
type EstimatedCarbonTaxPaidsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `EstimatedCarbonTaxPaid` at the end of the edge."""
  node: EstimatedCarbonTaxPaid
}

"""Methods to use when ordering `EstimatedCarbonTaxPaid`."""
enum EstimatedCarbonTaxPaidsOrderBy {
  NATURAL
  REPORT_ID_ASC
  REPORT_ID_DESC
  ORGANISATION_ID_ASC
  ORGANISATION_ID_DESC
  FACILITY_ID_ASC
  FACILITY_ID_DESC
  ACTIVITY_ID_ASC
  ACTIVITY_ID_DESC
  FUEL_ID_ASC
  FUEL_ID_DESC
  EMISSION_ID_ASC
  EMISSION_ID_DESC
  NAICS_ID_ASC
  NAICS_ID_DESC
  YEAR_ASC
  YEAR_DESC
  FUEL_TYPE_ASC
  FUEL_TYPE_DESC
  FUEL_AMOUNT_ASC
  FUEL_AMOUNT_DESC
  FUEL_CHARGE_ASC
  FUEL_CHARGE_DESC
  PRO_RATED_FUEL_CHARGE_ASC
  PRO_RATED_FUEL_CHARGE_DESC
  UNIT_CONVERSION_FACTOR_ASC
  UNIT_CONVERSION_FACTOR_DESC
  CALCULATED_CARBON_TAX_ASC
  CALCULATED_CARBON_TAX_DESC
  FLAT_CALCULATION_ASC
  FLAT_CALCULATION_DESC
  PRO_RATED_CALCULATED_CARBON_TAX_ASC
  PRO_RATED_CALCULATED_CARBON_TAX_DESC
  PRO_RATED_CALCULATION_ASC
  PRO_RATED_CALCULATION_DESC
  BCGHGID_ASC
  BCGHGID_DESC
  REPORTING_PERIOD_DURATION_ASC
  REPORTING_PERIOD_DURATION_DESC
}

"""A connection to a list of `Facility` values."""
type FacilitiesConnection {
  """A list of `Facility` objects."""
  nodes: [Facility]!

  """
  A list of edges which contains the `Facility` and cursor to aid in pagination.
  """
  edges: [FacilitiesEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Facility` you could get from the connection."""
  totalCount: Int!
}

"""A `Facility` edge in the connection."""
type FacilitiesEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Facility` at the end of the edge."""
  node: Facility
}

"""Methods to use when ordering `Facility`."""
enum FacilitiesOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  ORGANISATION_ID_ASC
  ORGANISATION_ID_DESC
  REPORT_ID_ASC
  REPORT_ID_DESC
  SWRS_REPORT_ID_ASC
  SWRS_REPORT_ID_DESC
  SWRS_FACILITY_ID_ASC
  SWRS_FACILITY_ID_DESC
  SWRS_ORGANISATION_ID_ASC
  SWRS_ORGANISATION_ID_DESC
  REPORTING_YEAR_ASC
  REPORTING_YEAR_DESC
  FACILITY_NAME_ASC
  FACILITY_NAME_DESC
  FACILITY_TYPE_ASC
  FACILITY_TYPE_DESC
  BCGHGID_ASC
  BCGHGID_DESC
  NAICS_CODE_ASC
  NAICS_CODE_DESC
  NAICS_CLASSIFICATION_ASC
  NAICS_CLASSIFICATION_DESC
  LATITUDE_ASC
  LATITUDE_DESC
  LONGITUDE_ASC
  LONGITUDE_DESC
  FACILITY_MAILING_ADDRESS_ASC
  FACILITY_MAILING_ADDRESS_DESC
  FACILITY_CITY_ASC
  FACILITY_CITY_DESC
  FACILITY_PROVINCE_ASC
  FACILITY_PROVINCE_DESC
  FACILITY_POSTAL_CODE_ASC
  FACILITY_POSTAL_CODE_DESC
  FACILITY_COUNTRY_ASC
  FACILITY_COUNTRY_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

type Facility implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  id: ID!

  """unique id for the facility"""
  rowId: Int!

  """the id of the organization responsible for that facility"""
  organisationId: Int!

  """report id from swrs"""
  reportId: Int

  """swrs report id from swrs"""
  swrsReportId: Int
  swrsFacilityId: Int

  """swrs organisation id"""
  swrsOrganisationId: Int

  """the reporting year"""
  reportingYear: String

  """the facility name"""
  facilityName: String

  """type of facility based on emission quantity"""
  facilityType: String

  """CAS internal identifier"""
  bcghgid: String

  """The NAICS code / sector"""
  naicsCode: Int

  """description of the naics code"""
  naicsClassification: String

  """facility latitude"""
  latitude: BigFloat

  """facility longitude"""
  longitude: BigFloat

  """facility mailing address"""
  facilityMailingAddress: String

  """facility city"""
  facilityCity: String

  """facility province"""
  facilityProvince: String

  """facility postal code"""
  facilityPostalCode: String

  """facility country"""
  facilityCountry: String

  """Reads a single `Organisation` that is related to this `Facility`."""
  organisationByOrganisationId: Organisation
}

"""
A condition to be used against `Facility` object types. All fields are tested
for equality and combined with a logical ‘and.’
"""
input FacilityCondition {
  """Checks for equality with the object’s `rowId` field."""
  rowId: Int

  """Checks for equality with the object’s `organisationId` field."""
  organisationId: Int

  """Checks for equality with the object’s `reportId` field."""
  reportId: Int

  """Checks for equality with the object’s `swrsReportId` field."""
  swrsReportId: Int

  """Checks for equality with the object’s `swrsFacilityId` field."""
  swrsFacilityId: Int

  """Checks for equality with the object’s `swrsOrganisationId` field."""
  swrsOrganisationId: Int

  """Checks for equality with the object’s `reportingYear` field."""
  reportingYear: String

  """Checks for equality with the object’s `facilityName` field."""
  facilityName: String

  """Checks for equality with the object’s `facilityType` field."""
  facilityType: String

  """Checks for equality with the object’s `bcghgid` field."""
  bcghgid: String

  """Checks for equality with the object’s `naicsCode` field."""
  naicsCode: Int

  """Checks for equality with the object’s `naicsClassification` field."""
  naicsClassification: String

  """Checks for equality with the object’s `latitude` field."""
  latitude: BigFloat

  """Checks for equality with the object’s `longitude` field."""
  longitude: BigFloat

  """Checks for equality with the object’s `facilityMailingAddress` field."""
  facilityMailingAddress: String

  """Checks for equality with the object’s `facilityCity` field."""
  facilityCity: String

  """Checks for equality with the object’s `facilityProvince` field."""
  facilityProvince: String

  """Checks for equality with the object’s `facilityPostalCode` field."""
  facilityPostalCode: String

  """Checks for equality with the object’s `facilityCountry` field."""
  facilityCountry: String
}

"""A connection to a list of `FacilityDatum` values."""
type FacilityDataConnection {
  """A list of `FacilityDatum` objects."""
  nodes: [FacilityDatum]!

  """
  A list of edges which contains the `FacilityDatum` and cursor to aid in pagination.
  """
  edges: [FacilityDataEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `FacilityDatum` you could get from the connection."""
  totalCount: Int!
}

"""A `FacilityDatum` edge in the connection."""
type FacilityDataEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `FacilityDatum` at the end of the edge."""
  node: FacilityDatum
}

type FacilityDatum {
  reportId: Int
  swrsReportId: Int
  swrsFacilityId: Int
  swrsOrganisationId: Int
  reportingYear: String
  facilityName: String
  facilityType: String
  bcghgid: String
  naicsCode: Int
  naicsClassification: String
  latitude: BigFloat
  longitude: BigFloat
  facilityMailingAddress: String
  facilityCity: String
  facilityProvince: String
  facilityPostalCode: String
  facilityCountry: String
}

"""An input for mutations affecting `Facility`"""
input FacilityInput {
  """unique id for the facility"""
  rowId: Int!

  """the id of the organization responsible for that facility"""
  organisationId: Int!

  """report id from swrs"""
  reportId: Int

  """swrs report id from swrs"""
  swrsReportId: Int
  swrsFacilityId: Int

  """swrs organisation id"""
  swrsOrganisationId: Int

  """the reporting year"""
  reportingYear: String

  """the facility name"""
  facilityName: String

  """type of facility based on emission quantity"""
  facilityType: String

  """CAS internal identifier"""
  bcghgid: String

  """The NAICS code / sector"""
  naicsCode: Int

  """description of the naics code"""
  naicsClassification: String

  """facility latitude"""
  latitude: BigFloat

  """facility longitude"""
  longitude: BigFloat

  """facility mailing address"""
  facilityMailingAddress: String

  """facility city"""
  facilityCity: String

  """facility province"""
  facilityProvince: String

  """facility postal code"""
  facilityPostalCode: String

  """facility country"""
  facilityCountry: String
}

"""
Represents an update to a `Facility`. Fields that are set will be updated.
"""
input FacilityPatch {
  """unique id for the facility"""
  rowId: Int

  """the id of the organization responsible for that facility"""
  organisationId: Int

  """report id from swrs"""
  reportId: Int

  """swrs report id from swrs"""
  swrsReportId: Int
  swrsFacilityId: Int

  """swrs organisation id"""
  swrsOrganisationId: Int

  """the reporting year"""
  reportingYear: String

  """the facility name"""
  facilityName: String

  """type of facility based on emission quantity"""
  facilityType: String

  """CAS internal identifier"""
  bcghgid: String

  """The NAICS code / sector"""
  naicsCode: Int

  """description of the naics code"""
  naicsClassification: String

  """facility latitude"""
  latitude: BigFloat

  """facility longitude"""
  longitude: BigFloat

  """facility mailing address"""
  facilityMailingAddress: String

  """facility city"""
  facilityCity: String

  """facility province"""
  facilityProvince: String

  """facility postal code"""
  facilityPostalCode: String

  """facility country"""
  facilityCountry: String
}

type FormJson implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  id: ID!

  """Unique ID for the form"""
  rowId: Int!

  """Name for the form"""
  name: String!

  """The JSON object that creates the form"""
  formJson: JSON!

  """The date the form was updated"""
  createdAt: Datetime!

  """The person who updated the form"""
  createdBy: String

  """The date the form was updated"""
  updatedAt: Datetime!

  """The person who updated the form"""
  updatedBy: String

  """
  Reads a single `CiipApplicationWizard` that is related to this `FormJson`.
  """
  ciipApplicationWizardByFormId: CiipApplicationWizard

  """Reads and enables pagination through a set of `CiipApplicationWizard`."""
  ciipApplicationWizardsByFormId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `CiipApplicationWizard`."""
    orderBy: [CiipApplicationWizardsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CiipApplicationWizardCondition
  ): CiipApplicationWizardsConnection! @deprecated(reason: "Please use ciipApplicationWizardByFormId instead")
}

"""
A condition to be used against `FormJson` object types. All fields are tested
for equality and combined with a logical ‘and.’
"""
input FormJsonCondition {
  """Checks for equality with the object’s `rowId` field."""
  rowId: Int

  """Checks for equality with the object’s `name` field."""
  name: String

  """Checks for equality with the object’s `formJson` field."""
  formJson: JSON

  """Checks for equality with the object’s `createdAt` field."""
  createdAt: Datetime

  """Checks for equality with the object’s `createdBy` field."""
  createdBy: String

  """Checks for equality with the object’s `updatedAt` field."""
  updatedAt: Datetime

  """Checks for equality with the object’s `updatedBy` field."""
  updatedBy: String
}

"""An input for mutations affecting `FormJson`"""
input FormJsonInput {
  """Unique ID for the form"""
  rowId: Int

  """Name for the form"""
  name: String!

  """The JSON object that creates the form"""
  formJson: JSON!

  """The date the form was updated"""
  createdAt: Datetime

  """The person who updated the form"""
  createdBy: String

  """The date the form was updated"""
  updatedAt: Datetime

  """The person who updated the form"""
  updatedBy: String
}

"""
Represents an update to a `FormJson`. Fields that are set will be updated.
"""
input FormJsonPatch {
  """Unique ID for the form"""
  rowId: Int

  """Name for the form"""
  name: String

  """The JSON object that creates the form"""
  formJson: JSON

  """The date the form was updated"""
  createdAt: Datetime

  """The person who updated the form"""
  createdBy: String

  """The date the form was updated"""
  updatedAt: Datetime

  """The person who updated the form"""
  updatedBy: String
}

"""A connection to a list of `FormJson` values."""
type FormJsonsConnection {
  """A list of `FormJson` objects."""
  nodes: [FormJson]!

  """
  A list of edges which contains the `FormJson` and cursor to aid in pagination.
  """
  edges: [FormJsonsEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `FormJson` you could get from the connection."""
  totalCount: Int!
}

"""A `FormJson` edge in the connection."""
type FormJsonsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `FormJson` at the end of the edge."""
  node: FormJson
}

"""Methods to use when ordering `FormJson`."""
enum FormJsonsOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  NAME_ASC
  NAME_DESC
  FORM_JSON_ASC
  FORM_JSON_DESC
  CREATED_AT_ASC
  CREATED_AT_DESC
  CREATED_BY_ASC
  CREATED_BY_DESC
  UPDATED_AT_ASC
  UPDATED_AT_DESC
  UPDATED_BY_ASC
  UPDATED_BY_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

type FormResult implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  id: ID!

  """Unique ID for the form"""
  rowId: Int!

  """The Unique ID of the form"""
  formId: Int!

  """The Unique ID of the Application"""
  userId: Int!
  applicationId: Int!
  submissionDate: Datetime

  """JSON dump of form data"""
  formResult: JSON!

  """The date the form was updated"""
  createdAt: Datetime!

  """The person who updated the form"""
  createdBy: String

  """The date the form was updated"""
  updatedAt: Datetime!

  """The person who updated the form"""
  updatedBy: String

  """Reads a single `Application` that is related to this `FormResult`."""
  applicationByApplicationId: Application

  """Reads and enables pagination through a set of `ApplicationStatus`."""
  applicationStatusesByFormResultId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `ApplicationStatus`."""
    orderBy: [ApplicationStatusesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ApplicationStatusCondition
  ): ApplicationStatusesConnection!
}

"""
A condition to be used against `FormResult` object types. All fields are tested
for equality and combined with a logical ‘and.’
"""
input FormResultCondition {
  """Checks for equality with the object’s `rowId` field."""
  rowId: Int

  """Checks for equality with the object’s `formId` field."""
  formId: Int

  """Checks for equality with the object’s `userId` field."""
  userId: Int

  """Checks for equality with the object’s `applicationId` field."""
  applicationId: Int

  """Checks for equality with the object’s `submissionDate` field."""
  submissionDate: Datetime

  """Checks for equality with the object’s `formResult` field."""
  formResult: JSON

  """Checks for equality with the object’s `createdAt` field."""
  createdAt: Datetime

  """Checks for equality with the object’s `createdBy` field."""
  createdBy: String

  """Checks for equality with the object’s `updatedAt` field."""
  updatedAt: Datetime

  """Checks for equality with the object’s `updatedBy` field."""
  updatedBy: String
}

"""An input for mutations affecting `FormResult`"""
input FormResultInput {
  """Unique ID for the form"""
  rowId: Int

  """The Unique ID of the form"""
  formId: Int!

  """The Unique ID of the Application"""
  userId: Int!
  applicationId: Int!
  submissionDate: Datetime

  """JSON dump of form data"""
  formResult: JSON!

  """The date the form was updated"""
  createdAt: Datetime

  """The person who updated the form"""
  createdBy: String

  """The date the form was updated"""
  updatedAt: Datetime

  """The person who updated the form"""
  updatedBy: String
}

"""
Represents an update to a `FormResult`. Fields that are set will be updated.
"""
input FormResultPatch {
  """Unique ID for the form"""
  rowId: Int

  """The Unique ID of the form"""
  formId: Int

  """The Unique ID of the Application"""
  userId: Int
  applicationId: Int
  submissionDate: Datetime

  """JSON dump of form data"""
  formResult: JSON

  """The date the form was updated"""
  createdAt: Datetime

  """The person who updated the form"""
  createdBy: String

  """The date the form was updated"""
  updatedAt: Datetime

  """The person who updated the form"""
  updatedBy: String
}

"""A connection to a list of `FormResult` values."""
type FormResultsConnection {
  """A list of `FormResult` objects."""
  nodes: [FormResult]!

  """
  A list of edges which contains the `FormResult` and cursor to aid in pagination.
  """
  edges: [FormResultsEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `FormResult` you could get from the connection."""
  totalCount: Int!
}

"""A `FormResult` edge in the connection."""
type FormResultsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `FormResult` at the end of the edge."""
  node: FormResult
}

"""Methods to use when ordering `FormResult`."""
enum FormResultsOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  FORM_ID_ASC
  FORM_ID_DESC
  USER_ID_ASC
  USER_ID_DESC
  APPLICATION_ID_ASC
  APPLICATION_ID_DESC
  SUBMISSION_DATE_ASC
  SUBMISSION_DATE_DESC
  FORM_RESULT_ASC
  FORM_RESULT_DESC
  CREATED_AT_ASC
  CREATED_AT_DESC
  CREATED_BY_ASC
  CREATED_BY_DESC
  UPDATED_AT_ASC
  UPDATED_AT_DESC
  UPDATED_BY_ASC
  UPDATED_BY_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""A connection to a list of `FuelDatum` values."""
type FuelDataConnection {
  """A list of `FuelDatum` objects."""
  nodes: [FuelDatum]!

  """
  A list of edges which contains the `FuelDatum` and cursor to aid in pagination.
  """
  edges: [FuelDataEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `FuelDatum` you could get from the connection."""
  totalCount: Int!
}

"""A `FuelDatum` edge in the connection."""
type FuelDataEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `FuelDatum` at the end of the edge."""
  node: FuelDatum
}

type FuelDatum {
  reportId: Int
  fuelType: String
  fuelClassification: String
  fuelDescription: String
  fuelUnits: String
  annualFuelAmount: BigFloat
  annualWeightedAvgHhv: BigFloat
  annualWeightedAvgCarbonContent: BigFloat
  alternativeMethodolodyDescription: String
}

"""All input for the `insertDummyApplicationData` mutation."""
input InsertDummyApplicationDataInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
}

"""The output of our `insertDummyApplicationData` mutation."""
type InsertDummyApplicationDataPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""
A JavaScript object encoded in the JSON format as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON

"""
The root mutation type which contains root level fields which mutate data.
"""
type Mutation {
  """Creates a single `Application`."""
  createApplication(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateApplicationInput!
  ): CreateApplicationPayload

  """Creates a single `ApplicationStatus`."""
  createApplicationStatus(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateApplicationStatusInput!
  ): CreateApplicationStatusPayload

  """Creates a single `Benchmark`."""
  createBenchmark(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateBenchmarkInput!
  ): CreateBenchmarkPayload

  """Creates a single `CiipApplicationWizard`."""
  createCiipApplicationWizard(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateCiipApplicationWizardInput!
  ): CreateCiipApplicationWizardPayload

  """Creates a single `Facility`."""
  createFacility(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateFacilityInput!
  ): CreateFacilityPayload

  """Creates a single `FormJson`."""
  createFormJson(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateFormJsonInput!
  ): CreateFormJsonPayload

  """Creates a single `FormResult`."""
  createFormResult(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateFormResultInput!
  ): CreateFormResultPayload

  """Creates a single `Organisation`."""
  createOrganisation(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateOrganisationInput!
  ): CreateOrganisationPayload

  """Creates a single `Product`."""
  createProduct(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateProductInput!
  ): CreateProductPayload

  """Creates a single `User`."""
  createUser(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateUserInput!
  ): CreateUserPayload

  """Creates a single `UserOrganisation`."""
  createUserOrganisation(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateUserOrganisationInput!
  ): CreateUserOrganisationPayload

  """
  Updates a single `Application` using its globally unique id and a patch.
  """
  updateApplication(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateApplicationInput!
  ): UpdateApplicationPayload

  """Updates a single `Application` using a unique key and a patch."""
  updateApplicationByRowId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateApplicationByRowIdInput!
  ): UpdateApplicationPayload

  """
  Updates a single `ApplicationStatus` using its globally unique id and a patch.
  """
  updateApplicationStatus(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateApplicationStatusInput!
  ): UpdateApplicationStatusPayload

  """Updates a single `ApplicationStatus` using a unique key and a patch."""
  updateApplicationStatusByRowId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateApplicationStatusByRowIdInput!
  ): UpdateApplicationStatusPayload

  """Updates a single `Benchmark` using its globally unique id and a patch."""
  updateBenchmark(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateBenchmarkInput!
  ): UpdateBenchmarkPayload

  """Updates a single `Benchmark` using a unique key and a patch."""
  updateBenchmarkByRowId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateBenchmarkByRowIdInput!
  ): UpdateBenchmarkPayload

  """
  Updates a single `CiipApplicationWizard` using its globally unique id and a patch.
  """
  updateCiipApplicationWizard(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateCiipApplicationWizardInput!
  ): UpdateCiipApplicationWizardPayload

  """
  Updates a single `CiipApplicationWizard` using a unique key and a patch.
  """
  updateCiipApplicationWizardByFormId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateCiipApplicationWizardByFormIdInput!
  ): UpdateCiipApplicationWizardPayload

  """Updates a single `Facility` using its globally unique id and a patch."""
  updateFacility(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateFacilityInput!
  ): UpdateFacilityPayload

  """Updates a single `Facility` using a unique key and a patch."""
  updateFacilityByRowId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateFacilityByRowIdInput!
  ): UpdateFacilityPayload

  """Updates a single `FormJson` using its globally unique id and a patch."""
  updateFormJson(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateFormJsonInput!
  ): UpdateFormJsonPayload

  """Updates a single `FormJson` using a unique key and a patch."""
  updateFormJsonByRowId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateFormJsonByRowIdInput!
  ): UpdateFormJsonPayload

  """
  Updates a single `FormResult` using its globally unique id and a patch.
  """
  updateFormResult(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateFormResultInput!
  ): UpdateFormResultPayload

  """Updates a single `FormResult` using a unique key and a patch."""
  updateFormResultByRowId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateFormResultByRowIdInput!
  ): UpdateFormResultPayload

  """
  Updates a single `Organisation` using its globally unique id and a patch.
  """
  updateOrganisation(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateOrganisationInput!
  ): UpdateOrganisationPayload

  """Updates a single `Organisation` using a unique key and a patch."""
  updateOrganisationByRowId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateOrganisationByRowIdInput!
  ): UpdateOrganisationPayload

  """Updates a single `Product` using its globally unique id and a patch."""
  updateProduct(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateProductInput!
  ): UpdateProductPayload

  """Updates a single `Product` using a unique key and a patch."""
  updateProductByRowId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateProductByRowIdInput!
  ): UpdateProductPayload

  """Updates a single `User` using its globally unique id and a patch."""
  updateUser(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateUserInput!
  ): UpdateUserPayload

  """Updates a single `User` using a unique key and a patch."""
  updateUserByRowId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateUserByRowIdInput!
  ): UpdateUserPayload

  """
  Updates a single `UserOrganisation` using its globally unique id and a patch.
  """
  updateUserOrganisation(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateUserOrganisationInput!
  ): UpdateUserOrganisationPayload

  """Updates a single `UserOrganisation` using a unique key and a patch."""
  updateUserOrganisationByRowId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateUserOrganisationByRowIdInput!
  ): UpdateUserOrganisationPayload

  """Deletes a single `Application` using its globally unique id."""
  deleteApplication(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteApplicationInput!
  ): DeleteApplicationPayload

  """Deletes a single `Application` using a unique key."""
  deleteApplicationByRowId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteApplicationByRowIdInput!
  ): DeleteApplicationPayload

  """Deletes a single `ApplicationStatus` using its globally unique id."""
  deleteApplicationStatus(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteApplicationStatusInput!
  ): DeleteApplicationStatusPayload

  """Deletes a single `ApplicationStatus` using a unique key."""
  deleteApplicationStatusByRowId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteApplicationStatusByRowIdInput!
  ): DeleteApplicationStatusPayload

  """Deletes a single `Benchmark` using its globally unique id."""
  deleteBenchmark(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteBenchmarkInput!
  ): DeleteBenchmarkPayload

  """Deletes a single `Benchmark` using a unique key."""
  deleteBenchmarkByRowId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteBenchmarkByRowIdInput!
  ): DeleteBenchmarkPayload

  """Deletes a single `CiipApplicationWizard` using its globally unique id."""
  deleteCiipApplicationWizard(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteCiipApplicationWizardInput!
  ): DeleteCiipApplicationWizardPayload

  """Deletes a single `CiipApplicationWizard` using a unique key."""
  deleteCiipApplicationWizardByFormId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteCiipApplicationWizardByFormIdInput!
  ): DeleteCiipApplicationWizardPayload

  """Deletes a single `Facility` using its globally unique id."""
  deleteFacility(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteFacilityInput!
  ): DeleteFacilityPayload

  """Deletes a single `Facility` using a unique key."""
  deleteFacilityByRowId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteFacilityByRowIdInput!
  ): DeleteFacilityPayload

  """Deletes a single `FormJson` using its globally unique id."""
  deleteFormJson(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteFormJsonInput!
  ): DeleteFormJsonPayload

  """Deletes a single `FormJson` using a unique key."""
  deleteFormJsonByRowId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteFormJsonByRowIdInput!
  ): DeleteFormJsonPayload

  """Deletes a single `FormResult` using its globally unique id."""
  deleteFormResult(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteFormResultInput!
  ): DeleteFormResultPayload

  """Deletes a single `FormResult` using a unique key."""
  deleteFormResultByRowId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteFormResultByRowIdInput!
  ): DeleteFormResultPayload

  """Deletes a single `Organisation` using its globally unique id."""
  deleteOrganisation(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteOrganisationInput!
  ): DeleteOrganisationPayload

  """Deletes a single `Organisation` using a unique key."""
  deleteOrganisationByRowId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteOrganisationByRowIdInput!
  ): DeleteOrganisationPayload

  """Deletes a single `Product` using its globally unique id."""
  deleteProduct(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteProductInput!
  ): DeleteProductPayload

  """Deletes a single `Product` using a unique key."""
  deleteProductByRowId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteProductByRowIdInput!
  ): DeleteProductPayload

  """Deletes a single `User` using its globally unique id."""
  deleteUser(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteUserInput!
  ): DeleteUserPayload

  """Deletes a single `User` using a unique key."""
  deleteUserByRowId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteUserByRowIdInput!
  ): DeleteUserPayload

  """Deletes a single `UserOrganisation` using its globally unique id."""
  deleteUserOrganisation(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteUserOrganisationInput!
  ): DeleteUserOrganisationPayload

  """Deletes a single `UserOrganisation` using a unique key."""
  deleteUserOrganisationByRowId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteUserOrganisationByRowIdInput!
  ): DeleteUserOrganisationPayload
  insertDummyApplicationData(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: InsertDummyApplicationDataInput!
  ): InsertDummyApplicationDataPayload
}

"""An object with a globally unique `ID`."""
interface Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  id: ID!
}

"""A connection to a list of `OperatorContactDatum` values."""
type OperatorContactDataConnection {
  """A list of `OperatorContactDatum` objects."""
  nodes: [OperatorContactDatum]!

  """
  A list of edges which contains the `OperatorContactDatum` and cursor to aid in pagination.
  """
  edges: [OperatorContactDataEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `OperatorContactDatum` you could get from the connection.
  """
  totalCount: Int!
}

"""A `OperatorContactDatum` edge in the connection."""
type OperatorContactDataEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `OperatorContactDatum` at the end of the edge."""
  node: OperatorContactDatum
}

type OperatorContactDatum {
  reportId: Int
  swrsReportId: Int
  swrsOrganisationId: Int
  reportingYear: String
  firstName: String
  lastName: String
  positionTitle: String
  contactType: String
  email: String
  telephone: String
  fax: String
  contactMailingAddress: String
  contactCity: String
  contactProvince: String
  contactPostalCode: String
  contactCountry: String
}

type Organisation implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  id: ID!

  """unique if for the organisation"""
  rowId: Int!

  """report id from swrs"""
  reportId: Int

  """swrs report id from swrs"""
  swrsReportId: Int

  """swrs organisation id"""
  swrsOrganisationId: Int

  """the reporting year"""
  reportingYear: String

  """legal name of organisation"""
  operatorName: String

  """trade name of organisation"""
  operatorTradeName: String

  """duns number"""
  duns: String

  """cra business number"""
  craBusinessNumber: String

  """organisation mailing address"""
  operatorMailingAddress: String

  """organisation city"""
  operatorCity: String

  """organisation province"""
  operatorProvince: String

  """organisation postal code"""
  operatorPostalCode: String

  """organisation country"""
  operatorCountry: String

  """Reads and enables pagination through a set of `UserOrganisation`."""
  userOrganisationsByOrganisationId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `UserOrganisation`."""
    orderBy: [UserOrganisationsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: UserOrganisationCondition
  ): UserOrganisationsConnection!

  """Reads and enables pagination through a set of `Facility`."""
  facilitiesByOrganisationId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Facility`."""
    orderBy: [FacilitiesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: FacilityCondition
  ): FacilitiesConnection!
}

"""
A condition to be used against `Organisation` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input OrganisationCondition {
  """Checks for equality with the object’s `rowId` field."""
  rowId: Int

  """Checks for equality with the object’s `reportId` field."""
  reportId: Int

  """Checks for equality with the object’s `swrsReportId` field."""
  swrsReportId: Int

  """Checks for equality with the object’s `swrsOrganisationId` field."""
  swrsOrganisationId: Int

  """Checks for equality with the object’s `reportingYear` field."""
  reportingYear: String

  """Checks for equality with the object’s `operatorName` field."""
  operatorName: String

  """Checks for equality with the object’s `operatorTradeName` field."""
  operatorTradeName: String

  """Checks for equality with the object’s `duns` field."""
  duns: String

  """Checks for equality with the object’s `craBusinessNumber` field."""
  craBusinessNumber: String

  """Checks for equality with the object’s `operatorMailingAddress` field."""
  operatorMailingAddress: String

  """Checks for equality with the object’s `operatorCity` field."""
  operatorCity: String

  """Checks for equality with the object’s `operatorProvince` field."""
  operatorProvince: String

  """Checks for equality with the object’s `operatorPostalCode` field."""
  operatorPostalCode: String

  """Checks for equality with the object’s `operatorCountry` field."""
  operatorCountry: String
}

"""A connection to a list of `OrganisationDatum` values."""
type OrganisationDataConnection {
  """A list of `OrganisationDatum` objects."""
  nodes: [OrganisationDatum]!

  """
  A list of edges which contains the `OrganisationDatum` and cursor to aid in pagination.
  """
  edges: [OrganisationDataEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `OrganisationDatum` you could get from the connection.
  """
  totalCount: Int!
}

"""A `OrganisationDatum` edge in the connection."""
type OrganisationDataEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `OrganisationDatum` at the end of the edge."""
  node: OrganisationDatum
}

type OrganisationDatum {
  reportId: Int
  swrsReportId: Int
  swrsOrganisationId: Int
  reportingYear: String
  operatorName: String
  operatorTradeName: String
  duns: String
  craBusinessNumber: String
  operatorMailingAddress: String
  operatorCity: String
  operatorProvince: String
  operatorPostalCode: String
  operatorCountry: String
}

"""An input for mutations affecting `Organisation`"""
input OrganisationInput {
  """unique if for the organisation"""
  rowId: Int!

  """report id from swrs"""
  reportId: Int

  """swrs report id from swrs"""
  swrsReportId: Int

  """swrs organisation id"""
  swrsOrganisationId: Int

  """the reporting year"""
  reportingYear: String

  """legal name of organisation"""
  operatorName: String

  """trade name of organisation"""
  operatorTradeName: String

  """duns number"""
  duns: String

  """cra business number"""
  craBusinessNumber: String

  """organisation mailing address"""
  operatorMailingAddress: String

  """organisation city"""
  operatorCity: String

  """organisation province"""
  operatorProvince: String

  """organisation postal code"""
  operatorPostalCode: String

  """organisation country"""
  operatorCountry: String
}

"""
Represents an update to a `Organisation`. Fields that are set will be updated.
"""
input OrganisationPatch {
  """unique if for the organisation"""
  rowId: Int

  """report id from swrs"""
  reportId: Int

  """swrs report id from swrs"""
  swrsReportId: Int

  """swrs organisation id"""
  swrsOrganisationId: Int

  """the reporting year"""
  reportingYear: String

  """legal name of organisation"""
  operatorName: String

  """trade name of organisation"""
  operatorTradeName: String

  """duns number"""
  duns: String

  """cra business number"""
  craBusinessNumber: String

  """organisation mailing address"""
  operatorMailingAddress: String

  """organisation city"""
  operatorCity: String

  """organisation province"""
  operatorProvince: String

  """organisation postal code"""
  operatorPostalCode: String

  """organisation country"""
  operatorCountry: String
}

"""A connection to a list of `Organisation` values."""
type OrganisationsConnection {
  """A list of `Organisation` objects."""
  nodes: [Organisation]!

  """
  A list of edges which contains the `Organisation` and cursor to aid in pagination.
  """
  edges: [OrganisationsEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Organisation` you could get from the connection."""
  totalCount: Int!
}

"""A `Organisation` edge in the connection."""
type OrganisationsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Organisation` at the end of the edge."""
  node: Organisation
}

"""Methods to use when ordering `Organisation`."""
enum OrganisationsOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  REPORT_ID_ASC
  REPORT_ID_DESC
  SWRS_REPORT_ID_ASC
  SWRS_REPORT_ID_DESC
  SWRS_ORGANISATION_ID_ASC
  SWRS_ORGANISATION_ID_DESC
  REPORTING_YEAR_ASC
  REPORTING_YEAR_DESC
  OPERATOR_NAME_ASC
  OPERATOR_NAME_DESC
  OPERATOR_TRADE_NAME_ASC
  OPERATOR_TRADE_NAME_DESC
  DUNS_ASC
  DUNS_DESC
  CRA_BUSINESS_NUMBER_ASC
  CRA_BUSINESS_NUMBER_DESC
  OPERATOR_MAILING_ADDRESS_ASC
  OPERATOR_MAILING_ADDRESS_DESC
  OPERATOR_CITY_ASC
  OPERATOR_CITY_DESC
  OPERATOR_PROVINCE_ASC
  OPERATOR_PROVINCE_DESC
  OPERATOR_POSTAL_CODE_ASC
  OPERATOR_POSTAL_CODE_DESC
  OPERATOR_COUNTRY_ASC
  OPERATOR_COUNTRY_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""Information about pagination in a connection."""
type PageInfo {
  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: Cursor

  """When paginating forwards, the cursor to continue."""
  endCursor: Cursor
}

type Product implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  id: ID!

  """Unique ID for the product"""
  rowId: Int!

  """The name of the product"""
  name: String!

  """The unit of measure for the product"""
  description: String
  units: String

  """
  The current state of the product within the lifecycle (created, split, merged, redefined, archived, unarchived)
  """
  state: String

  """The parent ID(s) (previous state) of the product"""
  parent: [Int]

  """Creation date of row"""
  createdAt: Datetime!

  """Creator of row"""
  createdBy: String

  """Updated date of row"""
  updatedAt: Datetime!

  """Updator of row"""
  updatedBy: String

  """Date of deletion"""
  deletedAt: Datetime

  """The user who deleted the row"""
  deletedBy: String

  """Reads and enables pagination through a set of `Benchmark`."""
  benchmarksByProductId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Benchmark`."""
    orderBy: [BenchmarksOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: BenchmarkCondition
  ): BenchmarksConnection!
}

"""
A condition to be used against `Product` object types. All fields are tested for equality and combined with a logical ‘and.’
"""
input ProductCondition {
  """Checks for equality with the object’s `rowId` field."""
  rowId: Int

  """Checks for equality with the object’s `name` field."""
  name: String

  """Checks for equality with the object’s `description` field."""
  description: String

  """Checks for equality with the object’s `units` field."""
  units: String

  """Checks for equality with the object’s `state` field."""
  state: String

  """Checks for equality with the object’s `parent` field."""
  parent: [Int]

  """Checks for equality with the object’s `createdAt` field."""
  createdAt: Datetime

  """Checks for equality with the object’s `createdBy` field."""
  createdBy: String

  """Checks for equality with the object’s `updatedAt` field."""
  updatedAt: Datetime

  """Checks for equality with the object’s `updatedBy` field."""
  updatedBy: String

  """Checks for equality with the object’s `deletedAt` field."""
  deletedAt: Datetime

  """Checks for equality with the object’s `deletedBy` field."""
  deletedBy: String
}

"""An input for mutations affecting `Product`"""
input ProductInput {
  """Unique ID for the product"""
  rowId: Int

  """The name of the product"""
  name: String!

  """The unit of measure for the product"""
  description: String
  units: String

  """
  The current state of the product within the lifecycle (created, split, merged, redefined, archived, unarchived)
  """
  state: String

  """The parent ID(s) (previous state) of the product"""
  parent: [Int]

  """Creation date of row"""
  createdAt: Datetime

  """Creator of row"""
  createdBy: String

  """Updated date of row"""
  updatedAt: Datetime

  """Updator of row"""
  updatedBy: String

  """Date of deletion"""
  deletedAt: Datetime

  """The user who deleted the row"""
  deletedBy: String
}

"""
Represents an update to a `Product`. Fields that are set will be updated.
"""
input ProductPatch {
  """Unique ID for the product"""
  rowId: Int

  """The name of the product"""
  name: String

  """The unit of measure for the product"""
  description: String
  units: String

  """
  The current state of the product within the lifecycle (created, split, merged, redefined, archived, unarchived)
  """
  state: String

  """The parent ID(s) (previous state) of the product"""
  parent: [Int]

  """Creation date of row"""
  createdAt: Datetime

  """Creator of row"""
  createdBy: String

  """Updated date of row"""
  updatedAt: Datetime

  """Updator of row"""
  updatedBy: String

  """Date of deletion"""
  deletedAt: Datetime

  """The user who deleted the row"""
  deletedBy: String
}

"""A connection to a list of `Product` values."""
type ProductsConnection {
  """A list of `Product` objects."""
  nodes: [Product]!

  """
  A list of edges which contains the `Product` and cursor to aid in pagination.
  """
  edges: [ProductsEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Product` you could get from the connection."""
  totalCount: Int!
}

"""A `Product` edge in the connection."""
type ProductsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Product` at the end of the edge."""
  node: Product
}

"""Methods to use when ordering `Product`."""
enum ProductsOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  NAME_ASC
  NAME_DESC
  DESCRIPTION_ASC
  DESCRIPTION_DESC
  UNITS_ASC
  UNITS_DESC
  STATE_ASC
  STATE_DESC
  PARENT_ASC
  PARENT_DESC
  CREATED_AT_ASC
  CREATED_AT_DESC
  CREATED_BY_ASC
  CREATED_BY_DESC
  UPDATED_AT_ASC
  UPDATED_AT_DESC
  UPDATED_BY_ASC
  UPDATED_BY_DESC
  DELETED_AT_ASC
  DELETED_AT_DESC
  DELETED_BY_ASC
  DELETED_BY_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""The root query type which gives access points into the data universe."""
type Query implements Node {
  """
  Exposes the root query type nested one level down. This is helpful for Relay 1
  which can only query top level fields if they are in a particular form.
  """
  query: Query!

  """
  The root query type must be a `Node` to work well with Relay 1 mutations. This just resolves to `query`.
  """
  id: ID!

  """Fetches an object given its globally unique `ID`."""
  node(
    """The globally unique `ID`."""
    id: ID!
  ): Node

  """Reads and enables pagination through a set of `Application`."""
  allApplications(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Application`."""
    orderBy: [ApplicationsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ApplicationCondition
  ): ApplicationsConnection

  """Reads and enables pagination through a set of `ApplicationStatus`."""
  allApplicationStatuses(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `ApplicationStatus`."""
    orderBy: [ApplicationStatusesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ApplicationStatusCondition
  ): ApplicationStatusesConnection

  """Reads and enables pagination through a set of `Benchmark`."""
  allBenchmarks(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Benchmark`."""
    orderBy: [BenchmarksOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: BenchmarkCondition
  ): BenchmarksConnection

  """Reads and enables pagination through a set of `CiipApplication`."""
  allCiipApplications(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `CiipApplication`."""
    orderBy: [CiipApplicationsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CiipApplicationCondition
  ): CiipApplicationsConnection

  """Reads and enables pagination through a set of `CiipApplicationWizard`."""
  allCiipApplicationWizards(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `CiipApplicationWizard`."""
    orderBy: [CiipApplicationWizardsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CiipApplicationWizardCondition
  ): CiipApplicationWizardsConnection

  """Reads and enables pagination through a set of `CiipCertifier`."""
  allCiipCertifiers(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `CiipCertifier`."""
    orderBy: [CiipCertifiersOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CiipCertifierCondition
  ): CiipCertifiersConnection

  """Reads and enables pagination through a set of `CiipContact`."""
  allCiipContacts(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `CiipContact`."""
    orderBy: [CiipContactsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CiipContactCondition
  ): CiipContactsConnection

  """
  Reads and enables pagination through a set of `CiipElectricityAndHeat`.
  """
  allCiipElectricityAndHeats(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `CiipElectricityAndHeat`."""
    orderBy: [CiipElectricityAndHeatsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CiipElectricityAndHeatCondition
  ): CiipElectricityAndHeatsConnection

  """Reads and enables pagination through a set of `CiipFacility`."""
  allCiipFacilities(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `CiipFacility`."""
    orderBy: [CiipFacilitiesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CiipFacilityCondition
  ): CiipFacilitiesConnection

  """Reads and enables pagination through a set of `CiipFuel`."""
  allCiipFuels(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `CiipFuel`."""
    orderBy: [CiipFuelsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CiipFuelCondition
  ): CiipFuelsConnection

  """Reads and enables pagination through a set of `CiipOperator`."""
  allCiipOperators(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `CiipOperator`."""
    orderBy: [CiipOperatorsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CiipOperatorCondition
  ): CiipOperatorsConnection

  """Reads and enables pagination through a set of `CiipProduction`."""
  allCiipProductions(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `CiipProduction`."""
    orderBy: [CiipProductionsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CiipProductionCondition
  ): CiipProductionsConnection

  """
  Reads and enables pagination through a set of `EstimatedCarbonTaxPaid`.
  """
  allEstimatedCarbonTaxPaids(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `EstimatedCarbonTaxPaid`."""
    orderBy: [EstimatedCarbonTaxPaidsOrderBy!] = [NATURAL]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: EstimatedCarbonTaxPaidCondition
  ): EstimatedCarbonTaxPaidsConnection

  """Reads and enables pagination through a set of `Facility`."""
  allFacilities(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Facility`."""
    orderBy: [FacilitiesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: FacilityCondition
  ): FacilitiesConnection

  """Reads and enables pagination through a set of `FormJson`."""
  allFormJsons(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `FormJson`."""
    orderBy: [FormJsonsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: FormJsonCondition
  ): FormJsonsConnection

  """Reads and enables pagination through a set of `FormResult`."""
  allFormResults(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `FormResult`."""
    orderBy: [FormResultsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: FormResultCondition
  ): FormResultsConnection

  """Reads and enables pagination through a set of `Organisation`."""
  allOrganisations(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Organisation`."""
    orderBy: [OrganisationsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: OrganisationCondition
  ): OrganisationsConnection

  """Reads and enables pagination through a set of `Product`."""
  allProducts(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Product`."""
    orderBy: [ProductsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProductCondition
  ): ProductsConnection

  """Reads and enables pagination through a set of `User`."""
  allUsers(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `User`."""
    orderBy: [UsersOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: UserCondition
  ): UsersConnection

  """Reads and enables pagination through a set of `UserOrganisation`."""
  allUserOrganisations(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `UserOrganisation`."""
    orderBy: [UserOrganisationsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: UserOrganisationCondition
  ): UserOrganisationsConnection
  applicationByRowId(rowId: Int!): Application
  applicationStatusByRowId(rowId: Int!): ApplicationStatus
  benchmarkByRowId(rowId: Int!): Benchmark
  ciipApplicationByRowId(rowId: Int!): CiipApplication
  ciipApplicationWizardByFormId(formId: Int!): CiipApplicationWizard
  ciipCertifierByRowId(rowId: Int!): CiipCertifier
  ciipContactByRowId(rowId: Int!): CiipContact
  ciipElectricityAndHeatByRowId(rowId: Int!): CiipElectricityAndHeat
  ciipFacilityByRowId(rowId: Int!): CiipFacility
  ciipFuelByRowId(rowId: Int!): CiipFuel
  ciipOperatorByRowId(rowId: Int!): CiipOperator
  ciipProductionByRowId(rowId: Int!): CiipProduction
  facilityByRowId(rowId: Int!): Facility
  formJsonByRowId(rowId: Int!): FormJson
  formResultByRowId(rowId: Int!): FormResult
  organisationByRowId(rowId: Int!): Organisation
  productByRowId(rowId: Int!): Product
  userByRowId(rowId: Int!): User
  userOrganisationByRowId(rowId: Int!): UserOrganisation

  """
  Reads and enables pagination through a set of `EstimatedCarbonTaxPaid`.
  """
  getCarbonTaxByBcghgid(
    bcghgidInput: BigFloat
    reportingYear: String

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor
  ): EstimatedCarbonTaxPaidsConnection!

  """Reads and enables pagination through a set of `CiipProduction`."""
  getProductsByApplicationId(
    appId: String

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor
  ): CiipProductionsConnection!

  """Reads and enables pagination through a set of `CiipProduction`."""
  getProductsByBcghgid(
    bcghgidInput: BigFloat

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor
  ): CiipProductionsConnection!

  """Reads and enables pagination through a set of `EmissionDatum`."""
  getSwrsEmissionData(
    facilityId: Int
    reportingYear: String

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor
  ): EmissionDataConnection!

  """Reads and enables pagination through a set of `FacilityDatum`."""
  getSwrsFacilityData(
    facilityId: Int
    reportingYear: String

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor
  ): FacilityDataConnection!

  """Reads and enables pagination through a set of `FuelDatum`."""
  getSwrsFuelData(
    facilityId: Int
    reportingYear: String

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor
  ): FuelDataConnection!

  """Reads and enables pagination through a set of `OperatorContactDatum`."""
  getSwrsOperatorContactData(
    facilityId: Int
    reportingYear: String

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor
  ): OperatorContactDataConnection!

  """Reads and enables pagination through a set of `OrganisationDatum`."""
  getSwrsOrganisationData(
    facilityId: Int
    reportingYear: String

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor
  ): OrganisationDataConnection!

  """Reads and enables pagination through a set of `CiipApplication`."""
  searchApplicationList(
    searchField: String
    searchValue: String
    orderByField: String
    direction: String

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor
  ): CiipApplicationsConnection!

  """Reads a single `Application` using its globally unique `ID`."""
  application(
    """
    The globally unique `ID` to be used in selecting a single `Application`.
    """
    id: ID!
  ): Application

  """Reads a single `ApplicationStatus` using its globally unique `ID`."""
  applicationStatus(
    """
    The globally unique `ID` to be used in selecting a single `ApplicationStatus`.
    """
    id: ID!
  ): ApplicationStatus

  """Reads a single `Benchmark` using its globally unique `ID`."""
  benchmark(
    """The globally unique `ID` to be used in selecting a single `Benchmark`."""
    id: ID!
  ): Benchmark

  """Reads a single `CiipApplication` using its globally unique `ID`."""
  ciipApplication(
    """
    The globally unique `ID` to be used in selecting a single `CiipApplication`.
    """
    id: ID!
  ): CiipApplication

  """Reads a single `CiipApplicationWizard` using its globally unique `ID`."""
  ciipApplicationWizard(
    """
    The globally unique `ID` to be used in selecting a single `CiipApplicationWizard`.
    """
    id: ID!
  ): CiipApplicationWizard

  """Reads a single `CiipCertifier` using its globally unique `ID`."""
  ciipCertifier(
    """
    The globally unique `ID` to be used in selecting a single `CiipCertifier`.
    """
    id: ID!
  ): CiipCertifier

  """Reads a single `CiipContact` using its globally unique `ID`."""
  ciipContact(
    """
    The globally unique `ID` to be used in selecting a single `CiipContact`.
    """
    id: ID!
  ): CiipContact

  """
  Reads a single `CiipElectricityAndHeat` using its globally unique `ID`.
  """
  ciipElectricityAndHeat(
    """
    The globally unique `ID` to be used in selecting a single `CiipElectricityAndHeat`.
    """
    id: ID!
  ): CiipElectricityAndHeat

  """Reads a single `CiipFacility` using its globally unique `ID`."""
  ciipFacility(
    """
    The globally unique `ID` to be used in selecting a single `CiipFacility`.
    """
    id: ID!
  ): CiipFacility

  """Reads a single `CiipFuel` using its globally unique `ID`."""
  ciipFuel(
    """The globally unique `ID` to be used in selecting a single `CiipFuel`."""
    id: ID!
  ): CiipFuel

  """Reads a single `CiipOperator` using its globally unique `ID`."""
  ciipOperator(
    """
    The globally unique `ID` to be used in selecting a single `CiipOperator`.
    """
    id: ID!
  ): CiipOperator

  """Reads a single `CiipProduction` using its globally unique `ID`."""
  ciipProduction(
    """
    The globally unique `ID` to be used in selecting a single `CiipProduction`.
    """
    id: ID!
  ): CiipProduction

  """Reads a single `Facility` using its globally unique `ID`."""
  facility(
    """The globally unique `ID` to be used in selecting a single `Facility`."""
    id: ID!
  ): Facility

  """Reads a single `FormJson` using its globally unique `ID`."""
  formJson(
    """The globally unique `ID` to be used in selecting a single `FormJson`."""
    id: ID!
  ): FormJson

  """Reads a single `FormResult` using its globally unique `ID`."""
  formResult(
    """
    The globally unique `ID` to be used in selecting a single `FormResult`.
    """
    id: ID!
  ): FormResult

  """Reads a single `Organisation` using its globally unique `ID`."""
  organisation(
    """
    The globally unique `ID` to be used in selecting a single `Organisation`.
    """
    id: ID!
  ): Organisation

  """Reads a single `Product` using its globally unique `ID`."""
  product(
    """The globally unique `ID` to be used in selecting a single `Product`."""
    id: ID!
  ): Product

  """Reads a single `User` using its globally unique `ID`."""
  user(
    """The globally unique `ID` to be used in selecting a single `User`."""
    id: ID!
  ): User

  """Reads a single `UserOrganisation` using its globally unique `ID`."""
  userOrganisation(
    """
    The globally unique `ID` to be used in selecting a single `UserOrganisation`.
    """
    id: ID!
  ): UserOrganisation
}

"""All input for the `updateApplicationByRowId` mutation."""
input UpdateApplicationByRowIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `Application` being updated.
  """
  applicationPatch: ApplicationPatch!

  """The application id used for reference and join"""
  rowId: Int!
}

"""All input for the `updateApplication` mutation."""
input UpdateApplicationInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Application` to be updated.
  """
  id: ID!

  """
  An object where the defined keys will be set on the `Application` being updated.
  """
  applicationPatch: ApplicationPatch!
}

"""The output of our update `Application` mutation."""
type UpdateApplicationPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Application` that was updated by this mutation."""
  application: Application

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `Application`. May be used by Relay 1."""
  applicationEdge(
    """The method to use when ordering `Application`."""
    orderBy: [ApplicationsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ApplicationsEdge
}

"""All input for the `updateApplicationStatusByRowId` mutation."""
input UpdateApplicationStatusByRowIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `ApplicationStatus` being updated.
  """
  applicationStatusPatch: ApplicationStatusPatch!

  """The id used for reference and join"""
  rowId: Int!
}

"""All input for the `updateApplicationStatus` mutation."""
input UpdateApplicationStatusInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `ApplicationStatus` to be updated.
  """
  id: ID!

  """
  An object where the defined keys will be set on the `ApplicationStatus` being updated.
  """
  applicationStatusPatch: ApplicationStatusPatch!
}

"""The output of our update `ApplicationStatus` mutation."""
type UpdateApplicationStatusPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `ApplicationStatus` that was updated by this mutation."""
  applicationStatus: ApplicationStatus

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `Application` that is related to this `ApplicationStatus`.
  """
  applicationByApplicationId: Application

  """
  Reads a single `FormResult` that is related to this `ApplicationStatus`.
  """
  formResultByFormResultId: FormResult

  """An edge for our `ApplicationStatus`. May be used by Relay 1."""
  applicationStatusEdge(
    """The method to use when ordering `ApplicationStatus`."""
    orderBy: [ApplicationStatusesOrderBy!] = [PRIMARY_KEY_ASC]
  ): ApplicationStatusesEdge
}

"""All input for the `updateBenchmarkByRowId` mutation."""
input UpdateBenchmarkByRowIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `Benchmark` being updated.
  """
  benchmarkPatch: BenchmarkPatch!

  """Unique ID for the benchmark"""
  rowId: Int!
}

"""All input for the `updateBenchmark` mutation."""
input UpdateBenchmarkInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Benchmark` to be updated.
  """
  id: ID!

  """
  An object where the defined keys will be set on the `Benchmark` being updated.
  """
  benchmarkPatch: BenchmarkPatch!
}

"""The output of our update `Benchmark` mutation."""
type UpdateBenchmarkPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Benchmark` that was updated by this mutation."""
  benchmark: Benchmark

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Product` that is related to this `Benchmark`."""
  productByProductId: Product

  """An edge for our `Benchmark`. May be used by Relay 1."""
  benchmarkEdge(
    """The method to use when ordering `Benchmark`."""
    orderBy: [BenchmarksOrderBy!] = [PRIMARY_KEY_ASC]
  ): BenchmarksEdge
}

"""All input for the `updateCiipApplicationWizardByFormId` mutation."""
input UpdateCiipApplicationWizardByFormIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `CiipApplicationWizard` being updated.
  """
  ciipApplicationWizardPatch: CiipApplicationWizardPatch!

  """The id of the form"""
  formId: Int!
}

"""All input for the `updateCiipApplicationWizard` mutation."""
input UpdateCiipApplicationWizardInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `CiipApplicationWizard` to be updated.
  """
  id: ID!

  """
  An object where the defined keys will be set on the `CiipApplicationWizard` being updated.
  """
  ciipApplicationWizardPatch: CiipApplicationWizardPatch!
}

"""The output of our update `CiipApplicationWizard` mutation."""
type UpdateCiipApplicationWizardPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `CiipApplicationWizard` that was updated by this mutation."""
  ciipApplicationWizard: CiipApplicationWizard

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `FormJson` that is related to this `CiipApplicationWizard`.
  """
  formJsonByFormId: FormJson

  """An edge for our `CiipApplicationWizard`. May be used by Relay 1."""
  ciipApplicationWizardEdge(
    """The method to use when ordering `CiipApplicationWizard`."""
    orderBy: [CiipApplicationWizardsOrderBy!] = [PRIMARY_KEY_ASC]
  ): CiipApplicationWizardsEdge
}

"""All input for the `updateFacilityByRowId` mutation."""
input UpdateFacilityByRowIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `Facility` being updated.
  """
  facilityPatch: FacilityPatch!

  """unique id for the facility"""
  rowId: Int!
}

"""All input for the `updateFacility` mutation."""
input UpdateFacilityInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Facility` to be updated.
  """
  id: ID!

  """
  An object where the defined keys will be set on the `Facility` being updated.
  """
  facilityPatch: FacilityPatch!
}

"""The output of our update `Facility` mutation."""
type UpdateFacilityPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Facility` that was updated by this mutation."""
  facility: Facility

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Organisation` that is related to this `Facility`."""
  organisationByOrganisationId: Organisation

  """An edge for our `Facility`. May be used by Relay 1."""
  facilityEdge(
    """The method to use when ordering `Facility`."""
    orderBy: [FacilitiesOrderBy!] = [PRIMARY_KEY_ASC]
  ): FacilitiesEdge
}

"""All input for the `updateFormJsonByRowId` mutation."""
input UpdateFormJsonByRowIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `FormJson` being updated.
  """
  formJsonPatch: FormJsonPatch!

  """Unique ID for the form"""
  rowId: Int!
}

"""All input for the `updateFormJson` mutation."""
input UpdateFormJsonInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `FormJson` to be updated.
  """
  id: ID!

  """
  An object where the defined keys will be set on the `FormJson` being updated.
  """
  formJsonPatch: FormJsonPatch!
}

"""The output of our update `FormJson` mutation."""
type UpdateFormJsonPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `FormJson` that was updated by this mutation."""
  formJson: FormJson

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `FormJson`. May be used by Relay 1."""
  formJsonEdge(
    """The method to use when ordering `FormJson`."""
    orderBy: [FormJsonsOrderBy!] = [PRIMARY_KEY_ASC]
  ): FormJsonsEdge
}

"""All input for the `updateFormResultByRowId` mutation."""
input UpdateFormResultByRowIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `FormResult` being updated.
  """
  formResultPatch: FormResultPatch!

  """Unique ID for the form"""
  rowId: Int!
}

"""All input for the `updateFormResult` mutation."""
input UpdateFormResultInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `FormResult` to be updated.
  """
  id: ID!

  """
  An object where the defined keys will be set on the `FormResult` being updated.
  """
  formResultPatch: FormResultPatch!
}

"""The output of our update `FormResult` mutation."""
type UpdateFormResultPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `FormResult` that was updated by this mutation."""
  formResult: FormResult

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Application` that is related to this `FormResult`."""
  applicationByApplicationId: Application

  """An edge for our `FormResult`. May be used by Relay 1."""
  formResultEdge(
    """The method to use when ordering `FormResult`."""
    orderBy: [FormResultsOrderBy!] = [PRIMARY_KEY_ASC]
  ): FormResultsEdge
}

"""All input for the `updateOrganisationByRowId` mutation."""
input UpdateOrganisationByRowIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `Organisation` being updated.
  """
  organisationPatch: OrganisationPatch!

  """unique if for the organisation"""
  rowId: Int!
}

"""All input for the `updateOrganisation` mutation."""
input UpdateOrganisationInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Organisation` to be updated.
  """
  id: ID!

  """
  An object where the defined keys will be set on the `Organisation` being updated.
  """
  organisationPatch: OrganisationPatch!
}

"""The output of our update `Organisation` mutation."""
type UpdateOrganisationPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Organisation` that was updated by this mutation."""
  organisation: Organisation

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `Organisation`. May be used by Relay 1."""
  organisationEdge(
    """The method to use when ordering `Organisation`."""
    orderBy: [OrganisationsOrderBy!] = [PRIMARY_KEY_ASC]
  ): OrganisationsEdge
}

"""All input for the `updateProductByRowId` mutation."""
input UpdateProductByRowIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `Product` being updated.
  """
  productPatch: ProductPatch!

  """Unique ID for the product"""
  rowId: Int!
}

"""All input for the `updateProduct` mutation."""
input UpdateProductInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Product` to be updated.
  """
  id: ID!

  """
  An object where the defined keys will be set on the `Product` being updated.
  """
  productPatch: ProductPatch!
}

"""The output of our update `Product` mutation."""
type UpdateProductPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Product` that was updated by this mutation."""
  product: Product

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `Product`. May be used by Relay 1."""
  productEdge(
    """The method to use when ordering `Product`."""
    orderBy: [ProductsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ProductsEdge
}

"""All input for the `updateUserByRowId` mutation."""
input UpdateUserByRowIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `User` being updated.
  """
  userPatch: UserPatch!

  """Unique ID for the user"""
  rowId: Int!
}

"""All input for the `updateUser` mutation."""
input UpdateUserInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `User` to be updated.
  """
  id: ID!

  """
  An object where the defined keys will be set on the `User` being updated.
  """
  userPatch: UserPatch!
}

"""All input for the `updateUserOrganisationByRowId` mutation."""
input UpdateUserOrganisationByRowIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `UserOrganisation` being updated.
  """
  userOrganisationPatch: UserOrganisationPatch!

  """unique id of the row"""
  rowId: Int!
}

"""All input for the `updateUserOrganisation` mutation."""
input UpdateUserOrganisationInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `UserOrganisation` to be updated.
  """
  id: ID!

  """
  An object where the defined keys will be set on the `UserOrganisation` being updated.
  """
  userOrganisationPatch: UserOrganisationPatch!
}

"""The output of our update `UserOrganisation` mutation."""
type UpdateUserOrganisationPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `UserOrganisation` that was updated by this mutation."""
  userOrganisation: UserOrganisation

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `User` that is related to this `UserOrganisation`."""
  userByUserId: User

  """
  Reads a single `Organisation` that is related to this `UserOrganisation`.
  """
  organisationByOrganisationId: Organisation

  """An edge for our `UserOrganisation`. May be used by Relay 1."""
  userOrganisationEdge(
    """The method to use when ordering `UserOrganisation`."""
    orderBy: [UserOrganisationsOrderBy!] = [PRIMARY_KEY_ASC]
  ): UserOrganisationsEdge
}

"""The output of our update `User` mutation."""
type UpdateUserPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `User` that was updated by this mutation."""
  user: User

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `User`. May be used by Relay 1."""
  userEdge(
    """The method to use when ordering `User`."""
    orderBy: [UsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): UsersEdge
}

type User implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  id: ID!

  """Unique ID for the user"""
  rowId: Int!

  """Universally Unique ID for the user used for auth"""
  uuid: UUID

  """User's first name"""
  firstName: String

  """User's last name"""
  lastName: String

  """User's email address"""
  emailAddress: String

  """The date the user was updated"""
  createdAt: Datetime!

  """The person who updated the user"""
  createdBy: String

  """The date the user was updated"""
  updatedAt: Datetime!

  """The person who updated the user"""
  updatedBy: String

  """Reads and enables pagination through a set of `UserOrganisation`."""
  userOrganisationsByUserId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `UserOrganisation`."""
    orderBy: [UserOrganisationsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: UserOrganisationCondition
  ): UserOrganisationsConnection!
}

"""
A condition to be used against `User` object types. All fields are tested for equality and combined with a logical ‘and.’
"""
input UserCondition {
  """Checks for equality with the object’s `rowId` field."""
  rowId: Int

  """Checks for equality with the object’s `uuid` field."""
  uuid: UUID

  """Checks for equality with the object’s `firstName` field."""
  firstName: String

  """Checks for equality with the object’s `lastName` field."""
  lastName: String

  """Checks for equality with the object’s `emailAddress` field."""
  emailAddress: String

  """Checks for equality with the object’s `createdAt` field."""
  createdAt: Datetime

  """Checks for equality with the object’s `createdBy` field."""
  createdBy: String

  """Checks for equality with the object’s `updatedAt` field."""
  updatedAt: Datetime

  """Checks for equality with the object’s `updatedBy` field."""
  updatedBy: String
}

"""An input for mutations affecting `User`"""
input UserInput {
  """Unique ID for the user"""
  rowId: Int!

  """Universally Unique ID for the user used for auth"""
  uuid: UUID

  """User's first name"""
  firstName: String

  """User's last name"""
  lastName: String

  """User's email address"""
  emailAddress: String

  """The date the user was updated"""
  createdAt: Datetime

  """The person who updated the user"""
  createdBy: String

  """The date the user was updated"""
  updatedAt: Datetime

  """The person who updated the user"""
  updatedBy: String
}

type UserOrganisation implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  id: ID!

  """unique id of the row"""
  rowId: Int!

  """foreign key that references the user table"""
  userId: Int!

  """foreign key that references the organisation table"""
  organisationId: Int!

  """Reads a single `User` that is related to this `UserOrganisation`."""
  userByUserId: User

  """
  Reads a single `Organisation` that is related to this `UserOrganisation`.
  """
  organisationByOrganisationId: Organisation
}

"""
A condition to be used against `UserOrganisation` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input UserOrganisationCondition {
  """Checks for equality with the object’s `rowId` field."""
  rowId: Int

  """Checks for equality with the object’s `userId` field."""
  userId: Int

  """Checks for equality with the object’s `organisationId` field."""
  organisationId: Int
}

"""An input for mutations affecting `UserOrganisation`"""
input UserOrganisationInput {
  """unique id of the row"""
  rowId: Int!

  """foreign key that references the user table"""
  userId: Int!

  """foreign key that references the organisation table"""
  organisationId: Int!
}

"""
Represents an update to a `UserOrganisation`. Fields that are set will be updated.
"""
input UserOrganisationPatch {
  """unique id of the row"""
  rowId: Int

  """foreign key that references the user table"""
  userId: Int

  """foreign key that references the organisation table"""
  organisationId: Int
}

"""A connection to a list of `UserOrganisation` values."""
type UserOrganisationsConnection {
  """A list of `UserOrganisation` objects."""
  nodes: [UserOrganisation]!

  """
  A list of edges which contains the `UserOrganisation` and cursor to aid in pagination.
  """
  edges: [UserOrganisationsEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `UserOrganisation` you could get from the connection.
  """
  totalCount: Int!
}

"""A `UserOrganisation` edge in the connection."""
type UserOrganisationsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `UserOrganisation` at the end of the edge."""
  node: UserOrganisation
}

"""Methods to use when ordering `UserOrganisation`."""
enum UserOrganisationsOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  USER_ID_ASC
  USER_ID_DESC
  ORGANISATION_ID_ASC
  ORGANISATION_ID_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""Represents an update to a `User`. Fields that are set will be updated."""
input UserPatch {
  """Unique ID for the user"""
  rowId: Int

  """Universally Unique ID for the user used for auth"""
  uuid: UUID

  """User's first name"""
  firstName: String

  """User's last name"""
  lastName: String

  """User's email address"""
  emailAddress: String

  """The date the user was updated"""
  createdAt: Datetime

  """The person who updated the user"""
  createdBy: String

  """The date the user was updated"""
  updatedAt: Datetime

  """The person who updated the user"""
  updatedBy: String
}

"""A connection to a list of `User` values."""
type UsersConnection {
  """A list of `User` objects."""
  nodes: [User]!

  """
  A list of edges which contains the `User` and cursor to aid in pagination.
  """
  edges: [UsersEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `User` you could get from the connection."""
  totalCount: Int!
}

"""A `User` edge in the connection."""
type UsersEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `User` at the end of the edge."""
  node: User
}

"""Methods to use when ordering `User`."""
enum UsersOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  UUID_ASC
  UUID_DESC
  FIRST_NAME_ASC
  FIRST_NAME_DESC
  LAST_NAME_ASC
  LAST_NAME_DESC
  EMAIL_ADDRESS_ASC
  EMAIL_ADDRESS_DESC
  CREATED_AT_ASC
  CREATED_AT_DESC
  CREATED_BY_ASC
  CREATED_BY_DESC
  UPDATED_AT_ASC
  UPDATED_AT_DESC
  UPDATED_BY_ASC
  UPDATED_BY_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
A universally unique identifier as defined by [RFC 4122](https://tools.ietf.org/html/rfc4122).
"""
scalar UUID
