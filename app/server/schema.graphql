"""The application data"""
type Application implements Node {
  applicationRevisionByStringVersionNumber(versionNumberInput: String): ApplicationRevision

  """Reads and enables pagination through a set of `ApplicationRevision`."""
  applicationRevisionsByApplicationId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ApplicationRevisionCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ApplicationRevisionFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `ApplicationRevision`."""
    orderBy: [ApplicationRevisionsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ApplicationRevisionsConnection!

  """
  Computed column to determine whether a revision is immutable (submitted)
  """
  applicationRevisionStatus(versionNumberInput: String): ApplicationRevisionStatus

  """
  This function is a wrapper to return bcghgid as a scalar from the composite
  return of the application_facility computed column
  """
  bcghgid: String

  """Reads and enables pagination through a set of `CertificationUrl`."""
  certificationUrlsByApplicationId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CertificationUrlCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CertificationUrlFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CertificationUrl`."""
    orderBy: [CertificationUrlsOrderBy!] = [PRIMARY_KEY_ASC]
  ): CertificationUrlsConnection!

  """Reads and enables pagination through a set of `CertificationUrl`."""
  certificationUrlsBySearchCertificationUrlResultApplicationIdAndCertificationUrlId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CertificationUrlCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CertificationUrlFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CertificationUrl`."""
    orderBy: [CertificationUrlsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ApplicationCertificationUrlsBySearchCertificationUrlResultApplicationIdAndCertificationUrlIdManyToManyConnection!

  """Reads and enables pagination through a set of `CiipUser`."""
  ciipUsersByApplicationRevisionApplicationIdAndCreatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CiipUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CiipUserFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CiipUser`."""
    orderBy: [CiipUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): ApplicationCiipUsersByApplicationRevisionApplicationIdAndCreatedByManyToManyConnection!

  """Reads and enables pagination through a set of `CiipUser`."""
  ciipUsersByApplicationRevisionApplicationIdAndDeletedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CiipUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CiipUserFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CiipUser`."""
    orderBy: [CiipUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): ApplicationCiipUsersByApplicationRevisionApplicationIdAndDeletedByManyToManyConnection!

  """Reads and enables pagination through a set of `CiipUser`."""
  ciipUsersByApplicationRevisionApplicationIdAndUpdatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CiipUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CiipUserFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CiipUser`."""
    orderBy: [CiipUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): ApplicationCiipUsersByApplicationRevisionApplicationIdAndUpdatedByManyToManyConnection!

  """Reads and enables pagination through a set of `CiipUser`."""
  ciipUsersByCertificationUrlApplicationIdAndCertifiedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CiipUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CiipUserFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CiipUser`."""
    orderBy: [CiipUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): ApplicationCiipUsersByCertificationUrlApplicationIdAndCertifiedByManyToManyConnection!

  """Reads and enables pagination through a set of `CiipUser`."""
  ciipUsersByCertificationUrlApplicationIdAndCreatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CiipUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CiipUserFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CiipUser`."""
    orderBy: [CiipUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): ApplicationCiipUsersByCertificationUrlApplicationIdAndCreatedByManyToManyConnection!

  """Reads and enables pagination through a set of `CiipUser`."""
  ciipUsersByCertificationUrlApplicationIdAndDeletedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CiipUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CiipUserFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CiipUser`."""
    orderBy: [CiipUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): ApplicationCiipUsersByCertificationUrlApplicationIdAndDeletedByManyToManyConnection!

  """Reads and enables pagination through a set of `CiipUser`."""
  ciipUsersByCertificationUrlApplicationIdAndUpdatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CiipUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CiipUserFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CiipUser`."""
    orderBy: [CiipUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): ApplicationCiipUsersByCertificationUrlApplicationIdAndUpdatedByManyToManyConnection!

  """Reads and enables pagination through a set of `CiipUser`."""
  ciipUsersByFormResultApplicationIdAndCreatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CiipUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CiipUserFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CiipUser`."""
    orderBy: [CiipUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): ApplicationCiipUsersByFormResultApplicationIdAndCreatedByManyToManyConnection!

  """Reads and enables pagination through a set of `CiipUser`."""
  ciipUsersByFormResultApplicationIdAndDeletedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CiipUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CiipUserFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CiipUser`."""
    orderBy: [CiipUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): ApplicationCiipUsersByFormResultApplicationIdAndDeletedByManyToManyConnection!

  """Reads and enables pagination through a set of `CiipUser`."""
  ciipUsersByFormResultApplicationIdAndUpdatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CiipUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CiipUserFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CiipUser`."""
    orderBy: [CiipUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): ApplicationCiipUsersByFormResultApplicationIdAndUpdatedByManyToManyConnection!

  """Reads and enables pagination through a set of `CiipUser`."""
  ciipUsersByFormResultStatusApplicationIdAndCreatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CiipUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CiipUserFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CiipUser`."""
    orderBy: [CiipUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): ApplicationCiipUsersByFormResultStatusApplicationIdAndCreatedByManyToManyConnection!

  """Reads and enables pagination through a set of `CiipUser`."""
  ciipUsersByFormResultStatusApplicationIdAndDeletedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CiipUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CiipUserFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CiipUser`."""
    orderBy: [CiipUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): ApplicationCiipUsersByFormResultStatusApplicationIdAndDeletedByManyToManyConnection!

  """Reads and enables pagination through a set of `CiipUser`."""
  ciipUsersByFormResultStatusApplicationIdAndUpdatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CiipUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CiipUserFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CiipUser`."""
    orderBy: [CiipUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): ApplicationCiipUsersByFormResultStatusApplicationIdAndUpdatedByManyToManyConnection!

  """Reads and enables pagination through a set of `CiipUser`."""
  ciipUsersByReviewCommentApplicationIdAndCreatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CiipUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CiipUserFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CiipUser`."""
    orderBy: [CiipUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): ApplicationCiipUsersByReviewCommentApplicationIdAndCreatedByManyToManyConnection!

  """Reads and enables pagination through a set of `CiipUser`."""
  ciipUsersByReviewCommentApplicationIdAndDeletedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CiipUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CiipUserFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CiipUser`."""
    orderBy: [CiipUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): ApplicationCiipUsersByReviewCommentApplicationIdAndDeletedByManyToManyConnection!

  """Reads and enables pagination through a set of `CiipUser`."""
  ciipUsersByReviewCommentApplicationIdAndUpdatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CiipUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CiipUserFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CiipUser`."""
    orderBy: [CiipUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): ApplicationCiipUsersByReviewCommentApplicationIdAndUpdatedByManyToManyConnection!

  """
  returns a boolean value based on whether the current user has edit permission on the application
  """
  currentUserCanEdit: Boolean

  """Reads and enables pagination through a set of `Facility`."""
  facilitiesByFacilitySearchResultApplicationIdAndFacilityId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: FacilityCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: FacilityFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Facility`."""
    orderBy: [FacilitiesOrderBy!] = [PRIMARY_KEY_ASC]
  ): ApplicationFacilitiesByFacilitySearchResultApplicationIdAndFacilityIdManyToManyConnection!

  """Reads a single `Facility` that is related to this `Application`."""
  facilityByFacilityId: Facility

  """The foreign key to ggircs_portal.facility, references id"""
  facilityId: Int!

  """
  This function is a wrapper to return facility_name from the facility object
  """
  facilityName: String

  """Reads and enables pagination through a set of `FormJson`."""
  formJsonsByFormResultApplicationIdAndFormId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: FormJsonCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: FormJsonFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `FormJson`."""
    orderBy: [FormJsonsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ApplicationFormJsonsByFormResultApplicationIdAndFormIdManyToManyConnection!

  """Reads and enables pagination through a set of `FormJson`."""
  formJsonsByReviewCommentApplicationIdAndFormId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: FormJsonCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: FormJsonFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `FormJson`."""
    orderBy: [FormJsonsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ApplicationFormJsonsByReviewCommentApplicationIdAndFormIdManyToManyConnection!

  """Reads and enables pagination through a set of `FormResult`."""
  formResultsByApplicationId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: FormResultCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: FormResultFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `FormResult`."""
    orderBy: [FormResultsOrderBy!] = [PRIMARY_KEY_ASC]
  ): FormResultsConnection!

  """Reads and enables pagination through a set of `FormResultStatus`."""
  formResultStatusesByApplicationId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: FormResultStatusCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: FormResultStatusFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `FormResultStatus`."""
    orderBy: [FormResultStatusesOrderBy!] = [PRIMARY_KEY_ASC]
  ): FormResultStatusesConnection!

  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  id: ID!

  """
  Computed column for graphql to retrieve a given application_revision when
  given a version number as String (e.g. from a router query)
  """
  latestDraftRevision: ApplicationRevision

  """
  Computed column for graphql to traverse to the latest application_revision with status "submitted" from application
  """
  latestSubmittedRevision: ApplicationRevision

  """
  This function is a wrapper to return operator_name from the organisation object
  """
  operatorName: String

  """
  Computed column for graphql to traverse to a set of form results ordered by the application wizard from application
  """
  orderedFormResults(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: FormResultFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int
    versionNumberInput: String
  ): FormResultsConnection!

  """
  Computed column for graphql to traverse to the previous application_revision with status "submitted" from application
  """
  previousSubmittedRevision: ApplicationRevision

  """
  The id of the swrs report (swrs.report.id) that was imported when starting the application
  """
  reportId: Int

  """
  The foreign key to ggircs_portal.reporting_year, references reporting_year
  """
  reportingYear: Int

  """Reads a single `ReportingYear` that is related to this `Application`."""
  reportingYearByReportingYear: ReportingYear

  """Reads and enables pagination through a set of `ReviewComment`."""
  reviewCommentsByApplicationId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ReviewCommentCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ReviewCommentFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `ReviewComment`."""
    orderBy: [ReviewCommentsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ReviewCommentsConnection!

  """The application id used for reference and join"""
  rowId: Int!

  """
  This function is a wrapper to return application_revision_status as a scalar
  from the composite return of the application_application_revision_status
  computed column
  """
  status: String

  """
  This function is a wrapper to return created_at (as submission_date) as a
  scalar from the composite return of the
  application_application_revision_status computed column
  """
  submissionDate: Datetime
}

"""
A connection to a list of `CertificationUrl` values, with data from `SearchCertificationUrlResult`.
"""
type ApplicationCertificationUrlsBySearchCertificationUrlResultApplicationIdAndCertificationUrlIdManyToManyConnection {
  """
  A list of edges which contains the `CertificationUrl`, info from the
  `SearchCertificationUrlResult`, and the cursor to aid in pagination.
  """
  edges: [ApplicationCertificationUrlsBySearchCertificationUrlResultApplicationIdAndCertificationUrlIdManyToManyEdge!]!

  """A list of `CertificationUrl` objects."""
  nodes: [CertificationUrl]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `CertificationUrl` you could get from the connection.
  """
  totalCount: Int!
}

"""
A `CertificationUrl` edge in the connection, with data from `SearchCertificationUrlResult`.
"""
type ApplicationCertificationUrlsBySearchCertificationUrlResultApplicationIdAndCertificationUrlIdManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CertificationUrl` at the end of the edge."""
  node: CertificationUrl

  """
  Reads and enables pagination through a set of `SearchCertificationUrlResult`.
  """
  searchCertificationUrlResultsByCertificationUrlId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: SearchCertificationUrlResultFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int
  ): SearchCertificationUrlResultsConnection!
}

"""
A connection to a list of `CiipUser` values, with data from `ApplicationRevision`.
"""
type ApplicationCiipUsersByApplicationRevisionApplicationIdAndCreatedByManyToManyConnection {
  """
  A list of edges which contains the `CiipUser`, info from the `ApplicationRevision`, and the cursor to aid in pagination.
  """
  edges: [ApplicationCiipUsersByApplicationRevisionApplicationIdAndCreatedByManyToManyEdge!]!

  """A list of `CiipUser` objects."""
  nodes: [CiipUser]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CiipUser` you could get from the connection."""
  totalCount: Int!
}

"""
A `CiipUser` edge in the connection, with data from `ApplicationRevision`.
"""
type ApplicationCiipUsersByApplicationRevisionApplicationIdAndCreatedByManyToManyEdge {
  """Reads and enables pagination through a set of `ApplicationRevision`."""
  applicationRevisionsByCreatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ApplicationRevisionCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ApplicationRevisionFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `ApplicationRevision`."""
    orderBy: [ApplicationRevisionsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ApplicationRevisionsConnection!

  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CiipUser` at the end of the edge."""
  node: CiipUser
}

"""
A connection to a list of `CiipUser` values, with data from `ApplicationRevision`.
"""
type ApplicationCiipUsersByApplicationRevisionApplicationIdAndDeletedByManyToManyConnection {
  """
  A list of edges which contains the `CiipUser`, info from the `ApplicationRevision`, and the cursor to aid in pagination.
  """
  edges: [ApplicationCiipUsersByApplicationRevisionApplicationIdAndDeletedByManyToManyEdge!]!

  """A list of `CiipUser` objects."""
  nodes: [CiipUser]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CiipUser` you could get from the connection."""
  totalCount: Int!
}

"""
A `CiipUser` edge in the connection, with data from `ApplicationRevision`.
"""
type ApplicationCiipUsersByApplicationRevisionApplicationIdAndDeletedByManyToManyEdge {
  """Reads and enables pagination through a set of `ApplicationRevision`."""
  applicationRevisionsByDeletedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ApplicationRevisionCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ApplicationRevisionFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `ApplicationRevision`."""
    orderBy: [ApplicationRevisionsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ApplicationRevisionsConnection!

  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CiipUser` at the end of the edge."""
  node: CiipUser
}

"""
A connection to a list of `CiipUser` values, with data from `ApplicationRevision`.
"""
type ApplicationCiipUsersByApplicationRevisionApplicationIdAndUpdatedByManyToManyConnection {
  """
  A list of edges which contains the `CiipUser`, info from the `ApplicationRevision`, and the cursor to aid in pagination.
  """
  edges: [ApplicationCiipUsersByApplicationRevisionApplicationIdAndUpdatedByManyToManyEdge!]!

  """A list of `CiipUser` objects."""
  nodes: [CiipUser]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CiipUser` you could get from the connection."""
  totalCount: Int!
}

"""
A `CiipUser` edge in the connection, with data from `ApplicationRevision`.
"""
type ApplicationCiipUsersByApplicationRevisionApplicationIdAndUpdatedByManyToManyEdge {
  """Reads and enables pagination through a set of `ApplicationRevision`."""
  applicationRevisionsByUpdatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ApplicationRevisionCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ApplicationRevisionFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `ApplicationRevision`."""
    orderBy: [ApplicationRevisionsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ApplicationRevisionsConnection!

  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CiipUser` at the end of the edge."""
  node: CiipUser
}

"""
A connection to a list of `CiipUser` values, with data from `CertificationUrl`.
"""
type ApplicationCiipUsersByCertificationUrlApplicationIdAndCertifiedByManyToManyConnection {
  """
  A list of edges which contains the `CiipUser`, info from the `CertificationUrl`, and the cursor to aid in pagination.
  """
  edges: [ApplicationCiipUsersByCertificationUrlApplicationIdAndCertifiedByManyToManyEdge!]!

  """A list of `CiipUser` objects."""
  nodes: [CiipUser]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CiipUser` you could get from the connection."""
  totalCount: Int!
}

"""
A `CiipUser` edge in the connection, with data from `CertificationUrl`.
"""
type ApplicationCiipUsersByCertificationUrlApplicationIdAndCertifiedByManyToManyEdge {
  """Reads and enables pagination through a set of `CertificationUrl`."""
  certificationUrlsByCertifiedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CertificationUrlCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CertificationUrlFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CertificationUrl`."""
    orderBy: [CertificationUrlsOrderBy!] = [PRIMARY_KEY_ASC]
  ): CertificationUrlsConnection!

  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CiipUser` at the end of the edge."""
  node: CiipUser
}

"""
A connection to a list of `CiipUser` values, with data from `CertificationUrl`.
"""
type ApplicationCiipUsersByCertificationUrlApplicationIdAndCreatedByManyToManyConnection {
  """
  A list of edges which contains the `CiipUser`, info from the `CertificationUrl`, and the cursor to aid in pagination.
  """
  edges: [ApplicationCiipUsersByCertificationUrlApplicationIdAndCreatedByManyToManyEdge!]!

  """A list of `CiipUser` objects."""
  nodes: [CiipUser]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CiipUser` you could get from the connection."""
  totalCount: Int!
}

"""
A `CiipUser` edge in the connection, with data from `CertificationUrl`.
"""
type ApplicationCiipUsersByCertificationUrlApplicationIdAndCreatedByManyToManyEdge {
  """Reads and enables pagination through a set of `CertificationUrl`."""
  certificationUrlsByCreatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CertificationUrlCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CertificationUrlFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CertificationUrl`."""
    orderBy: [CertificationUrlsOrderBy!] = [PRIMARY_KEY_ASC]
  ): CertificationUrlsConnection!

  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CiipUser` at the end of the edge."""
  node: CiipUser
}

"""
A connection to a list of `CiipUser` values, with data from `CertificationUrl`.
"""
type ApplicationCiipUsersByCertificationUrlApplicationIdAndDeletedByManyToManyConnection {
  """
  A list of edges which contains the `CiipUser`, info from the `CertificationUrl`, and the cursor to aid in pagination.
  """
  edges: [ApplicationCiipUsersByCertificationUrlApplicationIdAndDeletedByManyToManyEdge!]!

  """A list of `CiipUser` objects."""
  nodes: [CiipUser]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CiipUser` you could get from the connection."""
  totalCount: Int!
}

"""
A `CiipUser` edge in the connection, with data from `CertificationUrl`.
"""
type ApplicationCiipUsersByCertificationUrlApplicationIdAndDeletedByManyToManyEdge {
  """Reads and enables pagination through a set of `CertificationUrl`."""
  certificationUrlsByDeletedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CertificationUrlCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CertificationUrlFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CertificationUrl`."""
    orderBy: [CertificationUrlsOrderBy!] = [PRIMARY_KEY_ASC]
  ): CertificationUrlsConnection!

  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CiipUser` at the end of the edge."""
  node: CiipUser
}

"""
A connection to a list of `CiipUser` values, with data from `CertificationUrl`.
"""
type ApplicationCiipUsersByCertificationUrlApplicationIdAndUpdatedByManyToManyConnection {
  """
  A list of edges which contains the `CiipUser`, info from the `CertificationUrl`, and the cursor to aid in pagination.
  """
  edges: [ApplicationCiipUsersByCertificationUrlApplicationIdAndUpdatedByManyToManyEdge!]!

  """A list of `CiipUser` objects."""
  nodes: [CiipUser]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CiipUser` you could get from the connection."""
  totalCount: Int!
}

"""
A `CiipUser` edge in the connection, with data from `CertificationUrl`.
"""
type ApplicationCiipUsersByCertificationUrlApplicationIdAndUpdatedByManyToManyEdge {
  """Reads and enables pagination through a set of `CertificationUrl`."""
  certificationUrlsByUpdatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CertificationUrlCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CertificationUrlFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CertificationUrl`."""
    orderBy: [CertificationUrlsOrderBy!] = [PRIMARY_KEY_ASC]
  ): CertificationUrlsConnection!

  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CiipUser` at the end of the edge."""
  node: CiipUser
}

"""
A connection to a list of `CiipUser` values, with data from `FormResult`.
"""
type ApplicationCiipUsersByFormResultApplicationIdAndCreatedByManyToManyConnection {
  """
  A list of edges which contains the `CiipUser`, info from the `FormResult`, and the cursor to aid in pagination.
  """
  edges: [ApplicationCiipUsersByFormResultApplicationIdAndCreatedByManyToManyEdge!]!

  """A list of `CiipUser` objects."""
  nodes: [CiipUser]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CiipUser` you could get from the connection."""
  totalCount: Int!
}

"""A `CiipUser` edge in the connection, with data from `FormResult`."""
type ApplicationCiipUsersByFormResultApplicationIdAndCreatedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """Reads and enables pagination through a set of `FormResult`."""
  formResultsByCreatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: FormResultCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: FormResultFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `FormResult`."""
    orderBy: [FormResultsOrderBy!] = [PRIMARY_KEY_ASC]
  ): FormResultsConnection!

  """The `CiipUser` at the end of the edge."""
  node: CiipUser
}

"""
A connection to a list of `CiipUser` values, with data from `FormResult`.
"""
type ApplicationCiipUsersByFormResultApplicationIdAndDeletedByManyToManyConnection {
  """
  A list of edges which contains the `CiipUser`, info from the `FormResult`, and the cursor to aid in pagination.
  """
  edges: [ApplicationCiipUsersByFormResultApplicationIdAndDeletedByManyToManyEdge!]!

  """A list of `CiipUser` objects."""
  nodes: [CiipUser]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CiipUser` you could get from the connection."""
  totalCount: Int!
}

"""A `CiipUser` edge in the connection, with data from `FormResult`."""
type ApplicationCiipUsersByFormResultApplicationIdAndDeletedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """Reads and enables pagination through a set of `FormResult`."""
  formResultsByDeletedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: FormResultCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: FormResultFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `FormResult`."""
    orderBy: [FormResultsOrderBy!] = [PRIMARY_KEY_ASC]
  ): FormResultsConnection!

  """The `CiipUser` at the end of the edge."""
  node: CiipUser
}

"""
A connection to a list of `CiipUser` values, with data from `FormResult`.
"""
type ApplicationCiipUsersByFormResultApplicationIdAndUpdatedByManyToManyConnection {
  """
  A list of edges which contains the `CiipUser`, info from the `FormResult`, and the cursor to aid in pagination.
  """
  edges: [ApplicationCiipUsersByFormResultApplicationIdAndUpdatedByManyToManyEdge!]!

  """A list of `CiipUser` objects."""
  nodes: [CiipUser]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CiipUser` you could get from the connection."""
  totalCount: Int!
}

"""A `CiipUser` edge in the connection, with data from `FormResult`."""
type ApplicationCiipUsersByFormResultApplicationIdAndUpdatedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """Reads and enables pagination through a set of `FormResult`."""
  formResultsByUpdatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: FormResultCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: FormResultFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `FormResult`."""
    orderBy: [FormResultsOrderBy!] = [PRIMARY_KEY_ASC]
  ): FormResultsConnection!

  """The `CiipUser` at the end of the edge."""
  node: CiipUser
}

"""
A connection to a list of `CiipUser` values, with data from `FormResultStatus`.
"""
type ApplicationCiipUsersByFormResultStatusApplicationIdAndCreatedByManyToManyConnection {
  """
  A list of edges which contains the `CiipUser`, info from the `FormResultStatus`, and the cursor to aid in pagination.
  """
  edges: [ApplicationCiipUsersByFormResultStatusApplicationIdAndCreatedByManyToManyEdge!]!

  """A list of `CiipUser` objects."""
  nodes: [CiipUser]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CiipUser` you could get from the connection."""
  totalCount: Int!
}

"""
A `CiipUser` edge in the connection, with data from `FormResultStatus`.
"""
type ApplicationCiipUsersByFormResultStatusApplicationIdAndCreatedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """Reads and enables pagination through a set of `FormResultStatus`."""
  formResultStatusesByCreatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: FormResultStatusCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: FormResultStatusFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `FormResultStatus`."""
    orderBy: [FormResultStatusesOrderBy!] = [PRIMARY_KEY_ASC]
  ): FormResultStatusesConnection!

  """The `CiipUser` at the end of the edge."""
  node: CiipUser
}

"""
A connection to a list of `CiipUser` values, with data from `FormResultStatus`.
"""
type ApplicationCiipUsersByFormResultStatusApplicationIdAndDeletedByManyToManyConnection {
  """
  A list of edges which contains the `CiipUser`, info from the `FormResultStatus`, and the cursor to aid in pagination.
  """
  edges: [ApplicationCiipUsersByFormResultStatusApplicationIdAndDeletedByManyToManyEdge!]!

  """A list of `CiipUser` objects."""
  nodes: [CiipUser]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CiipUser` you could get from the connection."""
  totalCount: Int!
}

"""
A `CiipUser` edge in the connection, with data from `FormResultStatus`.
"""
type ApplicationCiipUsersByFormResultStatusApplicationIdAndDeletedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """Reads and enables pagination through a set of `FormResultStatus`."""
  formResultStatusesByDeletedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: FormResultStatusCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: FormResultStatusFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `FormResultStatus`."""
    orderBy: [FormResultStatusesOrderBy!] = [PRIMARY_KEY_ASC]
  ): FormResultStatusesConnection!

  """The `CiipUser` at the end of the edge."""
  node: CiipUser
}

"""
A connection to a list of `CiipUser` values, with data from `FormResultStatus`.
"""
type ApplicationCiipUsersByFormResultStatusApplicationIdAndUpdatedByManyToManyConnection {
  """
  A list of edges which contains the `CiipUser`, info from the `FormResultStatus`, and the cursor to aid in pagination.
  """
  edges: [ApplicationCiipUsersByFormResultStatusApplicationIdAndUpdatedByManyToManyEdge!]!

  """A list of `CiipUser` objects."""
  nodes: [CiipUser]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CiipUser` you could get from the connection."""
  totalCount: Int!
}

"""
A `CiipUser` edge in the connection, with data from `FormResultStatus`.
"""
type ApplicationCiipUsersByFormResultStatusApplicationIdAndUpdatedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """Reads and enables pagination through a set of `FormResultStatus`."""
  formResultStatusesByUpdatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: FormResultStatusCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: FormResultStatusFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `FormResultStatus`."""
    orderBy: [FormResultStatusesOrderBy!] = [PRIMARY_KEY_ASC]
  ): FormResultStatusesConnection!

  """The `CiipUser` at the end of the edge."""
  node: CiipUser
}

"""
A connection to a list of `CiipUser` values, with data from `ReviewComment`.
"""
type ApplicationCiipUsersByReviewCommentApplicationIdAndCreatedByManyToManyConnection {
  """
  A list of edges which contains the `CiipUser`, info from the `ReviewComment`, and the cursor to aid in pagination.
  """
  edges: [ApplicationCiipUsersByReviewCommentApplicationIdAndCreatedByManyToManyEdge!]!

  """A list of `CiipUser` objects."""
  nodes: [CiipUser]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CiipUser` you could get from the connection."""
  totalCount: Int!
}

"""A `CiipUser` edge in the connection, with data from `ReviewComment`."""
type ApplicationCiipUsersByReviewCommentApplicationIdAndCreatedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CiipUser` at the end of the edge."""
  node: CiipUser

  """Reads and enables pagination through a set of `ReviewComment`."""
  reviewCommentsByCreatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ReviewCommentCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ReviewCommentFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `ReviewComment`."""
    orderBy: [ReviewCommentsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ReviewCommentsConnection!
}

"""
A connection to a list of `CiipUser` values, with data from `ReviewComment`.
"""
type ApplicationCiipUsersByReviewCommentApplicationIdAndDeletedByManyToManyConnection {
  """
  A list of edges which contains the `CiipUser`, info from the `ReviewComment`, and the cursor to aid in pagination.
  """
  edges: [ApplicationCiipUsersByReviewCommentApplicationIdAndDeletedByManyToManyEdge!]!

  """A list of `CiipUser` objects."""
  nodes: [CiipUser]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CiipUser` you could get from the connection."""
  totalCount: Int!
}

"""A `CiipUser` edge in the connection, with data from `ReviewComment`."""
type ApplicationCiipUsersByReviewCommentApplicationIdAndDeletedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CiipUser` at the end of the edge."""
  node: CiipUser

  """Reads and enables pagination through a set of `ReviewComment`."""
  reviewCommentsByDeletedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ReviewCommentCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ReviewCommentFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `ReviewComment`."""
    orderBy: [ReviewCommentsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ReviewCommentsConnection!
}

"""
A connection to a list of `CiipUser` values, with data from `ReviewComment`.
"""
type ApplicationCiipUsersByReviewCommentApplicationIdAndUpdatedByManyToManyConnection {
  """
  A list of edges which contains the `CiipUser`, info from the `ReviewComment`, and the cursor to aid in pagination.
  """
  edges: [ApplicationCiipUsersByReviewCommentApplicationIdAndUpdatedByManyToManyEdge!]!

  """A list of `CiipUser` objects."""
  nodes: [CiipUser]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CiipUser` you could get from the connection."""
  totalCount: Int!
}

"""A `CiipUser` edge in the connection, with data from `ReviewComment`."""
type ApplicationCiipUsersByReviewCommentApplicationIdAndUpdatedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CiipUser` at the end of the edge."""
  node: CiipUser

  """Reads and enables pagination through a set of `ReviewComment`."""
  reviewCommentsByUpdatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ReviewCommentCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ReviewCommentFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `ReviewComment`."""
    orderBy: [ReviewCommentsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ReviewCommentsConnection!
}

"""
A condition to be used against `Application` object types. All fields are tested
for equality and combined with a logical ‘and.’
"""
input ApplicationCondition {
  """Checks for equality with the object’s `facilityId` field."""
  facilityId: Int

  """Checks for equality with the object’s `reportId` field."""
  reportId: Int

  """Checks for equality with the object’s `reportingYear` field."""
  reportingYear: Int

  """Checks for equality with the object’s `rowId` field."""
  rowId: Int
}

"""
A connection to a list of `Facility` values, with data from `FacilitySearchResult`.
"""
type ApplicationFacilitiesByFacilitySearchResultApplicationIdAndFacilityIdManyToManyConnection {
  """
  A list of edges which contains the `Facility`, info from the `FacilitySearchResult`, and the cursor to aid in pagination.
  """
  edges: [ApplicationFacilitiesByFacilitySearchResultApplicationIdAndFacilityIdManyToManyEdge!]!

  """A list of `Facility` objects."""
  nodes: [Facility]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Facility` you could get from the connection."""
  totalCount: Int!
}

"""
A `Facility` edge in the connection, with data from `FacilitySearchResult`.
"""
type ApplicationFacilitiesByFacilitySearchResultApplicationIdAndFacilityIdManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """Reads and enables pagination through a set of `FacilitySearchResult`."""
  facilitySearchResultsByFacilityId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: FacilitySearchResultFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int
  ): FacilitySearchResultsConnection!

  """The `Facility` at the end of the edge."""
  node: Facility
}

"""
A filter to be used against `Application` object types. All fields are combined with a logical ‘and.’
"""
input ApplicationFilter {
  """Checks for all expressions in this list."""
  and: [ApplicationFilter!]

  """Filter by the object’s `applicationRevisionsByApplicationId` relation."""
  applicationRevisionsByApplicationId: ApplicationToManyApplicationRevisionFilter

  """Some related `applicationRevisionsByApplicationId` exist."""
  applicationRevisionsByApplicationIdExist: Boolean

  """Filter by the object’s `bcghgid` field."""
  bcghgid: StringFilter

  """Filter by the object’s `certificationUrlsByApplicationId` relation."""
  certificationUrlsByApplicationId: ApplicationToManyCertificationUrlFilter

  """Some related `certificationUrlsByApplicationId` exist."""
  certificationUrlsByApplicationIdExist: Boolean

  """Filter by the object’s `currentUserCanEdit` field."""
  currentUserCanEdit: BooleanFilter

  """Filter by the object’s `facilityByFacilityId` relation."""
  facilityByFacilityId: FacilityFilter

  """Filter by the object’s `facilityId` field."""
  facilityId: IntFilter

  """Filter by the object’s `facilityName` field."""
  facilityName: StringFilter

  """
  Filter by the object’s `facilitySearchResultsByApplicationId` relation.
  """
  facilitySearchResultsByApplicationId: ApplicationToManyFacilitySearchResultFilter

  """Some related `facilitySearchResultsByApplicationId` exist."""
  facilitySearchResultsByApplicationIdExist: Boolean

  """Filter by the object’s `formResultsByApplicationId` relation."""
  formResultsByApplicationId: ApplicationToManyFormResultFilter

  """Some related `formResultsByApplicationId` exist."""
  formResultsByApplicationIdExist: Boolean

  """Filter by the object’s `formResultStatusesByApplicationId` relation."""
  formResultStatusesByApplicationId: ApplicationToManyFormResultStatusFilter

  """Some related `formResultStatusesByApplicationId` exist."""
  formResultStatusesByApplicationIdExist: Boolean

  """Negates the expression."""
  not: ApplicationFilter

  """Filter by the object’s `operatorName` field."""
  operatorName: StringFilter

  """Checks for any expressions in this list."""
  or: [ApplicationFilter!]

  """Filter by the object’s `reportId` field."""
  reportId: IntFilter

  """Filter by the object’s `reportingYear` field."""
  reportingYear: IntFilter

  """Filter by the object’s `reportingYearByReportingYear` relation."""
  reportingYearByReportingYear: ReportingYearFilter

  """A related `reportingYearByReportingYear` exists."""
  reportingYearByReportingYearExists: Boolean

  """Filter by the object’s `reviewCommentsByApplicationId` relation."""
  reviewCommentsByApplicationId: ApplicationToManyReviewCommentFilter

  """Some related `reviewCommentsByApplicationId` exist."""
  reviewCommentsByApplicationIdExist: Boolean

  """Filter by the object’s `rowId` field."""
  rowId: IntFilter

  """
  Filter by the object’s `searchCertificationUrlResultsByApplicationId` relation.
  """
  searchCertificationUrlResultsByApplicationId: ApplicationToManySearchCertificationUrlResultFilter

  """Some related `searchCertificationUrlResultsByApplicationId` exist."""
  searchCertificationUrlResultsByApplicationIdExist: Boolean

  """Filter by the object’s `status` field."""
  status: StringFilter

  """Filter by the object’s `submissionDate` field."""
  submissionDate: DatetimeFilter
}

"""
A connection to a list of `FormJson` values, with data from `FormResult`.
"""
type ApplicationFormJsonsByFormResultApplicationIdAndFormIdManyToManyConnection {
  """
  A list of edges which contains the `FormJson`, info from the `FormResult`, and the cursor to aid in pagination.
  """
  edges: [ApplicationFormJsonsByFormResultApplicationIdAndFormIdManyToManyEdge!]!

  """A list of `FormJson` objects."""
  nodes: [FormJson]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `FormJson` you could get from the connection."""
  totalCount: Int!
}

"""A `FormJson` edge in the connection, with data from `FormResult`."""
type ApplicationFormJsonsByFormResultApplicationIdAndFormIdManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """Reads and enables pagination through a set of `FormResult`."""
  formResultsByFormId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: FormResultCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: FormResultFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `FormResult`."""
    orderBy: [FormResultsOrderBy!] = [PRIMARY_KEY_ASC]
  ): FormResultsConnection!

  """The `FormJson` at the end of the edge."""
  node: FormJson
}

"""
A connection to a list of `FormJson` values, with data from `ReviewComment`.
"""
type ApplicationFormJsonsByReviewCommentApplicationIdAndFormIdManyToManyConnection {
  """
  A list of edges which contains the `FormJson`, info from the `ReviewComment`, and the cursor to aid in pagination.
  """
  edges: [ApplicationFormJsonsByReviewCommentApplicationIdAndFormIdManyToManyEdge!]!

  """A list of `FormJson` objects."""
  nodes: [FormJson]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `FormJson` you could get from the connection."""
  totalCount: Int!
}

"""A `FormJson` edge in the connection, with data from `ReviewComment`."""
type ApplicationFormJsonsByReviewCommentApplicationIdAndFormIdManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `FormJson` at the end of the edge."""
  node: FormJson

  """Reads and enables pagination through a set of `ReviewComment`."""
  reviewCommentsByFormId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ReviewCommentCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ReviewCommentFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `ReviewComment`."""
    orderBy: [ReviewCommentsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ReviewCommentsConnection!
}

"""An input for mutations affecting `Application`"""
input ApplicationInput {
  """The foreign key to ggircs_portal.facility, references id"""
  facilityId: Int!

  """
  The id of the swrs report (swrs.report.id) that was imported when starting the application
  """
  reportId: Int

  """
  The foreign key to ggircs_portal.reporting_year, references reporting_year
  """
  reportingYear: Int
}

"""
Represents an update to a `Application`. Fields that are set will be updated.
"""
input ApplicationPatch {
  """The foreign key to ggircs_portal.facility, references id"""
  facilityId: Int

  """
  The id of the swrs report (swrs.report.id) that was imported when starting the application
  """
  reportId: Int

  """
  The foreign key to ggircs_portal.reporting_year, references reporting_year
  """
  reportingYear: Int
}

"""The application revision data"""
type ApplicationRevision implements Node {
  """
  Reads a single `Application` that is related to this `ApplicationRevision`.
  """
  applicationByApplicationId: Application

  """
  The foreign key to the ciip application, also part of the composite primary key with version number
  """
  applicationId: Int!

  """
  Computed column for graphql to traverse to the latest application_revision_status from application_revision
  """
  applicationRevisionStatus: ApplicationRevisionStatus

  """
  Reads and enables pagination through a set of `ApplicationRevisionStatus`.
  """
  applicationRevisionStatusesByApplicationIdAndVersionNumber(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ApplicationRevisionStatusCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ApplicationRevisionStatusFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `ApplicationRevisionStatus`."""
    orderBy: [ApplicationRevisionStatusesOrderBy!] = [PRIMARY_KEY_ASC]
  ): ApplicationRevisionStatusesConnection!

  """
  Computed column for graphql to traverse to show if a signature is valid from application_revision
  """
  certificationSignatureIsValid: Boolean

  """
  Computed column for graphql to traverse to a certification_url row from application_revision
  """
  certificationUrl: CertificationUrl

  """Reads and enables pagination through a set of `CertificationUrl`."""
  certificationUrlsByApplicationIdAndVersionNumber(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CertificationUrlCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CertificationUrlFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CertificationUrl`."""
    orderBy: [CertificationUrlsOrderBy!] = [PRIMARY_KEY_ASC]
  ): CertificationUrlsConnection!

  """
  Computed column for graphql to get the ciip incentive calculations from application_revision
  """
  ciipIncentive(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CiipIncentiveByProductFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int
  ): CiipIncentiveByProductsConnection!

  """
  Reads a single `CiipUser` that is related to this `ApplicationRevision`.
  """
  ciipUserByCreatedBy: CiipUser

  """
  Reads a single `CiipUser` that is related to this `ApplicationRevision`.
  """
  ciipUserByDeletedBy: CiipUser

  """
  Reads a single `CiipUser` that is related to this `ApplicationRevision`.
  """
  ciipUserByUpdatedBy: CiipUser

  """The date the application revision status was updated"""
  createdAt: Datetime!

  """The person who updated the application revision status"""
  createdBy: Int

  """The date the application revision status was deleted"""
  deletedAt: Datetime

  """The person who deleted the application revision status"""
  deletedBy: Int

  """Reads and enables pagination through a set of `FormResult`."""
  formResultsByApplicationIdAndVersionNumber(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: FormResultCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: FormResultFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `FormResult`."""
    orderBy: [FormResultsOrderBy!] = [PRIMARY_KEY_ASC]
  ): FormResultsConnection!

  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  id: ID!

  """
  Computed column indicates if a revision is the current version of the application
  """
  isCurrentVersion: Boolean
  isImmutable: Boolean

  """Whether or not reporter agreed the legal disclaimer"""
  legalDisclaimerAccepted: Boolean!

  """
  Reporter defined justification for overriding error validation when submitting this revision
  """
  overrideJustification: String

  """The date the application revision status was updated"""
  updatedAt: Datetime!

  """The person who updated the application revision status"""
  updatedBy: Int

  """
  The version number of the revision, also part of the composite primary key with application_id
  """
  versionNumber: Int!
}

"""
A condition to be used against `ApplicationRevision` object types. All fields
are tested for equality and combined with a logical ‘and.’
"""
input ApplicationRevisionCondition {
  """Checks for equality with the object’s `applicationId` field."""
  applicationId: Int

  """Checks for equality with the object’s `createdAt` field."""
  createdAt: Datetime

  """Checks for equality with the object’s `createdBy` field."""
  createdBy: Int

  """Checks for equality with the object’s `deletedAt` field."""
  deletedAt: Datetime

  """Checks for equality with the object’s `deletedBy` field."""
  deletedBy: Int

  """Checks for equality with the object’s `legalDisclaimerAccepted` field."""
  legalDisclaimerAccepted: Boolean

  """Checks for equality with the object’s `overrideJustification` field."""
  overrideJustification: String

  """Checks for equality with the object’s `updatedAt` field."""
  updatedAt: Datetime

  """Checks for equality with the object’s `updatedBy` field."""
  updatedBy: Int

  """Checks for equality with the object’s `versionNumber` field."""
  versionNumber: Int
}

"""
A filter to be used against `ApplicationRevision` object types. All fields are combined with a logical ‘and.’
"""
input ApplicationRevisionFilter {
  """Checks for all expressions in this list."""
  and: [ApplicationRevisionFilter!]

  """Filter by the object’s `applicationByApplicationId` relation."""
  applicationByApplicationId: ApplicationFilter

  """Filter by the object’s `applicationId` field."""
  applicationId: IntFilter

  """
  Filter by the object’s `applicationRevisionStatusesByApplicationIdAndVersionNumber` relation.
  """
  applicationRevisionStatusesByApplicationIdAndVersionNumber: ApplicationRevisionToManyApplicationRevisionStatusFilter

  """
  Some related `applicationRevisionStatusesByApplicationIdAndVersionNumber` exist.
  """
  applicationRevisionStatusesByApplicationIdAndVersionNumberExist: Boolean

  """Filter by the object’s `certificationSignatureIsValid` field."""
  certificationSignatureIsValid: BooleanFilter

  """
  Filter by the object’s `certificationUrlsByApplicationIdAndVersionNumber` relation.
  """
  certificationUrlsByApplicationIdAndVersionNumber: ApplicationRevisionToManyCertificationUrlFilter

  """Some related `certificationUrlsByApplicationIdAndVersionNumber` exist."""
  certificationUrlsByApplicationIdAndVersionNumberExist: Boolean

  """Filter by the object’s `ciipUserByCreatedBy` relation."""
  ciipUserByCreatedBy: CiipUserFilter

  """A related `ciipUserByCreatedBy` exists."""
  ciipUserByCreatedByExists: Boolean

  """Filter by the object’s `ciipUserByDeletedBy` relation."""
  ciipUserByDeletedBy: CiipUserFilter

  """A related `ciipUserByDeletedBy` exists."""
  ciipUserByDeletedByExists: Boolean

  """Filter by the object’s `ciipUserByUpdatedBy` relation."""
  ciipUserByUpdatedBy: CiipUserFilter

  """A related `ciipUserByUpdatedBy` exists."""
  ciipUserByUpdatedByExists: Boolean

  """Filter by the object’s `createdAt` field."""
  createdAt: DatetimeFilter

  """Filter by the object’s `createdBy` field."""
  createdBy: IntFilter

  """Filter by the object’s `deletedAt` field."""
  deletedAt: DatetimeFilter

  """Filter by the object’s `deletedBy` field."""
  deletedBy: IntFilter

  """
  Filter by the object’s `formResultsByApplicationIdAndVersionNumber` relation.
  """
  formResultsByApplicationIdAndVersionNumber: ApplicationRevisionToManyFormResultFilter

  """Some related `formResultsByApplicationIdAndVersionNumber` exist."""
  formResultsByApplicationIdAndVersionNumberExist: Boolean

  """Filter by the object’s `isCurrentVersion` field."""
  isCurrentVersion: BooleanFilter

  """Filter by the object’s `isImmutable` field."""
  isImmutable: BooleanFilter

  """Filter by the object’s `legalDisclaimerAccepted` field."""
  legalDisclaimerAccepted: BooleanFilter

  """Negates the expression."""
  not: ApplicationRevisionFilter

  """Checks for any expressions in this list."""
  or: [ApplicationRevisionFilter!]

  """Filter by the object’s `overrideJustification` field."""
  overrideJustification: StringFilter

  """Filter by the object’s `updatedAt` field."""
  updatedAt: DatetimeFilter

  """Filter by the object’s `updatedBy` field."""
  updatedBy: IntFilter

  """Filter by the object’s `versionNumber` field."""
  versionNumber: IntFilter
}

"""An input for mutations affecting `ApplicationRevision`"""
input ApplicationRevisionInput {
  """
  The foreign key to the ciip application, also part of the composite primary key with version number
  """
  applicationId: Int!

  """The date the application revision status was updated"""
  createdAt: Datetime

  """The person who updated the application revision status"""
  createdBy: Int

  """The date the application revision status was deleted"""
  deletedAt: Datetime

  """The person who deleted the application revision status"""
  deletedBy: Int

  """Whether or not reporter agreed the legal disclaimer"""
  legalDisclaimerAccepted: Boolean

  """
  Reporter defined justification for overriding error validation when submitting this revision
  """
  overrideJustification: String

  """The date the application revision status was updated"""
  updatedAt: Datetime

  """The person who updated the application revision status"""
  updatedBy: Int

  """
  The version number of the revision, also part of the composite primary key with application_id
  """
  versionNumber: Int!
}

"""
Represents an update to a `ApplicationRevision`. Fields that are set will be updated.
"""
input ApplicationRevisionPatch {
  """
  The foreign key to the ciip application, also part of the composite primary key with version number
  """
  applicationId: Int

  """The date the application revision status was updated"""
  createdAt: Datetime

  """The person who updated the application revision status"""
  createdBy: Int

  """The date the application revision status was deleted"""
  deletedAt: Datetime

  """The person who deleted the application revision status"""
  deletedBy: Int

  """Whether or not reporter agreed the legal disclaimer"""
  legalDisclaimerAccepted: Boolean

  """
  Reporter defined justification for overriding error validation when submitting this revision
  """
  overrideJustification: String

  """The date the application revision status was updated"""
  updatedAt: Datetime

  """The person who updated the application revision status"""
  updatedBy: Int

  """
  The version number of the revision, also part of the composite primary key with application_id
  """
  versionNumber: Int
}

"""A connection to a list of `ApplicationRevision` values."""
type ApplicationRevisionsConnection {
  """
  A list of edges which contains the `ApplicationRevision` and cursor to aid in pagination.
  """
  edges: [ApplicationRevisionsEdge!]!

  """A list of `ApplicationRevision` objects."""
  nodes: [ApplicationRevision]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `ApplicationRevision` you could get from the connection.
  """
  totalCount: Int!
}

"""A `ApplicationRevision` edge in the connection."""
type ApplicationRevisionsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `ApplicationRevision` at the end of the edge."""
  node: ApplicationRevision
}

"""Methods to use when ordering `ApplicationRevision`."""
enum ApplicationRevisionsOrderBy {
  APPLICATION_ID_ASC
  APPLICATION_ID_DESC
  CREATED_AT_ASC
  CREATED_AT_DESC
  CREATED_BY_ASC
  CREATED_BY_DESC
  DELETED_AT_ASC
  DELETED_AT_DESC
  DELETED_BY_ASC
  DELETED_BY_DESC
  LEGAL_DISCLAIMER_ACCEPTED_ASC
  LEGAL_DISCLAIMER_ACCEPTED_DESC
  NATURAL
  OVERRIDE_JUSTIFICATION_ASC
  OVERRIDE_JUSTIFICATION_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  UPDATED_AT_ASC
  UPDATED_AT_DESC
  UPDATED_BY_ASC
  UPDATED_BY_DESC
  VERSION_NUMBER_ASC
  VERSION_NUMBER_DESC
}

"""The application revision status data"""
type ApplicationRevisionStatus implements Node {
  """The foreign key to application used for reference and join"""
  applicationId: Int!

  """
  Reads a single `ApplicationRevision` that is related to this `ApplicationRevisionStatus`.
  """
  applicationRevisionByApplicationIdAndVersionNumber: ApplicationRevision

  """The application revision status"""
  applicationRevisionStatus: CiipApplicationRevisionStatus

  """
  Reads a single `CiipUser` that is related to this `ApplicationRevisionStatus`.
  """
  ciipUserByCreatedBy: CiipUser

  """
  Reads a single `CiipUser` that is related to this `ApplicationRevisionStatus`.
  """
  ciipUserByDeletedBy: CiipUser

  """
  Reads a single `CiipUser` that is related to this `ApplicationRevisionStatus`.
  """
  ciipUserByUpdatedBy: CiipUser

  """The date the application revision status was updated"""
  createdAt: Datetime!

  """The person who updated the application revision status"""
  createdBy: Int

  """The date the application revision status was deleted"""
  deletedAt: Datetime

  """The person who deleted the application revision status"""
  deletedBy: Int

  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  id: ID!

  """The id used for reference and join"""
  rowId: Int!

  """The date the application revision status was updated"""
  updatedAt: Datetime!

  """The person who updated the application revision status"""
  updatedBy: Int

  """The application version this status is attached to"""
  versionNumber: Int!
}

"""
A condition to be used against `ApplicationRevisionStatus` object types. All
fields are tested for equality and combined with a logical ‘and.’
"""
input ApplicationRevisionStatusCondition {
  """Checks for equality with the object’s `applicationId` field."""
  applicationId: Int

  """
  Checks for equality with the object’s `applicationRevisionStatus` field.
  """
  applicationRevisionStatus: CiipApplicationRevisionStatus

  """Checks for equality with the object’s `createdAt` field."""
  createdAt: Datetime

  """Checks for equality with the object’s `createdBy` field."""
  createdBy: Int

  """Checks for equality with the object’s `deletedAt` field."""
  deletedAt: Datetime

  """Checks for equality with the object’s `deletedBy` field."""
  deletedBy: Int

  """Checks for equality with the object’s `rowId` field."""
  rowId: Int

  """Checks for equality with the object’s `updatedAt` field."""
  updatedAt: Datetime

  """Checks for equality with the object’s `updatedBy` field."""
  updatedBy: Int

  """Checks for equality with the object’s `versionNumber` field."""
  versionNumber: Int
}

"""A connection to a list of `ApplicationRevisionStatus` values."""
type ApplicationRevisionStatusesConnection {
  """
  A list of edges which contains the `ApplicationRevisionStatus` and cursor to aid in pagination.
  """
  edges: [ApplicationRevisionStatusesEdge!]!

  """A list of `ApplicationRevisionStatus` objects."""
  nodes: [ApplicationRevisionStatus]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `ApplicationRevisionStatus` you could get from the connection.
  """
  totalCount: Int!
}

"""A `ApplicationRevisionStatus` edge in the connection."""
type ApplicationRevisionStatusesEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `ApplicationRevisionStatus` at the end of the edge."""
  node: ApplicationRevisionStatus
}

"""Methods to use when ordering `ApplicationRevisionStatus`."""
enum ApplicationRevisionStatusesOrderBy {
  APPLICATION_ID_ASC
  APPLICATION_ID_DESC
  APPLICATION_REVISION_STATUS_ASC
  APPLICATION_REVISION_STATUS_DESC
  CREATED_AT_ASC
  CREATED_AT_DESC
  CREATED_BY_ASC
  CREATED_BY_DESC
  DELETED_AT_ASC
  DELETED_AT_DESC
  DELETED_BY_ASC
  DELETED_BY_DESC
  ID_ASC
  ID_DESC
  NATURAL
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  UPDATED_AT_ASC
  UPDATED_AT_DESC
  UPDATED_BY_ASC
  UPDATED_BY_DESC
  VERSION_NUMBER_ASC
  VERSION_NUMBER_DESC
}

"""
A filter to be used against `ApplicationRevisionStatus` object types. All fields are combined with a logical ‘and.’
"""
input ApplicationRevisionStatusFilter {
  """Checks for all expressions in this list."""
  and: [ApplicationRevisionStatusFilter!]

  """Filter by the object’s `applicationId` field."""
  applicationId: IntFilter

  """
  Filter by the object’s `applicationRevisionByApplicationIdAndVersionNumber` relation.
  """
  applicationRevisionByApplicationIdAndVersionNumber: ApplicationRevisionFilter

  """Filter by the object’s `applicationRevisionStatus` field."""
  applicationRevisionStatus: CiipApplicationRevisionStatusFilter

  """Filter by the object’s `ciipUserByCreatedBy` relation."""
  ciipUserByCreatedBy: CiipUserFilter

  """A related `ciipUserByCreatedBy` exists."""
  ciipUserByCreatedByExists: Boolean

  """Filter by the object’s `ciipUserByDeletedBy` relation."""
  ciipUserByDeletedBy: CiipUserFilter

  """A related `ciipUserByDeletedBy` exists."""
  ciipUserByDeletedByExists: Boolean

  """Filter by the object’s `ciipUserByUpdatedBy` relation."""
  ciipUserByUpdatedBy: CiipUserFilter

  """A related `ciipUserByUpdatedBy` exists."""
  ciipUserByUpdatedByExists: Boolean

  """Filter by the object’s `createdAt` field."""
  createdAt: DatetimeFilter

  """Filter by the object’s `createdBy` field."""
  createdBy: IntFilter

  """Filter by the object’s `deletedAt` field."""
  deletedAt: DatetimeFilter

  """Filter by the object’s `deletedBy` field."""
  deletedBy: IntFilter

  """Negates the expression."""
  not: ApplicationRevisionStatusFilter

  """Checks for any expressions in this list."""
  or: [ApplicationRevisionStatusFilter!]

  """Filter by the object’s `rowId` field."""
  rowId: IntFilter

  """Filter by the object’s `updatedAt` field."""
  updatedAt: DatetimeFilter

  """Filter by the object’s `updatedBy` field."""
  updatedBy: IntFilter

  """Filter by the object’s `versionNumber` field."""
  versionNumber: IntFilter
}

"""An input for mutations affecting `ApplicationRevisionStatus`"""
input ApplicationRevisionStatusInput {
  """The foreign key to application used for reference and join"""
  applicationId: Int!

  """The application revision status"""
  applicationRevisionStatus: CiipApplicationRevisionStatus

  """The date the application revision status was updated"""
  createdAt: Datetime

  """The person who updated the application revision status"""
  createdBy: Int

  """The date the application revision status was deleted"""
  deletedAt: Datetime

  """The person who deleted the application revision status"""
  deletedBy: Int

  """The date the application revision status was updated"""
  updatedAt: Datetime

  """The person who updated the application revision status"""
  updatedBy: Int

  """The application version this status is attached to"""
  versionNumber: Int!
}

"""
Represents an update to a `ApplicationRevisionStatus`. Fields that are set will be updated.
"""
input ApplicationRevisionStatusPatch {
  """The foreign key to application used for reference and join"""
  applicationId: Int

  """The application revision status"""
  applicationRevisionStatus: CiipApplicationRevisionStatus

  """The date the application revision status was updated"""
  createdAt: Datetime

  """The person who updated the application revision status"""
  createdBy: Int

  """The date the application revision status was deleted"""
  deletedAt: Datetime

  """The person who deleted the application revision status"""
  deletedBy: Int

  """The date the application revision status was updated"""
  updatedAt: Datetime

  """The person who updated the application revision status"""
  updatedBy: Int

  """The application version this status is attached to"""
  versionNumber: Int
}

"""
A filter to be used against many `ApplicationRevisionStatus` object types. All fields are combined with a logical ‘and.’
"""
input ApplicationRevisionToManyApplicationRevisionStatusFilter {
  """
  Every related `ApplicationRevisionStatus` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: ApplicationRevisionStatusFilter

  """
  No related `ApplicationRevisionStatus` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: ApplicationRevisionStatusFilter

  """
  Some related `ApplicationRevisionStatus` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: ApplicationRevisionStatusFilter
}

"""
A filter to be used against many `CertificationUrl` object types. All fields are combined with a logical ‘and.’
"""
input ApplicationRevisionToManyCertificationUrlFilter {
  """
  Every related `CertificationUrl` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: CertificationUrlFilter

  """
  No related `CertificationUrl` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: CertificationUrlFilter

  """
  Some related `CertificationUrl` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: CertificationUrlFilter
}

"""
A filter to be used against many `FormResult` object types. All fields are combined with a logical ‘and.’
"""
input ApplicationRevisionToManyFormResultFilter {
  """
  Every related `FormResult` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: FormResultFilter

  """
  No related `FormResult` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: FormResultFilter

  """
  Some related `FormResult` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: FormResultFilter
}

"""A connection to a list of `Application` values."""
type ApplicationsConnection {
  """
  A list of edges which contains the `Application` and cursor to aid in pagination.
  """
  edges: [ApplicationsEdge!]!

  """A list of `Application` objects."""
  nodes: [Application]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Application` you could get from the connection."""
  totalCount: Int!
}

"""A `Application` edge in the connection."""
type ApplicationsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Application` at the end of the edge."""
  node: Application
}

"""Methods to use when ordering `Application`."""
enum ApplicationsOrderBy {
  BCGHGID_ASC
  BCGHGID_DESC
  FACILITY_ID_ASC
  FACILITY_ID_DESC
  FACILITY_NAME_ASC
  FACILITY_NAME_DESC
  ID_ASC
  ID_DESC
  NATURAL
  OPERATOR_NAME_ASC
  OPERATOR_NAME_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  REPORT_ID_ASC
  REPORT_ID_DESC
  REPORTING_YEAR_ASC
  REPORTING_YEAR_DESC
  STATUS_ASC
  STATUS_DESC
  SUBMISSION_DATE_ASC
  SUBMISSION_DATE_DESC
}

"""
A filter to be used against many `ApplicationRevision` object types. All fields are combined with a logical ‘and.’
"""
input ApplicationToManyApplicationRevisionFilter {
  """
  Every related `ApplicationRevision` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: ApplicationRevisionFilter

  """
  No related `ApplicationRevision` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: ApplicationRevisionFilter

  """
  Some related `ApplicationRevision` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: ApplicationRevisionFilter
}

"""
A filter to be used against many `CertificationUrl` object types. All fields are combined with a logical ‘and.’
"""
input ApplicationToManyCertificationUrlFilter {
  """
  Every related `CertificationUrl` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: CertificationUrlFilter

  """
  No related `CertificationUrl` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: CertificationUrlFilter

  """
  Some related `CertificationUrl` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: CertificationUrlFilter
}

"""
A filter to be used against many `FacilitySearchResult` object types. All fields are combined with a logical ‘and.’
"""
input ApplicationToManyFacilitySearchResultFilter {
  """
  Every related `FacilitySearchResult` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: FacilitySearchResultFilter

  """
  No related `FacilitySearchResult` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: FacilitySearchResultFilter

  """
  Some related `FacilitySearchResult` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: FacilitySearchResultFilter
}

"""
A filter to be used against many `FormResult` object types. All fields are combined with a logical ‘and.’
"""
input ApplicationToManyFormResultFilter {
  """
  Every related `FormResult` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: FormResultFilter

  """
  No related `FormResult` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: FormResultFilter

  """
  Some related `FormResult` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: FormResultFilter
}

"""
A filter to be used against many `FormResultStatus` object types. All fields are combined with a logical ‘and.’
"""
input ApplicationToManyFormResultStatusFilter {
  """
  Every related `FormResultStatus` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: FormResultStatusFilter

  """
  No related `FormResultStatus` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: FormResultStatusFilter

  """
  Some related `FormResultStatus` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: FormResultStatusFilter
}

"""
A filter to be used against many `ReviewComment` object types. All fields are combined with a logical ‘and.’
"""
input ApplicationToManyReviewCommentFilter {
  """
  Every related `ReviewComment` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: ReviewCommentFilter

  """
  No related `ReviewComment` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: ReviewCommentFilter

  """
  Some related `ReviewComment` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: ReviewCommentFilter
}

"""
A filter to be used against many `SearchCertificationUrlResult` object types. All fields are combined with a logical ‘and.’
"""
input ApplicationToManySearchCertificationUrlResultFilter {
  """
  Every related `SearchCertificationUrlResult` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: SearchCertificationUrlResultFilter

  """
  No related `SearchCertificationUrlResult` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: SearchCertificationUrlResultFilter

  """
  Some related `SearchCertificationUrlResult` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: SearchCertificationUrlResultFilter
}

"""Table containing the benchmark and eligibility threshold for a product"""
type Benchmark implements Node {
  """
  The benchmark for a product, i.e. the emission intensity that would return a 100% incentive
  """
  benchmark: BigFloat!

  """Reads a single `CiipUser` that is related to this `Benchmark`."""
  ciipUserByCreatedBy: CiipUser

  """Reads a single `CiipUser` that is related to this `Benchmark`."""
  ciipUserByDeletedBy: CiipUser

  """Reads a single `CiipUser` that is related to this `Benchmark`."""
  ciipUserByUpdatedBy: CiipUser

  """Creation date of row"""
  createdAt: Datetime!

  """Creator of row"""
  createdBy: Int

  """Deletion date of row"""
  deletedAt: Datetime

  """The user who deleted the row"""
  deletedBy: Int

  """
  The eligibility threshold for a product, i.e. the maximum emission intensity (exclusive) allowed to get an incentive
  """
  eligibilityThreshold: BigFloat!

  """The last reporting year where this benchmark is active"""
  endReportingYear: Int!

  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  id: ID!

  """The multiplier applied to the incentive amounts under this product"""
  incentiveMultiplier: BigFloat!

  """The minimum incentive ratio for this benchmark (typically 0)"""
  maximumIncentiveRatio: BigFloat!

  """The minimum incentive ratio for this benchmark (typically 0)"""
  minimumIncentiveRatio: BigFloat!

  """Reads a single `Product` that is related to this `Benchmark`."""
  productByProductId: Product

  """Foreign key to the product"""
  productId: Int!

  """Reads a single `ReportingYear` that is related to this `Benchmark`."""
  reportingYearByEndReportingYear: ReportingYear

  """Reads a single `ReportingYear` that is related to this `Benchmark`."""
  reportingYearByStartReportingYear: ReportingYear

  """Unique ID for the benchmark"""
  rowId: Int!

  """The reporting year where this benchmark becomes active"""
  startReportingYear: Int!

  """Last update date of row"""
  updatedAt: Datetime!

  """The user who last updated the row"""
  updatedBy: Int
}

"""
A condition to be used against `Benchmark` object types. All fields are tested
for equality and combined with a logical ‘and.’
"""
input BenchmarkCondition {
  """Checks for equality with the object’s `benchmark` field."""
  benchmark: BigFloat

  """Checks for equality with the object’s `createdAt` field."""
  createdAt: Datetime

  """Checks for equality with the object’s `createdBy` field."""
  createdBy: Int

  """Checks for equality with the object’s `deletedAt` field."""
  deletedAt: Datetime

  """Checks for equality with the object’s `deletedBy` field."""
  deletedBy: Int

  """Checks for equality with the object’s `eligibilityThreshold` field."""
  eligibilityThreshold: BigFloat

  """Checks for equality with the object’s `endReportingYear` field."""
  endReportingYear: Int

  """Checks for equality with the object’s `incentiveMultiplier` field."""
  incentiveMultiplier: BigFloat

  """Checks for equality with the object’s `maximumIncentiveRatio` field."""
  maximumIncentiveRatio: BigFloat

  """Checks for equality with the object’s `minimumIncentiveRatio` field."""
  minimumIncentiveRatio: BigFloat

  """Checks for equality with the object’s `productId` field."""
  productId: Int

  """Checks for equality with the object’s `rowId` field."""
  rowId: Int

  """Checks for equality with the object’s `startReportingYear` field."""
  startReportingYear: Int

  """Checks for equality with the object’s `updatedAt` field."""
  updatedAt: Datetime

  """Checks for equality with the object’s `updatedBy` field."""
  updatedBy: Int
}

"""
A filter to be used against `Benchmark` object types. All fields are combined with a logical ‘and.’
"""
input BenchmarkFilter {
  """Checks for all expressions in this list."""
  and: [BenchmarkFilter!]

  """Filter by the object’s `benchmark` field."""
  benchmark: BigFloatFilter

  """Filter by the object’s `ciipUserByCreatedBy` relation."""
  ciipUserByCreatedBy: CiipUserFilter

  """A related `ciipUserByCreatedBy` exists."""
  ciipUserByCreatedByExists: Boolean

  """Filter by the object’s `ciipUserByDeletedBy` relation."""
  ciipUserByDeletedBy: CiipUserFilter

  """A related `ciipUserByDeletedBy` exists."""
  ciipUserByDeletedByExists: Boolean

  """Filter by the object’s `ciipUserByUpdatedBy` relation."""
  ciipUserByUpdatedBy: CiipUserFilter

  """A related `ciipUserByUpdatedBy` exists."""
  ciipUserByUpdatedByExists: Boolean

  """Filter by the object’s `createdAt` field."""
  createdAt: DatetimeFilter

  """Filter by the object’s `createdBy` field."""
  createdBy: IntFilter

  """Filter by the object’s `deletedAt` field."""
  deletedAt: DatetimeFilter

  """Filter by the object’s `deletedBy` field."""
  deletedBy: IntFilter

  """Filter by the object’s `eligibilityThreshold` field."""
  eligibilityThreshold: BigFloatFilter

  """Filter by the object’s `endReportingYear` field."""
  endReportingYear: IntFilter

  """Filter by the object’s `incentiveMultiplier` field."""
  incentiveMultiplier: BigFloatFilter

  """Filter by the object’s `maximumIncentiveRatio` field."""
  maximumIncentiveRatio: BigFloatFilter

  """Filter by the object’s `minimumIncentiveRatio` field."""
  minimumIncentiveRatio: BigFloatFilter

  """Negates the expression."""
  not: BenchmarkFilter

  """Checks for any expressions in this list."""
  or: [BenchmarkFilter!]

  """Filter by the object’s `productByProductId` relation."""
  productByProductId: ProductFilter

  """Filter by the object’s `productId` field."""
  productId: IntFilter

  """Filter by the object’s `reportingYearByEndReportingYear` relation."""
  reportingYearByEndReportingYear: ReportingYearFilter

  """Filter by the object’s `reportingYearByStartReportingYear` relation."""
  reportingYearByStartReportingYear: ReportingYearFilter

  """Filter by the object’s `rowId` field."""
  rowId: IntFilter

  """Filter by the object’s `startReportingYear` field."""
  startReportingYear: IntFilter

  """Filter by the object’s `updatedAt` field."""
  updatedAt: DatetimeFilter

  """Filter by the object’s `updatedBy` field."""
  updatedBy: IntFilter
}

"""An input for mutations affecting `Benchmark`"""
input BenchmarkInput {
  """
  The benchmark for a product, i.e. the emission intensity that would return a 100% incentive
  """
  benchmark: BigFloat!

  """Creation date of row"""
  createdAt: Datetime

  """Creator of row"""
  createdBy: Int

  """Deletion date of row"""
  deletedAt: Datetime

  """The user who deleted the row"""
  deletedBy: Int

  """
  The eligibility threshold for a product, i.e. the maximum emission intensity (exclusive) allowed to get an incentive
  """
  eligibilityThreshold: BigFloat!

  """The last reporting year where this benchmark is active"""
  endReportingYear: Int!

  """The multiplier applied to the incentive amounts under this product"""
  incentiveMultiplier: BigFloat

  """The minimum incentive ratio for this benchmark (typically 0)"""
  maximumIncentiveRatio: BigFloat

  """The minimum incentive ratio for this benchmark (typically 0)"""
  minimumIncentiveRatio: BigFloat

  """Foreign key to the product"""
  productId: Int!

  """The reporting year where this benchmark becomes active"""
  startReportingYear: Int!

  """Last update date of row"""
  updatedAt: Datetime

  """The user who last updated the row"""
  updatedBy: Int
}

"""
Represents an update to a `Benchmark`. Fields that are set will be updated.
"""
input BenchmarkPatch {
  """
  The benchmark for a product, i.e. the emission intensity that would return a 100% incentive
  """
  benchmark: BigFloat

  """Creation date of row"""
  createdAt: Datetime

  """Creator of row"""
  createdBy: Int

  """Deletion date of row"""
  deletedAt: Datetime

  """The user who deleted the row"""
  deletedBy: Int

  """
  The eligibility threshold for a product, i.e. the maximum emission intensity (exclusive) allowed to get an incentive
  """
  eligibilityThreshold: BigFloat

  """The last reporting year where this benchmark is active"""
  endReportingYear: Int

  """The multiplier applied to the incentive amounts under this product"""
  incentiveMultiplier: BigFloat

  """The minimum incentive ratio for this benchmark (typically 0)"""
  maximumIncentiveRatio: BigFloat

  """The minimum incentive ratio for this benchmark (typically 0)"""
  minimumIncentiveRatio: BigFloat

  """Foreign key to the product"""
  productId: Int

  """The reporting year where this benchmark becomes active"""
  startReportingYear: Int

  """Last update date of row"""
  updatedAt: Datetime

  """The user who last updated the row"""
  updatedBy: Int
}

"""A connection to a list of `Benchmark` values."""
type BenchmarksConnection {
  """
  A list of edges which contains the `Benchmark` and cursor to aid in pagination.
  """
  edges: [BenchmarksEdge!]!

  """A list of `Benchmark` objects."""
  nodes: [Benchmark]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Benchmark` you could get from the connection."""
  totalCount: Int!
}

"""A `Benchmark` edge in the connection."""
type BenchmarksEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Benchmark` at the end of the edge."""
  node: Benchmark
}

"""Methods to use when ordering `Benchmark`."""
enum BenchmarksOrderBy {
  BENCHMARK_ASC
  BENCHMARK_DESC
  CREATED_AT_ASC
  CREATED_AT_DESC
  CREATED_BY_ASC
  CREATED_BY_DESC
  DELETED_AT_ASC
  DELETED_AT_DESC
  DELETED_BY_ASC
  DELETED_BY_DESC
  ELIGIBILITY_THRESHOLD_ASC
  ELIGIBILITY_THRESHOLD_DESC
  END_REPORTING_YEAR_ASC
  END_REPORTING_YEAR_DESC
  ID_ASC
  ID_DESC
  INCENTIVE_MULTIPLIER_ASC
  INCENTIVE_MULTIPLIER_DESC
  MAXIMUM_INCENTIVE_RATIO_ASC
  MAXIMUM_INCENTIVE_RATIO_DESC
  MINIMUM_INCENTIVE_RATIO_ASC
  MINIMUM_INCENTIVE_RATIO_DESC
  NATURAL
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  PRODUCT_ID_ASC
  PRODUCT_ID_DESC
  START_REPORTING_YEAR_ASC
  START_REPORTING_YEAR_DESC
  UPDATED_AT_ASC
  UPDATED_AT_DESC
  UPDATED_BY_ASC
  UPDATED_BY_DESC
}

"""
A floating point number that requires more precision than IEEE 754 binary 64
"""
scalar BigFloat

"""
A filter to be used against BigFloat fields. All fields are combined with a logical ‘and.’
"""
input BigFloatFilter {
  """
  Not equal to the specified value, treating null like an ordinary value.
  """
  distinctFrom: BigFloat

  """Equal to the specified value."""
  equalTo: BigFloat

  """Greater than the specified value."""
  greaterThan: BigFloat

  """Greater than or equal to the specified value."""
  greaterThanOrEqualTo: BigFloat

  """Included in the specified list."""
  in: [BigFloat!]

  """
  Is null (if `true` is specified) or is not null (if `false` is specified).
  """
  isNull: Boolean

  """Less than the specified value."""
  lessThan: BigFloat

  """Less than or equal to the specified value."""
  lessThanOrEqualTo: BigFloat

  """Equal to the specified value, treating null like an ordinary value."""
  notDistinctFrom: BigFloat

  """Not equal to the specified value."""
  notEqualTo: BigFloat

  """Not included in the specified list."""
  notIn: [BigFloat!]
}

"""
A signed eight-byte integer. The upper big integer values are greater than the
max value for a JavaScript number. Therefore all big integers will be output as
strings and not numbers.
"""
scalar BigInt

"""
A filter to be used against BigInt fields. All fields are combined with a logical ‘and.’
"""
input BigIntFilter {
  """
  Not equal to the specified value, treating null like an ordinary value.
  """
  distinctFrom: BigInt

  """Equal to the specified value."""
  equalTo: BigInt

  """Greater than the specified value."""
  greaterThan: BigInt

  """Greater than or equal to the specified value."""
  greaterThanOrEqualTo: BigInt

  """Included in the specified list."""
  in: [BigInt!]

  """
  Is null (if `true` is specified) or is not null (if `false` is specified).
  """
  isNull: Boolean

  """Less than the specified value."""
  lessThan: BigInt

  """Less than or equal to the specified value."""
  lessThanOrEqualTo: BigInt

  """Equal to the specified value, treating null like an ordinary value."""
  notDistinctFrom: BigInt

  """Not equal to the specified value."""
  notEqualTo: BigInt

  """Not included in the specified list."""
  notIn: [BigInt!]
}

"""
A filter to be used against Boolean fields. All fields are combined with a logical ‘and.’
"""
input BooleanFilter {
  """
  Not equal to the specified value, treating null like an ordinary value.
  """
  distinctFrom: Boolean

  """Equal to the specified value."""
  equalTo: Boolean

  """Greater than the specified value."""
  greaterThan: Boolean

  """Greater than or equal to the specified value."""
  greaterThanOrEqualTo: Boolean

  """Included in the specified list."""
  in: [Boolean!]

  """
  Is null (if `true` is specified) or is not null (if `false` is specified).
  """
  isNull: Boolean

  """Less than the specified value."""
  lessThan: Boolean

  """Less than or equal to the specified value."""
  lessThanOrEqualTo: Boolean

  """Equal to the specified value, treating null like an ordinary value."""
  notDistinctFrom: Boolean

  """Not equal to the specified value."""
  notEqualTo: Boolean

  """Not included in the specified list."""
  notIn: [Boolean!]
}

"""A connection to a list of `CarbonTaxDatum` values."""
type CarbonTaxDataConnection {
  """
  A list of edges which contains the `CarbonTaxDatum` and cursor to aid in pagination.
  """
  edges: [CarbonTaxDataEdge!]!

  """A list of `CarbonTaxDatum` objects."""
  nodes: [CarbonTaxDatum]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CarbonTaxDatum` you could get from the connection."""
  totalCount: Int!
}

"""A `CarbonTaxDatum` edge in the connection."""
type CarbonTaxDataEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CarbonTaxDatum` at the end of the edge."""
  node: CarbonTaxDatum
}

type CarbonTaxDatum {
  carbonTaxed: Boolean
  carbonTaxRate: BigFloat
  ctaRateUnits: String
  fuelCharge: BigFloat
  fuelMappingId: Int
  rateEndDate: Date
  rateStartDate: Date
  unitConversionFactor: Int
}

"""
A filter to be used against `CarbonTaxDatum` object types. All fields are combined with a logical ‘and.’
"""
input CarbonTaxDatumFilter {
  """Checks for all expressions in this list."""
  and: [CarbonTaxDatumFilter!]

  """Filter by the object’s `carbonTaxed` field."""
  carbonTaxed: BooleanFilter

  """Filter by the object’s `carbonTaxRate` field."""
  carbonTaxRate: BigFloatFilter

  """Filter by the object’s `ctaRateUnits` field."""
  ctaRateUnits: StringFilter

  """Filter by the object’s `fuelCharge` field."""
  fuelCharge: BigFloatFilter

  """Filter by the object’s `fuelMappingId` field."""
  fuelMappingId: IntFilter

  """Negates the expression."""
  not: CarbonTaxDatumFilter

  """Checks for any expressions in this list."""
  or: [CarbonTaxDatumFilter!]

  """Filter by the object’s `rateEndDate` field."""
  rateEndDate: DateFilter

  """Filter by the object’s `rateStartDate` field."""
  rateStartDate: DateFilter

  """Filter by the object’s `unitConversionFactor` field."""
  unitConversionFactor: IntFilter
}

"""Table containing the certification_url for an application"""
type CertificationUrl implements Node {
  """
  Reads a single `Application` that is related to this `CertificationUrl`.
  """
  applicationByApplicationId: Application

  """Foreign key to the application"""
  applicationId: Int!

  """
  Reads a single `ApplicationRevision` that is related to this `CertificationUrl`.
  """
  applicationRevisionByApplicationIdAndVersionNumber: ApplicationRevision

  """Reads and enables pagination through a set of `Application`."""
  applicationsBySearchCertificationUrlResultCertificationUrlIdAndApplicationId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ApplicationCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ApplicationFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Application`."""
    orderBy: [ApplicationsOrderBy!] = [PRIMARY_KEY_ASC]
  ): CertificationUrlApplicationsBySearchCertificationUrlResultCertificationUrlIdAndApplicationIdManyToManyConnection!

  """The time at which the certification request was sent"""
  certificationRequestSentAt: Datetime

  """The base64 representation of the certifier's signature"""
  certificationSignature: String

  """The timestamp of when the signature was added"""
  certifiedAt: Datetime

  """The user id of the certifier references ggircs_portal.ciip_user"""
  certifiedBy: Int

  """The email that the certification request was sent to"""
  certifierEmail: String

  """The URL sent to the certifier"""
  certifierUrl: String

  """Reads a single `CiipUser` that is related to this `CertificationUrl`."""
  ciipUserByCertifiedBy: CiipUser

  """Reads a single `CiipUser` that is related to this `CertificationUrl`."""
  ciipUserByCreatedBy: CiipUser

  """Reads a single `CiipUser` that is related to this `CertificationUrl`."""
  ciipUserByDeletedBy: CiipUser

  """Reads a single `CiipUser` that is related to this `CertificationUrl`."""
  ciipUserByUpdatedBy: CiipUser

  """Creation date of row"""
  createdAt: Datetime!

  """Creator of row"""
  createdBy: Int

  """Deletion date of row"""
  deletedAt: Datetime

  """The user who deleted the row"""
  deletedBy: Int

  """The expiry date for the row"""
  expiresAt: Datetime!

  """The hash of all form results at the time the signature was added"""
  formResultsMd5: String

  """
  Computed column for graphql to traverse to show if the current hash of form
  results matches the form_results_md5 in certification_url
  """
  hashMatches: Boolean

  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  id: ID!

  """
  Boolean for whether a recertification request has been sent to the reporter in the case of a data change
  """
  recertificationRequestSent: Boolean

  """Unique ID for the certification_url"""
  rowId: String!

  """
  User defined boolean indicates whether to send an email to the certifier
  """
  sendCertificationRequest: Boolean!

  """Last update date of row"""
  updatedAt: Datetime!

  """The user who last updated the row"""
  updatedBy: Int

  """
  The version number of the application (foreign key to application_revision along with application_id)
  """
  versionNumber: Int!
}

"""
A connection to a list of `Application` values, with data from `SearchCertificationUrlResult`.
"""
type CertificationUrlApplicationsBySearchCertificationUrlResultCertificationUrlIdAndApplicationIdManyToManyConnection {
  """
  A list of edges which contains the `Application`, info from the
  `SearchCertificationUrlResult`, and the cursor to aid in pagination.
  """
  edges: [CertificationUrlApplicationsBySearchCertificationUrlResultCertificationUrlIdAndApplicationIdManyToManyEdge!]!

  """A list of `Application` objects."""
  nodes: [Application]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Application` you could get from the connection."""
  totalCount: Int!
}

"""
A `Application` edge in the connection, with data from `SearchCertificationUrlResult`.
"""
type CertificationUrlApplicationsBySearchCertificationUrlResultCertificationUrlIdAndApplicationIdManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Application` at the end of the edge."""
  node: Application

  """
  Reads and enables pagination through a set of `SearchCertificationUrlResult`.
  """
  searchCertificationUrlResultsByApplicationId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: SearchCertificationUrlResultFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int
  ): SearchCertificationUrlResultsConnection!
}

"""
A condition to be used against `CertificationUrl` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input CertificationUrlCondition {
  """Checks for equality with the object’s `applicationId` field."""
  applicationId: Int

  """
  Checks for equality with the object’s `certificationRequestSentAt` field.
  """
  certificationRequestSentAt: Datetime

  """Checks for equality with the object’s `certificationSignature` field."""
  certificationSignature: String

  """Checks for equality with the object’s `certifiedAt` field."""
  certifiedAt: Datetime

  """Checks for equality with the object’s `certifiedBy` field."""
  certifiedBy: Int

  """Checks for equality with the object’s `certifierEmail` field."""
  certifierEmail: String

  """Checks for equality with the object’s `certifierUrl` field."""
  certifierUrl: String

  """Checks for equality with the object’s `createdAt` field."""
  createdAt: Datetime

  """Checks for equality with the object’s `createdBy` field."""
  createdBy: Int

  """Checks for equality with the object’s `deletedAt` field."""
  deletedAt: Datetime

  """Checks for equality with the object’s `deletedBy` field."""
  deletedBy: Int

  """Checks for equality with the object’s `expiresAt` field."""
  expiresAt: Datetime

  """Checks for equality with the object’s `formResultsMd5` field."""
  formResultsMd5: String

  """
  Checks for equality with the object’s `recertificationRequestSent` field.
  """
  recertificationRequestSent: Boolean

  """Checks for equality with the object’s `rowId` field."""
  rowId: String

  """
  Checks for equality with the object’s `sendCertificationRequest` field.
  """
  sendCertificationRequest: Boolean

  """Checks for equality with the object’s `updatedAt` field."""
  updatedAt: Datetime

  """Checks for equality with the object’s `updatedBy` field."""
  updatedBy: Int

  """Checks for equality with the object’s `versionNumber` field."""
  versionNumber: Int
}

"""
A filter to be used against `CertificationUrl` object types. All fields are combined with a logical ‘and.’
"""
input CertificationUrlFilter {
  """Checks for all expressions in this list."""
  and: [CertificationUrlFilter!]

  """Filter by the object’s `applicationByApplicationId` relation."""
  applicationByApplicationId: ApplicationFilter

  """Filter by the object’s `applicationId` field."""
  applicationId: IntFilter

  """
  Filter by the object’s `applicationRevisionByApplicationIdAndVersionNumber` relation.
  """
  applicationRevisionByApplicationIdAndVersionNumber: ApplicationRevisionFilter

  """Filter by the object’s `certificationRequestSentAt` field."""
  certificationRequestSentAt: DatetimeFilter

  """Filter by the object’s `certifiedAt` field."""
  certifiedAt: DatetimeFilter

  """Filter by the object’s `certifiedBy` field."""
  certifiedBy: IntFilter

  """Filter by the object’s `certifierEmail` field."""
  certifierEmail: StringFilter

  """Filter by the object’s `certifierUrl` field."""
  certifierUrl: StringFilter

  """Filter by the object’s `ciipUserByCertifiedBy` relation."""
  ciipUserByCertifiedBy: CiipUserFilter

  """A related `ciipUserByCertifiedBy` exists."""
  ciipUserByCertifiedByExists: Boolean

  """Filter by the object’s `ciipUserByCreatedBy` relation."""
  ciipUserByCreatedBy: CiipUserFilter

  """A related `ciipUserByCreatedBy` exists."""
  ciipUserByCreatedByExists: Boolean

  """Filter by the object’s `ciipUserByDeletedBy` relation."""
  ciipUserByDeletedBy: CiipUserFilter

  """A related `ciipUserByDeletedBy` exists."""
  ciipUserByDeletedByExists: Boolean

  """Filter by the object’s `ciipUserByUpdatedBy` relation."""
  ciipUserByUpdatedBy: CiipUserFilter

  """A related `ciipUserByUpdatedBy` exists."""
  ciipUserByUpdatedByExists: Boolean

  """Filter by the object’s `createdAt` field."""
  createdAt: DatetimeFilter

  """Filter by the object’s `createdBy` field."""
  createdBy: IntFilter

  """Filter by the object’s `deletedAt` field."""
  deletedAt: DatetimeFilter

  """Filter by the object’s `deletedBy` field."""
  deletedBy: IntFilter

  """Filter by the object’s `expiresAt` field."""
  expiresAt: DatetimeFilter

  """Filter by the object’s `hashMatches` field."""
  hashMatches: BooleanFilter

  """Negates the expression."""
  not: CertificationUrlFilter

  """Checks for any expressions in this list."""
  or: [CertificationUrlFilter!]

  """Filter by the object’s `recertificationRequestSent` field."""
  recertificationRequestSent: BooleanFilter

  """Filter by the object’s `rowId` field."""
  rowId: StringFilter

  """
  Filter by the object’s `searchCertificationUrlResultsByCertificationUrlId` relation.
  """
  searchCertificationUrlResultsByCertificationUrlId: CertificationUrlToManySearchCertificationUrlResultFilter

  """
  Some related `searchCertificationUrlResultsByCertificationUrlId` exist.
  """
  searchCertificationUrlResultsByCertificationUrlIdExist: Boolean

  """Filter by the object’s `sendCertificationRequest` field."""
  sendCertificationRequest: BooleanFilter

  """Filter by the object’s `updatedAt` field."""
  updatedAt: DatetimeFilter

  """Filter by the object’s `updatedBy` field."""
  updatedBy: IntFilter

  """Filter by the object’s `versionNumber` field."""
  versionNumber: IntFilter
}

"""An input for mutations affecting `CertificationUrl`"""
input CertificationUrlInput {
  """Foreign key to the application"""
  applicationId: Int!

  """The time at which the certification request was sent"""
  certificationRequestSentAt: Datetime

  """The base64 representation of the certifier's signature"""
  certificationSignature: String

  """The timestamp of when the signature was added"""
  certifiedAt: Datetime

  """The user id of the certifier references ggircs_portal.ciip_user"""
  certifiedBy: Int

  """The email that the certification request was sent to"""
  certifierEmail: String

  """The URL sent to the certifier"""
  certifierUrl: String

  """Creation date of row"""
  createdAt: Datetime

  """Creator of row"""
  createdBy: Int

  """Deletion date of row"""
  deletedAt: Datetime

  """The user who deleted the row"""
  deletedBy: Int

  """The expiry date for the row"""
  expiresAt: Datetime

  """The hash of all form results at the time the signature was added"""
  formResultsMd5: String

  """
  Boolean for whether a recertification request has been sent to the reporter in the case of a data change
  """
  recertificationRequestSent: Boolean

  """Unique ID for the certification_url"""
  rowId: String!

  """
  User defined boolean indicates whether to send an email to the certifier
  """
  sendCertificationRequest: Boolean

  """Last update date of row"""
  updatedAt: Datetime

  """The user who last updated the row"""
  updatedBy: Int

  """
  The version number of the application (foreign key to application_revision along with application_id)
  """
  versionNumber: Int!
}

"""
Represents an update to a `CertificationUrl`. Fields that are set will be updated.
"""
input CertificationUrlPatch {
  """Foreign key to the application"""
  applicationId: Int

  """The time at which the certification request was sent"""
  certificationRequestSentAt: Datetime

  """The base64 representation of the certifier's signature"""
  certificationSignature: String

  """The timestamp of when the signature was added"""
  certifiedAt: Datetime

  """The user id of the certifier references ggircs_portal.ciip_user"""
  certifiedBy: Int

  """The email that the certification request was sent to"""
  certifierEmail: String

  """The URL sent to the certifier"""
  certifierUrl: String

  """Creation date of row"""
  createdAt: Datetime

  """Creator of row"""
  createdBy: Int

  """Deletion date of row"""
  deletedAt: Datetime

  """The user who deleted the row"""
  deletedBy: Int

  """The expiry date for the row"""
  expiresAt: Datetime

  """The hash of all form results at the time the signature was added"""
  formResultsMd5: String

  """
  Boolean for whether a recertification request has been sent to the reporter in the case of a data change
  """
  recertificationRequestSent: Boolean

  """Unique ID for the certification_url"""
  rowId: String

  """
  User defined boolean indicates whether to send an email to the certifier
  """
  sendCertificationRequest: Boolean

  """Last update date of row"""
  updatedAt: Datetime

  """The user who last updated the row"""
  updatedBy: Int

  """
  The version number of the application (foreign key to application_revision along with application_id)
  """
  versionNumber: Int
}

"""A connection to a list of `CertificationUrl` values."""
type CertificationUrlsConnection {
  """
  A list of edges which contains the `CertificationUrl` and cursor to aid in pagination.
  """
  edges: [CertificationUrlsEdge!]!

  """A list of `CertificationUrl` objects."""
  nodes: [CertificationUrl]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `CertificationUrl` you could get from the connection.
  """
  totalCount: Int!
}

"""A `CertificationUrl` edge in the connection."""
type CertificationUrlsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CertificationUrl` at the end of the edge."""
  node: CertificationUrl
}

"""Methods to use when ordering `CertificationUrl`."""
enum CertificationUrlsOrderBy {
  APPLICATION_ID_ASC
  APPLICATION_ID_DESC
  CERTIFICATION_REQUEST_SENT_AT_ASC
  CERTIFICATION_REQUEST_SENT_AT_DESC
  CERTIFICATION_SIGNATURE_ASC
  CERTIFICATION_SIGNATURE_DESC
  CERTIFIED_AT_ASC
  CERTIFIED_AT_DESC
  CERTIFIED_BY_ASC
  CERTIFIED_BY_DESC
  CERTIFIER_EMAIL_ASC
  CERTIFIER_EMAIL_DESC
  CERTIFIER_URL_ASC
  CERTIFIER_URL_DESC
  CREATED_AT_ASC
  CREATED_AT_DESC
  CREATED_BY_ASC
  CREATED_BY_DESC
  DELETED_AT_ASC
  DELETED_AT_DESC
  DELETED_BY_ASC
  DELETED_BY_DESC
  EXPIRES_AT_ASC
  EXPIRES_AT_DESC
  FORM_RESULTS_MD5_ASC
  FORM_RESULTS_MD5_DESC
  ID_ASC
  ID_DESC
  NATURAL
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  RECERTIFICATION_REQUEST_SENT_ASC
  RECERTIFICATION_REQUEST_SENT_DESC
  SEND_CERTIFICATION_REQUEST_ASC
  SEND_CERTIFICATION_REQUEST_DESC
  UPDATED_AT_ASC
  UPDATED_AT_DESC
  UPDATED_BY_ASC
  UPDATED_BY_DESC
  VERSION_NUMBER_ASC
  VERSION_NUMBER_DESC
}

"""
A filter to be used against many `SearchCertificationUrlResult` object types. All fields are combined with a logical ‘and.’
"""
input CertificationUrlToManySearchCertificationUrlResultFilter {
  """
  Every related `SearchCertificationUrlResult` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: SearchCertificationUrlResultFilter

  """
  No related `SearchCertificationUrlResult` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: SearchCertificationUrlResultFilter

  """
  Some related `SearchCertificationUrlResult` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: SearchCertificationUrlResultFilter
}

enum CiipApplicationRevisionStatus {
  APPROVED
  DRAFT
  REJECTED
  REQUESTED_CHANGES
  SUBMITTED
}

"""
A filter to be used against CiipApplicationRevisionStatus fields. All fields are combined with a logical ‘and.’
"""
input CiipApplicationRevisionStatusFilter {
  """
  Not equal to the specified value, treating null like an ordinary value.
  """
  distinctFrom: CiipApplicationRevisionStatus

  """Equal to the specified value."""
  equalTo: CiipApplicationRevisionStatus

  """Greater than the specified value."""
  greaterThan: CiipApplicationRevisionStatus

  """Greater than or equal to the specified value."""
  greaterThanOrEqualTo: CiipApplicationRevisionStatus

  """Included in the specified list."""
  in: [CiipApplicationRevisionStatus!]

  """
  Is null (if `true` is specified) or is not null (if `false` is specified).
  """
  isNull: Boolean

  """Less than the specified value."""
  lessThan: CiipApplicationRevisionStatus

  """Less than or equal to the specified value."""
  lessThanOrEqualTo: CiipApplicationRevisionStatus

  """Equal to the specified value, treating null like an ordinary value."""
  notDistinctFrom: CiipApplicationRevisionStatus

  """Not equal to the specified value."""
  notEqualTo: CiipApplicationRevisionStatus

  """Not included in the specified list."""
  notIn: [CiipApplicationRevisionStatus!]
}

"""
A table defining which forms are in the application wizard and their order
"""
type CiipApplicationWizard implements Node {
  """The id of the form"""
  formId: Int!

  """
  Reads a single `FormJson` that is related to this `CiipApplicationWizard`.
  """
  formJsonByFormId: FormJson

  """The zero-indexed position of the form in the wizard"""
  formPosition: Int!

  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  id: ID!

  """
  Boolean value indicates whether the form is currently in use or has been archived
  """
  isActive: Boolean
}

"""
A condition to be used against `CiipApplicationWizard` object types. All fields
are tested for equality and combined with a logical ‘and.’
"""
input CiipApplicationWizardCondition {
  """Checks for equality with the object’s `formId` field."""
  formId: Int

  """Checks for equality with the object’s `formPosition` field."""
  formPosition: Int

  """Checks for equality with the object’s `isActive` field."""
  isActive: Boolean
}

"""
A filter to be used against `CiipApplicationWizard` object types. All fields are combined with a logical ‘and.’
"""
input CiipApplicationWizardFilter {
  """Checks for all expressions in this list."""
  and: [CiipApplicationWizardFilter!]

  """Filter by the object’s `formId` field."""
  formId: IntFilter

  """Filter by the object’s `formJsonByFormId` relation."""
  formJsonByFormId: FormJsonFilter

  """Filter by the object’s `formPosition` field."""
  formPosition: IntFilter

  """Filter by the object’s `isActive` field."""
  isActive: BooleanFilter

  """Negates the expression."""
  not: CiipApplicationWizardFilter

  """Checks for any expressions in this list."""
  or: [CiipApplicationWizardFilter!]
}

"""An input for mutations affecting `CiipApplicationWizard`"""
input CiipApplicationWizardInput {
  """The id of the form"""
  formId: Int!

  """The zero-indexed position of the form in the wizard"""
  formPosition: Int!

  """
  Boolean value indicates whether the form is currently in use or has been archived
  """
  isActive: Boolean
}

"""
Represents an update to a `CiipApplicationWizard`. Fields that are set will be updated.
"""
input CiipApplicationWizardPatch {
  """The id of the form"""
  formId: Int

  """The zero-indexed position of the form in the wizard"""
  formPosition: Int

  """
  Boolean value indicates whether the form is currently in use or has been archived
  """
  isActive: Boolean
}

"""A connection to a list of `CiipApplicationWizard` values."""
type CiipApplicationWizardsConnection {
  """
  A list of edges which contains the `CiipApplicationWizard` and cursor to aid in pagination.
  """
  edges: [CiipApplicationWizardsEdge!]!

  """A list of `CiipApplicationWizard` objects."""
  nodes: [CiipApplicationWizard]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `CiipApplicationWizard` you could get from the connection.
  """
  totalCount: Int!
}

"""A `CiipApplicationWizard` edge in the connection."""
type CiipApplicationWizardsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CiipApplicationWizard` at the end of the edge."""
  node: CiipApplicationWizard
}

"""Methods to use when ordering `CiipApplicationWizard`."""
enum CiipApplicationWizardsOrderBy {
  FORM_ID_ASC
  FORM_ID_DESC
  FORM_POSITION_ASC
  FORM_POSITION_DESC
  IS_ACTIVE_ASC
  IS_ACTIVE_DESC
  NATURAL
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""The view for calculating carbon tax based on ciip data"""
type CiipCarbonTaxCalculation {
  """The application id"""
  applicationId: Int

  """
  The amount of carbon tax payed eligible for an incentive (assuming a flat carbon tax rate for the reporting year)
  """
  carbonTaxEligibleForCiipFlat: BigFloat

  """The amount of carbon tax payed eligible for an incentive"""
  carbonTaxEligibleForCiipProRated: BigFloat

  """
  The carbon tax applicable to this fuel (assuming a flat carbon tax rate for the reporting year)
  """
  carbonTaxFlat: BigFloat

  """The carbon tax applicable to this fuel"""
  carbonTaxProRated: BigFloat

  """The carbon tax rate applicable at the end of the reporting period"""
  carbonTaxRateEnd: BigFloat

  """The carbon tax rate applicable at the start of the reporting period"""
  carbonTaxRateStart: BigFloat

  """The name of the fuel this carbon tax applied to"""
  fuelType: String

  """The quantity of fuel consumed in the reporting period"""
  quantity: BigFloat

  """The application's reporting year"""
  reportingYear: Int

  """The fuel quantity units"""
  units: String

  """The application revision number"""
  versionNumber: Int
}

"""
A condition to be used against `CiipCarbonTaxCalculation` object types. All
fields are tested for equality and combined with a logical ‘and.’
"""
input CiipCarbonTaxCalculationCondition {
  """Checks for equality with the object’s `applicationId` field."""
  applicationId: Int

  """
  Checks for equality with the object’s `carbonTaxEligibleForCiipFlat` field.
  """
  carbonTaxEligibleForCiipFlat: BigFloat

  """
  Checks for equality with the object’s `carbonTaxEligibleForCiipProRated` field.
  """
  carbonTaxEligibleForCiipProRated: BigFloat

  """Checks for equality with the object’s `carbonTaxFlat` field."""
  carbonTaxFlat: BigFloat

  """Checks for equality with the object’s `carbonTaxProRated` field."""
  carbonTaxProRated: BigFloat

  """Checks for equality with the object’s `carbonTaxRateEnd` field."""
  carbonTaxRateEnd: BigFloat

  """Checks for equality with the object’s `carbonTaxRateStart` field."""
  carbonTaxRateStart: BigFloat

  """Checks for equality with the object’s `fuelType` field."""
  fuelType: String

  """Checks for equality with the object’s `quantity` field."""
  quantity: BigFloat

  """Checks for equality with the object’s `reportingYear` field."""
  reportingYear: Int

  """Checks for equality with the object’s `units` field."""
  units: String

  """Checks for equality with the object’s `versionNumber` field."""
  versionNumber: Int
}

"""
A filter to be used against `CiipCarbonTaxCalculation` object types. All fields are combined with a logical ‘and.’
"""
input CiipCarbonTaxCalculationFilter {
  """Checks for all expressions in this list."""
  and: [CiipCarbonTaxCalculationFilter!]

  """Filter by the object’s `applicationId` field."""
  applicationId: IntFilter

  """Filter by the object’s `carbonTaxEligibleForCiipFlat` field."""
  carbonTaxEligibleForCiipFlat: BigFloatFilter

  """Filter by the object’s `carbonTaxEligibleForCiipProRated` field."""
  carbonTaxEligibleForCiipProRated: BigFloatFilter

  """Filter by the object’s `carbonTaxFlat` field."""
  carbonTaxFlat: BigFloatFilter

  """Filter by the object’s `carbonTaxProRated` field."""
  carbonTaxProRated: BigFloatFilter

  """Filter by the object’s `carbonTaxRateEnd` field."""
  carbonTaxRateEnd: BigFloatFilter

  """Filter by the object’s `carbonTaxRateStart` field."""
  carbonTaxRateStart: BigFloatFilter

  """Filter by the object’s `fuelType` field."""
  fuelType: StringFilter

  """Negates the expression."""
  not: CiipCarbonTaxCalculationFilter

  """Checks for any expressions in this list."""
  or: [CiipCarbonTaxCalculationFilter!]

  """Filter by the object’s `quantity` field."""
  quantity: BigFloatFilter

  """Filter by the object’s `reportingYear` field."""
  reportingYear: IntFilter

  """Filter by the object’s `units` field."""
  units: StringFilter

  """Filter by the object’s `versionNumber` field."""
  versionNumber: IntFilter
}

"""A connection to a list of `CiipCarbonTaxCalculation` values."""
type CiipCarbonTaxCalculationsConnection {
  """
  A list of edges which contains the `CiipCarbonTaxCalculation` and cursor to aid in pagination.
  """
  edges: [CiipCarbonTaxCalculationsEdge!]!

  """A list of `CiipCarbonTaxCalculation` objects."""
  nodes: [CiipCarbonTaxCalculation]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `CiipCarbonTaxCalculation` you could get from the connection.
  """
  totalCount: Int!
}

"""A `CiipCarbonTaxCalculation` edge in the connection."""
type CiipCarbonTaxCalculationsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CiipCarbonTaxCalculation` at the end of the edge."""
  node: CiipCarbonTaxCalculation
}

"""Methods to use when ordering `CiipCarbonTaxCalculation`."""
enum CiipCarbonTaxCalculationsOrderBy {
  APPLICATION_ID_ASC
  APPLICATION_ID_DESC
  CARBON_TAX_ELIGIBLE_FOR_CIIP_FLAT_ASC
  CARBON_TAX_ELIGIBLE_FOR_CIIP_FLAT_DESC
  CARBON_TAX_ELIGIBLE_FOR_CIIP_PRO_RATED_ASC
  CARBON_TAX_ELIGIBLE_FOR_CIIP_PRO_RATED_DESC
  CARBON_TAX_FLAT_ASC
  CARBON_TAX_FLAT_DESC
  CARBON_TAX_PRO_RATED_ASC
  CARBON_TAX_PRO_RATED_DESC
  CARBON_TAX_RATE_END_ASC
  CARBON_TAX_RATE_END_DESC
  CARBON_TAX_RATE_START_ASC
  CARBON_TAX_RATE_START_DESC
  FUEL_TYPE_ASC
  FUEL_TYPE_DESC
  NATURAL
  QUANTITY_ASC
  QUANTITY_DESC
  REPORTING_YEAR_ASC
  REPORTING_YEAR_DESC
  UNITS_ASC
  UNITS_DESC
  VERSION_NUMBER_ASC
  VERSION_NUMBER_DESC
}

enum CiipFormResultStatus {
  APPROVED
  CHANGES_REQUESTED
  IN_REVIEW
  NEEDS_ATTENTION
}

"""
A filter to be used against CiipFormResultStatus fields. All fields are combined with a logical ‘and.’
"""
input CiipFormResultStatusFilter {
  """
  Not equal to the specified value, treating null like an ordinary value.
  """
  distinctFrom: CiipFormResultStatus

  """Equal to the specified value."""
  equalTo: CiipFormResultStatus

  """Greater than the specified value."""
  greaterThan: CiipFormResultStatus

  """Greater than or equal to the specified value."""
  greaterThanOrEqualTo: CiipFormResultStatus

  """Included in the specified list."""
  in: [CiipFormResultStatus!]

  """
  Is null (if `true` is specified) or is not null (if `false` is specified).
  """
  isNull: Boolean

  """Less than the specified value."""
  lessThan: CiipFormResultStatus

  """Less than or equal to the specified value."""
  lessThanOrEqualTo: CiipFormResultStatus

  """Equal to the specified value, treating null like an ordinary value."""
  notDistinctFrom: CiipFormResultStatus

  """Not equal to the specified value."""
  notEqualTo: CiipFormResultStatus

  """Not included in the specified list."""
  notIn: [CiipFormResultStatus!]
}

type CiipIncentiveByProduct {
  benchmark: BigFloat
  eligibilityThreshold: BigFloat
  emissionIntensity: BigFloat
  incentiveMultiplier: BigFloat
  incentiveProduct: BigFloat
  incentiveProductMax: BigFloat
  incentiveRatio: BigFloat
  incrementalCarbonTax: BigFloat
  paymentAllocationFactor: BigFloat
  productAmount: BigFloat
  productEmissions: BigFloat
  productId: Int
  productName: String
  rowId: Int
}

"""
A filter to be used against `CiipIncentiveByProduct` object types. All fields are combined with a logical ‘and.’
"""
input CiipIncentiveByProductFilter {
  """Checks for all expressions in this list."""
  and: [CiipIncentiveByProductFilter!]

  """Filter by the object’s `benchmark` field."""
  benchmark: BigFloatFilter

  """Filter by the object’s `eligibilityThreshold` field."""
  eligibilityThreshold: BigFloatFilter

  """Filter by the object’s `emissionIntensity` field."""
  emissionIntensity: BigFloatFilter

  """Filter by the object’s `incentiveMultiplier` field."""
  incentiveMultiplier: BigFloatFilter

  """Filter by the object’s `incentiveProduct` field."""
  incentiveProduct: BigFloatFilter

  """Filter by the object’s `incentiveProductMax` field."""
  incentiveProductMax: BigFloatFilter

  """Filter by the object’s `incentiveRatio` field."""
  incentiveRatio: BigFloatFilter

  """Filter by the object’s `incrementalCarbonTax` field."""
  incrementalCarbonTax: BigFloatFilter

  """Negates the expression."""
  not: CiipIncentiveByProductFilter

  """Checks for any expressions in this list."""
  or: [CiipIncentiveByProductFilter!]

  """Filter by the object’s `paymentAllocationFactor` field."""
  paymentAllocationFactor: BigFloatFilter

  """Filter by the object’s `productAmount` field."""
  productAmount: BigFloatFilter

  """Filter by the object’s `productEmissions` field."""
  productEmissions: BigFloatFilter

  """Filter by the object’s `productId` field."""
  productId: IntFilter

  """Filter by the object’s `productName` field."""
  productName: StringFilter

  """Filter by the object’s `rowId` field."""
  rowId: IntFilter
}

"""A connection to a list of `CiipIncentiveByProduct` values."""
type CiipIncentiveByProductsConnection {
  """
  A list of edges which contains the `CiipIncentiveByProduct` and cursor to aid in pagination.
  """
  edges: [CiipIncentiveByProductsEdge!]!

  """A list of `CiipIncentiveByProduct` objects."""
  nodes: [CiipIncentiveByProduct]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `CiipIncentiveByProduct` you could get from the connection.
  """
  totalCount: Int!
}

"""A `CiipIncentiveByProduct` edge in the connection."""
type CiipIncentiveByProductsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CiipIncentiveByProduct` at the end of the edge."""
  node: CiipIncentiveByProduct
}

enum CiipProductState {
  ARCHIVED
  DRAFT
  PUBLISHED
}

"""
A filter to be used against CiipProductState fields. All fields are combined with a logical ‘and.’
"""
input CiipProductStateFilter {
  """
  Not equal to the specified value, treating null like an ordinary value.
  """
  distinctFrom: CiipProductState

  """Equal to the specified value."""
  equalTo: CiipProductState

  """Greater than the specified value."""
  greaterThan: CiipProductState

  """Greater than or equal to the specified value."""
  greaterThanOrEqualTo: CiipProductState

  """Included in the specified list."""
  in: [CiipProductState!]

  """
  Is null (if `true` is specified) or is not null (if `false` is specified).
  """
  isNull: Boolean

  """Less than the specified value."""
  lessThan: CiipProductState

  """Less than or equal to the specified value."""
  lessThanOrEqualTo: CiipProductState

  """Equal to the specified value, treating null like an ordinary value."""
  notDistinctFrom: CiipProductState

  """Not equal to the specified value."""
  notEqualTo: CiipProductState

  """Not included in the specified list."""
  notIn: [CiipProductState!]
}

"""Table containing the benchmark and eligibility threshold for a product"""
type CiipUser implements Node {
  """Reads and enables pagination through a set of `ApplicationRevision`."""
  applicationRevisionsByCreatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ApplicationRevisionCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ApplicationRevisionFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `ApplicationRevision`."""
    orderBy: [ApplicationRevisionsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ApplicationRevisionsConnection!

  """Reads and enables pagination through a set of `ApplicationRevision`."""
  applicationRevisionsByDeletedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ApplicationRevisionCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ApplicationRevisionFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `ApplicationRevision`."""
    orderBy: [ApplicationRevisionsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ApplicationRevisionsConnection!

  """Reads and enables pagination through a set of `ApplicationRevision`."""
  applicationRevisionsByUpdatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ApplicationRevisionCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ApplicationRevisionFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `ApplicationRevision`."""
    orderBy: [ApplicationRevisionsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ApplicationRevisionsConnection!

  """
  Reads and enables pagination through a set of `ApplicationRevisionStatus`.
  """
  applicationRevisionStatusesByCreatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ApplicationRevisionStatusCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ApplicationRevisionStatusFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `ApplicationRevisionStatus`."""
    orderBy: [ApplicationRevisionStatusesOrderBy!] = [PRIMARY_KEY_ASC]
  ): ApplicationRevisionStatusesConnection!

  """
  Reads and enables pagination through a set of `ApplicationRevisionStatus`.
  """
  applicationRevisionStatusesByDeletedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ApplicationRevisionStatusCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ApplicationRevisionStatusFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `ApplicationRevisionStatus`."""
    orderBy: [ApplicationRevisionStatusesOrderBy!] = [PRIMARY_KEY_ASC]
  ): ApplicationRevisionStatusesConnection!

  """
  Reads and enables pagination through a set of `ApplicationRevisionStatus`.
  """
  applicationRevisionStatusesByUpdatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ApplicationRevisionStatusCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ApplicationRevisionStatusFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `ApplicationRevisionStatus`."""
    orderBy: [ApplicationRevisionStatusesOrderBy!] = [PRIMARY_KEY_ASC]
  ): ApplicationRevisionStatusesConnection!

  """Reads and enables pagination through a set of `Application`."""
  applicationsByApplicationRevisionCreatedByAndApplicationId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ApplicationCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ApplicationFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Application`."""
    orderBy: [ApplicationsOrderBy!] = [PRIMARY_KEY_ASC]
  ): CiipUserApplicationsByApplicationRevisionCreatedByAndApplicationIdManyToManyConnection!

  """Reads and enables pagination through a set of `Application`."""
  applicationsByApplicationRevisionDeletedByAndApplicationId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ApplicationCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ApplicationFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Application`."""
    orderBy: [ApplicationsOrderBy!] = [PRIMARY_KEY_ASC]
  ): CiipUserApplicationsByApplicationRevisionDeletedByAndApplicationIdManyToManyConnection!

  """Reads and enables pagination through a set of `Application`."""
  applicationsByApplicationRevisionUpdatedByAndApplicationId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ApplicationCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ApplicationFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Application`."""
    orderBy: [ApplicationsOrderBy!] = [PRIMARY_KEY_ASC]
  ): CiipUserApplicationsByApplicationRevisionUpdatedByAndApplicationIdManyToManyConnection!

  """Reads and enables pagination through a set of `Application`."""
  applicationsByCertificationUrlCertifiedByAndApplicationId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ApplicationCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ApplicationFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Application`."""
    orderBy: [ApplicationsOrderBy!] = [PRIMARY_KEY_ASC]
  ): CiipUserApplicationsByCertificationUrlCertifiedByAndApplicationIdManyToManyConnection!

  """Reads and enables pagination through a set of `Application`."""
  applicationsByCertificationUrlCreatedByAndApplicationId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ApplicationCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ApplicationFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Application`."""
    orderBy: [ApplicationsOrderBy!] = [PRIMARY_KEY_ASC]
  ): CiipUserApplicationsByCertificationUrlCreatedByAndApplicationIdManyToManyConnection!

  """Reads and enables pagination through a set of `Application`."""
  applicationsByCertificationUrlDeletedByAndApplicationId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ApplicationCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ApplicationFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Application`."""
    orderBy: [ApplicationsOrderBy!] = [PRIMARY_KEY_ASC]
  ): CiipUserApplicationsByCertificationUrlDeletedByAndApplicationIdManyToManyConnection!

  """Reads and enables pagination through a set of `Application`."""
  applicationsByCertificationUrlUpdatedByAndApplicationId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ApplicationCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ApplicationFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Application`."""
    orderBy: [ApplicationsOrderBy!] = [PRIMARY_KEY_ASC]
  ): CiipUserApplicationsByCertificationUrlUpdatedByAndApplicationIdManyToManyConnection!

  """Reads and enables pagination through a set of `Application`."""
  applicationsByFormResultCreatedByAndApplicationId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ApplicationCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ApplicationFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Application`."""
    orderBy: [ApplicationsOrderBy!] = [PRIMARY_KEY_ASC]
  ): CiipUserApplicationsByFormResultCreatedByAndApplicationIdManyToManyConnection!

  """Reads and enables pagination through a set of `Application`."""
  applicationsByFormResultDeletedByAndApplicationId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ApplicationCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ApplicationFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Application`."""
    orderBy: [ApplicationsOrderBy!] = [PRIMARY_KEY_ASC]
  ): CiipUserApplicationsByFormResultDeletedByAndApplicationIdManyToManyConnection!

  """Reads and enables pagination through a set of `Application`."""
  applicationsByFormResultStatusCreatedByAndApplicationId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ApplicationCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ApplicationFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Application`."""
    orderBy: [ApplicationsOrderBy!] = [PRIMARY_KEY_ASC]
  ): CiipUserApplicationsByFormResultStatusCreatedByAndApplicationIdManyToManyConnection!

  """Reads and enables pagination through a set of `Application`."""
  applicationsByFormResultStatusDeletedByAndApplicationId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ApplicationCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ApplicationFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Application`."""
    orderBy: [ApplicationsOrderBy!] = [PRIMARY_KEY_ASC]
  ): CiipUserApplicationsByFormResultStatusDeletedByAndApplicationIdManyToManyConnection!

  """Reads and enables pagination through a set of `Application`."""
  applicationsByFormResultStatusUpdatedByAndApplicationId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ApplicationCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ApplicationFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Application`."""
    orderBy: [ApplicationsOrderBy!] = [PRIMARY_KEY_ASC]
  ): CiipUserApplicationsByFormResultStatusUpdatedByAndApplicationIdManyToManyConnection!

  """Reads and enables pagination through a set of `Application`."""
  applicationsByFormResultUpdatedByAndApplicationId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ApplicationCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ApplicationFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Application`."""
    orderBy: [ApplicationsOrderBy!] = [PRIMARY_KEY_ASC]
  ): CiipUserApplicationsByFormResultUpdatedByAndApplicationIdManyToManyConnection!

  """Reads and enables pagination through a set of `Application`."""
  applicationsByReviewCommentCreatedByAndApplicationId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ApplicationCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ApplicationFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Application`."""
    orderBy: [ApplicationsOrderBy!] = [PRIMARY_KEY_ASC]
  ): CiipUserApplicationsByReviewCommentCreatedByAndApplicationIdManyToManyConnection!

  """Reads and enables pagination through a set of `Application`."""
  applicationsByReviewCommentDeletedByAndApplicationId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ApplicationCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ApplicationFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Application`."""
    orderBy: [ApplicationsOrderBy!] = [PRIMARY_KEY_ASC]
  ): CiipUserApplicationsByReviewCommentDeletedByAndApplicationIdManyToManyConnection!

  """Reads and enables pagination through a set of `Application`."""
  applicationsByReviewCommentUpdatedByAndApplicationId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ApplicationCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ApplicationFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Application`."""
    orderBy: [ApplicationsOrderBy!] = [PRIMARY_KEY_ASC]
  ): CiipUserApplicationsByReviewCommentUpdatedByAndApplicationIdManyToManyConnection!

  """Reads and enables pagination through a set of `Benchmark`."""
  benchmarksByCreatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: BenchmarkCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: BenchmarkFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Benchmark`."""
    orderBy: [BenchmarksOrderBy!] = [PRIMARY_KEY_ASC]
  ): BenchmarksConnection!

  """Reads and enables pagination through a set of `Benchmark`."""
  benchmarksByDeletedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: BenchmarkCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: BenchmarkFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Benchmark`."""
    orderBy: [BenchmarksOrderBy!] = [PRIMARY_KEY_ASC]
  ): BenchmarksConnection!

  """Reads and enables pagination through a set of `Benchmark`."""
  benchmarksByUpdatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: BenchmarkCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: BenchmarkFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Benchmark`."""
    orderBy: [BenchmarksOrderBy!] = [PRIMARY_KEY_ASC]
  ): BenchmarksConnection!

  """Reads and enables pagination through a set of `CertificationUrl`."""
  certificationUrlsByCertifiedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CertificationUrlCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CertificationUrlFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CertificationUrl`."""
    orderBy: [CertificationUrlsOrderBy!] = [PRIMARY_KEY_ASC]
  ): CertificationUrlsConnection!

  """Reads and enables pagination through a set of `CertificationUrl`."""
  certificationUrlsByCreatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CertificationUrlCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CertificationUrlFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CertificationUrl`."""
    orderBy: [CertificationUrlsOrderBy!] = [PRIMARY_KEY_ASC]
  ): CertificationUrlsConnection!

  """Reads and enables pagination through a set of `CertificationUrl`."""
  certificationUrlsByDeletedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CertificationUrlCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CertificationUrlFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CertificationUrl`."""
    orderBy: [CertificationUrlsOrderBy!] = [PRIMARY_KEY_ASC]
  ): CertificationUrlsConnection!

  """Reads and enables pagination through a set of `CertificationUrl`."""
  certificationUrlsByUpdatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CertificationUrlCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CertificationUrlFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CertificationUrl`."""
    orderBy: [CertificationUrlsOrderBy!] = [PRIMARY_KEY_ASC]
  ): CertificationUrlsConnection!

  """Reads a single `CiipUser` that is related to this `CiipUser`."""
  ciipUserByCreatedBy: CiipUser

  """Reads a single `CiipUser` that is related to this `CiipUser`."""
  ciipUserByDeletedBy: CiipUser

  """Reads a single `CiipUser` that is related to this `CiipUser`."""
  ciipUserByUpdatedBy: CiipUser

  """Reads and enables pagination through a set of `CiipUserOrganisation`."""
  ciipUserOrganisationsByUserId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CiipUserOrganisationCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CiipUserOrganisationFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CiipUserOrganisation`."""
    orderBy: [CiipUserOrganisationsOrderBy!] = [PRIMARY_KEY_ASC]
  ): CiipUserOrganisationsConnection!

  """Reads and enables pagination through a set of `CiipUser`."""
  ciipUsersByApplicationRevisionCreatedByAndDeletedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CiipUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CiipUserFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CiipUser`."""
    orderBy: [CiipUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): CiipUserCiipUsersByApplicationRevisionCreatedByAndDeletedByManyToManyConnection!

  """Reads and enables pagination through a set of `CiipUser`."""
  ciipUsersByApplicationRevisionCreatedByAndUpdatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CiipUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CiipUserFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CiipUser`."""
    orderBy: [CiipUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): CiipUserCiipUsersByApplicationRevisionCreatedByAndUpdatedByManyToManyConnection!

  """Reads and enables pagination through a set of `CiipUser`."""
  ciipUsersByApplicationRevisionDeletedByAndCreatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CiipUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CiipUserFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CiipUser`."""
    orderBy: [CiipUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): CiipUserCiipUsersByApplicationRevisionDeletedByAndCreatedByManyToManyConnection!

  """Reads and enables pagination through a set of `CiipUser`."""
  ciipUsersByApplicationRevisionDeletedByAndUpdatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CiipUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CiipUserFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CiipUser`."""
    orderBy: [CiipUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): CiipUserCiipUsersByApplicationRevisionDeletedByAndUpdatedByManyToManyConnection!

  """Reads and enables pagination through a set of `CiipUser`."""
  ciipUsersByApplicationRevisionStatusCreatedByAndDeletedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CiipUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CiipUserFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CiipUser`."""
    orderBy: [CiipUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): CiipUserCiipUsersByApplicationRevisionStatusCreatedByAndDeletedByManyToManyConnection!

  """Reads and enables pagination through a set of `CiipUser`."""
  ciipUsersByApplicationRevisionStatusCreatedByAndUpdatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CiipUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CiipUserFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CiipUser`."""
    orderBy: [CiipUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): CiipUserCiipUsersByApplicationRevisionStatusCreatedByAndUpdatedByManyToManyConnection!

  """Reads and enables pagination through a set of `CiipUser`."""
  ciipUsersByApplicationRevisionStatusDeletedByAndCreatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CiipUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CiipUserFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CiipUser`."""
    orderBy: [CiipUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): CiipUserCiipUsersByApplicationRevisionStatusDeletedByAndCreatedByManyToManyConnection!

  """Reads and enables pagination through a set of `CiipUser`."""
  ciipUsersByApplicationRevisionStatusDeletedByAndUpdatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CiipUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CiipUserFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CiipUser`."""
    orderBy: [CiipUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): CiipUserCiipUsersByApplicationRevisionStatusDeletedByAndUpdatedByManyToManyConnection!

  """Reads and enables pagination through a set of `CiipUser`."""
  ciipUsersByApplicationRevisionStatusUpdatedByAndCreatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CiipUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CiipUserFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CiipUser`."""
    orderBy: [CiipUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): CiipUserCiipUsersByApplicationRevisionStatusUpdatedByAndCreatedByManyToManyConnection!

  """Reads and enables pagination through a set of `CiipUser`."""
  ciipUsersByApplicationRevisionStatusUpdatedByAndDeletedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CiipUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CiipUserFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CiipUser`."""
    orderBy: [CiipUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): CiipUserCiipUsersByApplicationRevisionStatusUpdatedByAndDeletedByManyToManyConnection!

  """Reads and enables pagination through a set of `CiipUser`."""
  ciipUsersByApplicationRevisionUpdatedByAndCreatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CiipUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CiipUserFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CiipUser`."""
    orderBy: [CiipUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): CiipUserCiipUsersByApplicationRevisionUpdatedByAndCreatedByManyToManyConnection!

  """Reads and enables pagination through a set of `CiipUser`."""
  ciipUsersByApplicationRevisionUpdatedByAndDeletedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CiipUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CiipUserFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CiipUser`."""
    orderBy: [CiipUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): CiipUserCiipUsersByApplicationRevisionUpdatedByAndDeletedByManyToManyConnection!

  """Reads and enables pagination through a set of `CiipUser`."""
  ciipUsersByBenchmarkCreatedByAndDeletedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CiipUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CiipUserFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CiipUser`."""
    orderBy: [CiipUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): CiipUserCiipUsersByBenchmarkCreatedByAndDeletedByManyToManyConnection!

  """Reads and enables pagination through a set of `CiipUser`."""
  ciipUsersByBenchmarkCreatedByAndUpdatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CiipUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CiipUserFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CiipUser`."""
    orderBy: [CiipUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): CiipUserCiipUsersByBenchmarkCreatedByAndUpdatedByManyToManyConnection!

  """Reads and enables pagination through a set of `CiipUser`."""
  ciipUsersByBenchmarkDeletedByAndCreatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CiipUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CiipUserFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CiipUser`."""
    orderBy: [CiipUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): CiipUserCiipUsersByBenchmarkDeletedByAndCreatedByManyToManyConnection!

  """Reads and enables pagination through a set of `CiipUser`."""
  ciipUsersByBenchmarkDeletedByAndUpdatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CiipUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CiipUserFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CiipUser`."""
    orderBy: [CiipUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): CiipUserCiipUsersByBenchmarkDeletedByAndUpdatedByManyToManyConnection!

  """Reads and enables pagination through a set of `CiipUser`."""
  ciipUsersByBenchmarkUpdatedByAndCreatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CiipUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CiipUserFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CiipUser`."""
    orderBy: [CiipUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): CiipUserCiipUsersByBenchmarkUpdatedByAndCreatedByManyToManyConnection!

  """Reads and enables pagination through a set of `CiipUser`."""
  ciipUsersByBenchmarkUpdatedByAndDeletedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CiipUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CiipUserFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CiipUser`."""
    orderBy: [CiipUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): CiipUserCiipUsersByBenchmarkUpdatedByAndDeletedByManyToManyConnection!

  """Reads and enables pagination through a set of `CiipUser`."""
  ciipUsersByCertificationUrlCertifiedByAndCreatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CiipUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CiipUserFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CiipUser`."""
    orderBy: [CiipUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): CiipUserCiipUsersByCertificationUrlCertifiedByAndCreatedByManyToManyConnection!

  """Reads and enables pagination through a set of `CiipUser`."""
  ciipUsersByCertificationUrlCertifiedByAndDeletedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CiipUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CiipUserFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CiipUser`."""
    orderBy: [CiipUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): CiipUserCiipUsersByCertificationUrlCertifiedByAndDeletedByManyToManyConnection!

  """Reads and enables pagination through a set of `CiipUser`."""
  ciipUsersByCertificationUrlCertifiedByAndUpdatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CiipUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CiipUserFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CiipUser`."""
    orderBy: [CiipUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): CiipUserCiipUsersByCertificationUrlCertifiedByAndUpdatedByManyToManyConnection!

  """Reads and enables pagination through a set of `CiipUser`."""
  ciipUsersByCertificationUrlCreatedByAndCertifiedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CiipUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CiipUserFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CiipUser`."""
    orderBy: [CiipUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): CiipUserCiipUsersByCertificationUrlCreatedByAndCertifiedByManyToManyConnection!

  """Reads and enables pagination through a set of `CiipUser`."""
  ciipUsersByCertificationUrlCreatedByAndDeletedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CiipUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CiipUserFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CiipUser`."""
    orderBy: [CiipUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): CiipUserCiipUsersByCertificationUrlCreatedByAndDeletedByManyToManyConnection!

  """Reads and enables pagination through a set of `CiipUser`."""
  ciipUsersByCertificationUrlCreatedByAndUpdatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CiipUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CiipUserFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CiipUser`."""
    orderBy: [CiipUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): CiipUserCiipUsersByCertificationUrlCreatedByAndUpdatedByManyToManyConnection!

  """Reads and enables pagination through a set of `CiipUser`."""
  ciipUsersByCertificationUrlDeletedByAndCertifiedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CiipUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CiipUserFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CiipUser`."""
    orderBy: [CiipUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): CiipUserCiipUsersByCertificationUrlDeletedByAndCertifiedByManyToManyConnection!

  """Reads and enables pagination through a set of `CiipUser`."""
  ciipUsersByCertificationUrlDeletedByAndCreatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CiipUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CiipUserFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CiipUser`."""
    orderBy: [CiipUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): CiipUserCiipUsersByCertificationUrlDeletedByAndCreatedByManyToManyConnection!

  """Reads and enables pagination through a set of `CiipUser`."""
  ciipUsersByCertificationUrlDeletedByAndUpdatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CiipUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CiipUserFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CiipUser`."""
    orderBy: [CiipUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): CiipUserCiipUsersByCertificationUrlDeletedByAndUpdatedByManyToManyConnection!

  """Reads and enables pagination through a set of `CiipUser`."""
  ciipUsersByCertificationUrlUpdatedByAndCertifiedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CiipUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CiipUserFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CiipUser`."""
    orderBy: [CiipUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): CiipUserCiipUsersByCertificationUrlUpdatedByAndCertifiedByManyToManyConnection!

  """Reads and enables pagination through a set of `CiipUser`."""
  ciipUsersByCertificationUrlUpdatedByAndCreatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CiipUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CiipUserFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CiipUser`."""
    orderBy: [CiipUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): CiipUserCiipUsersByCertificationUrlUpdatedByAndCreatedByManyToManyConnection!

  """Reads and enables pagination through a set of `CiipUser`."""
  ciipUsersByCertificationUrlUpdatedByAndDeletedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CiipUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CiipUserFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CiipUser`."""
    orderBy: [CiipUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): CiipUserCiipUsersByCertificationUrlUpdatedByAndDeletedByManyToManyConnection!

  """Reads and enables pagination through a set of `CiipUser`."""
  ciipUsersByCiipUserCreatedByAndDeletedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CiipUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CiipUserFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CiipUser`."""
    orderBy: [CiipUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): CiipUserCiipUsersByCiipUserCreatedByAndDeletedByManyToManyConnection!

  """Reads and enables pagination through a set of `CiipUser`."""
  ciipUsersByCiipUserCreatedByAndUpdatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CiipUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CiipUserFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CiipUser`."""
    orderBy: [CiipUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): CiipUserCiipUsersByCiipUserCreatedByAndUpdatedByManyToManyConnection!

  """Reads and enables pagination through a set of `CiipUser`."""
  ciipUsersByCiipUserDeletedByAndCreatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CiipUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CiipUserFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CiipUser`."""
    orderBy: [CiipUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): CiipUserCiipUsersByCiipUserDeletedByAndCreatedByManyToManyConnection!

  """Reads and enables pagination through a set of `CiipUser`."""
  ciipUsersByCiipUserDeletedByAndUpdatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CiipUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CiipUserFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CiipUser`."""
    orderBy: [CiipUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): CiipUserCiipUsersByCiipUserDeletedByAndUpdatedByManyToManyConnection!

  """Reads and enables pagination through a set of `CiipUser`."""
  ciipUsersByCiipUserUpdatedByAndCreatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CiipUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CiipUserFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CiipUser`."""
    orderBy: [CiipUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): CiipUserCiipUsersByCiipUserUpdatedByAndCreatedByManyToManyConnection!

  """Reads and enables pagination through a set of `CiipUser`."""
  ciipUsersByCiipUserUpdatedByAndDeletedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CiipUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CiipUserFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CiipUser`."""
    orderBy: [CiipUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): CiipUserCiipUsersByCiipUserUpdatedByAndDeletedByManyToManyConnection!

  """Reads and enables pagination through a set of `CiipUser`."""
  ciipUsersByCreatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CiipUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CiipUserFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CiipUser`."""
    orderBy: [CiipUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): CiipUsersConnection!

  """Reads and enables pagination through a set of `CiipUser`."""
  ciipUsersByDeletedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CiipUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CiipUserFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CiipUser`."""
    orderBy: [CiipUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): CiipUsersConnection!

  """Reads and enables pagination through a set of `CiipUser`."""
  ciipUsersByEmissionCategoryCreatedByAndDeletedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CiipUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CiipUserFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CiipUser`."""
    orderBy: [CiipUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): CiipUserCiipUsersByEmissionCategoryCreatedByAndDeletedByManyToManyConnection!

  """Reads and enables pagination through a set of `CiipUser`."""
  ciipUsersByEmissionCategoryCreatedByAndUpdatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CiipUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CiipUserFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CiipUser`."""
    orderBy: [CiipUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): CiipUserCiipUsersByEmissionCategoryCreatedByAndUpdatedByManyToManyConnection!

  """Reads and enables pagination through a set of `CiipUser`."""
  ciipUsersByEmissionCategoryDeletedByAndCreatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CiipUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CiipUserFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CiipUser`."""
    orderBy: [CiipUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): CiipUserCiipUsersByEmissionCategoryDeletedByAndCreatedByManyToManyConnection!

  """Reads and enables pagination through a set of `CiipUser`."""
  ciipUsersByEmissionCategoryDeletedByAndUpdatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CiipUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CiipUserFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CiipUser`."""
    orderBy: [CiipUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): CiipUserCiipUsersByEmissionCategoryDeletedByAndUpdatedByManyToManyConnection!

  """Reads and enables pagination through a set of `CiipUser`."""
  ciipUsersByEmissionCategoryGasCreatedByAndDeletedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CiipUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CiipUserFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CiipUser`."""
    orderBy: [CiipUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): CiipUserCiipUsersByEmissionCategoryGasCreatedByAndDeletedByManyToManyConnection!

  """Reads and enables pagination through a set of `CiipUser`."""
  ciipUsersByEmissionCategoryGasCreatedByAndUpdatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CiipUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CiipUserFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CiipUser`."""
    orderBy: [CiipUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): CiipUserCiipUsersByEmissionCategoryGasCreatedByAndUpdatedByManyToManyConnection!

  """Reads and enables pagination through a set of `CiipUser`."""
  ciipUsersByEmissionCategoryGasDeletedByAndCreatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CiipUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CiipUserFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CiipUser`."""
    orderBy: [CiipUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): CiipUserCiipUsersByEmissionCategoryGasDeletedByAndCreatedByManyToManyConnection!

  """Reads and enables pagination through a set of `CiipUser`."""
  ciipUsersByEmissionCategoryGasDeletedByAndUpdatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CiipUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CiipUserFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CiipUser`."""
    orderBy: [CiipUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): CiipUserCiipUsersByEmissionCategoryGasDeletedByAndUpdatedByManyToManyConnection!

  """Reads and enables pagination through a set of `CiipUser`."""
  ciipUsersByEmissionCategoryGasUpdatedByAndCreatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CiipUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CiipUserFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CiipUser`."""
    orderBy: [CiipUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): CiipUserCiipUsersByEmissionCategoryGasUpdatedByAndCreatedByManyToManyConnection!

  """Reads and enables pagination through a set of `CiipUser`."""
  ciipUsersByEmissionCategoryGasUpdatedByAndDeletedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CiipUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CiipUserFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CiipUser`."""
    orderBy: [CiipUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): CiipUserCiipUsersByEmissionCategoryGasUpdatedByAndDeletedByManyToManyConnection!

  """Reads and enables pagination through a set of `CiipUser`."""
  ciipUsersByEmissionCategoryUpdatedByAndCreatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CiipUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CiipUserFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CiipUser`."""
    orderBy: [CiipUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): CiipUserCiipUsersByEmissionCategoryUpdatedByAndCreatedByManyToManyConnection!

  """Reads and enables pagination through a set of `CiipUser`."""
  ciipUsersByEmissionCategoryUpdatedByAndDeletedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CiipUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CiipUserFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CiipUser`."""
    orderBy: [CiipUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): CiipUserCiipUsersByEmissionCategoryUpdatedByAndDeletedByManyToManyConnection!

  """Reads and enables pagination through a set of `CiipUser`."""
  ciipUsersByFormJsonCreatedByAndDeletedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CiipUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CiipUserFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CiipUser`."""
    orderBy: [CiipUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): CiipUserCiipUsersByFormJsonCreatedByAndDeletedByManyToManyConnection!

  """Reads and enables pagination through a set of `CiipUser`."""
  ciipUsersByFormJsonCreatedByAndUpdatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CiipUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CiipUserFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CiipUser`."""
    orderBy: [CiipUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): CiipUserCiipUsersByFormJsonCreatedByAndUpdatedByManyToManyConnection!

  """Reads and enables pagination through a set of `CiipUser`."""
  ciipUsersByFormJsonDeletedByAndCreatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CiipUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CiipUserFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CiipUser`."""
    orderBy: [CiipUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): CiipUserCiipUsersByFormJsonDeletedByAndCreatedByManyToManyConnection!

  """Reads and enables pagination through a set of `CiipUser`."""
  ciipUsersByFormJsonDeletedByAndUpdatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CiipUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CiipUserFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CiipUser`."""
    orderBy: [CiipUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): CiipUserCiipUsersByFormJsonDeletedByAndUpdatedByManyToManyConnection!

  """Reads and enables pagination through a set of `CiipUser`."""
  ciipUsersByFormJsonUpdatedByAndCreatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CiipUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CiipUserFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CiipUser`."""
    orderBy: [CiipUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): CiipUserCiipUsersByFormJsonUpdatedByAndCreatedByManyToManyConnection!

  """Reads and enables pagination through a set of `CiipUser`."""
  ciipUsersByFormJsonUpdatedByAndDeletedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CiipUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CiipUserFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CiipUser`."""
    orderBy: [CiipUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): CiipUserCiipUsersByFormJsonUpdatedByAndDeletedByManyToManyConnection!

  """Reads and enables pagination through a set of `CiipUser`."""
  ciipUsersByFormResultCreatedByAndDeletedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CiipUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CiipUserFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CiipUser`."""
    orderBy: [CiipUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): CiipUserCiipUsersByFormResultCreatedByAndDeletedByManyToManyConnection!

  """Reads and enables pagination through a set of `CiipUser`."""
  ciipUsersByFormResultCreatedByAndUpdatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CiipUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CiipUserFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CiipUser`."""
    orderBy: [CiipUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): CiipUserCiipUsersByFormResultCreatedByAndUpdatedByManyToManyConnection!

  """Reads and enables pagination through a set of `CiipUser`."""
  ciipUsersByFormResultDeletedByAndCreatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CiipUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CiipUserFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CiipUser`."""
    orderBy: [CiipUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): CiipUserCiipUsersByFormResultDeletedByAndCreatedByManyToManyConnection!

  """Reads and enables pagination through a set of `CiipUser`."""
  ciipUsersByFormResultDeletedByAndUpdatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CiipUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CiipUserFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CiipUser`."""
    orderBy: [CiipUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): CiipUserCiipUsersByFormResultDeletedByAndUpdatedByManyToManyConnection!

  """Reads and enables pagination through a set of `CiipUser`."""
  ciipUsersByFormResultStatusCreatedByAndDeletedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CiipUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CiipUserFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CiipUser`."""
    orderBy: [CiipUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): CiipUserCiipUsersByFormResultStatusCreatedByAndDeletedByManyToManyConnection!

  """Reads and enables pagination through a set of `CiipUser`."""
  ciipUsersByFormResultStatusCreatedByAndUpdatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CiipUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CiipUserFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CiipUser`."""
    orderBy: [CiipUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): CiipUserCiipUsersByFormResultStatusCreatedByAndUpdatedByManyToManyConnection!

  """Reads and enables pagination through a set of `CiipUser`."""
  ciipUsersByFormResultStatusDeletedByAndCreatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CiipUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CiipUserFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CiipUser`."""
    orderBy: [CiipUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): CiipUserCiipUsersByFormResultStatusDeletedByAndCreatedByManyToManyConnection!

  """Reads and enables pagination through a set of `CiipUser`."""
  ciipUsersByFormResultStatusDeletedByAndUpdatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CiipUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CiipUserFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CiipUser`."""
    orderBy: [CiipUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): CiipUserCiipUsersByFormResultStatusDeletedByAndUpdatedByManyToManyConnection!

  """Reads and enables pagination through a set of `CiipUser`."""
  ciipUsersByFormResultStatusUpdatedByAndCreatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CiipUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CiipUserFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CiipUser`."""
    orderBy: [CiipUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): CiipUserCiipUsersByFormResultStatusUpdatedByAndCreatedByManyToManyConnection!

  """Reads and enables pagination through a set of `CiipUser`."""
  ciipUsersByFormResultStatusUpdatedByAndDeletedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CiipUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CiipUserFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CiipUser`."""
    orderBy: [CiipUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): CiipUserCiipUsersByFormResultStatusUpdatedByAndDeletedByManyToManyConnection!

  """Reads and enables pagination through a set of `CiipUser`."""
  ciipUsersByFormResultUpdatedByAndCreatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CiipUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CiipUserFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CiipUser`."""
    orderBy: [CiipUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): CiipUserCiipUsersByFormResultUpdatedByAndCreatedByManyToManyConnection!

  """Reads and enables pagination through a set of `CiipUser`."""
  ciipUsersByFormResultUpdatedByAndDeletedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CiipUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CiipUserFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CiipUser`."""
    orderBy: [CiipUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): CiipUserCiipUsersByFormResultUpdatedByAndDeletedByManyToManyConnection!

  """Reads and enables pagination through a set of `CiipUser`."""
  ciipUsersByFuelCreatedByAndDeletedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CiipUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CiipUserFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CiipUser`."""
    orderBy: [CiipUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): CiipUserCiipUsersByFuelCreatedByAndDeletedByManyToManyConnection!

  """Reads and enables pagination through a set of `CiipUser`."""
  ciipUsersByFuelCreatedByAndUpdatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CiipUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CiipUserFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CiipUser`."""
    orderBy: [CiipUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): CiipUserCiipUsersByFuelCreatedByAndUpdatedByManyToManyConnection!

  """Reads and enables pagination through a set of `CiipUser`."""
  ciipUsersByFuelDeletedByAndCreatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CiipUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CiipUserFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CiipUser`."""
    orderBy: [CiipUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): CiipUserCiipUsersByFuelDeletedByAndCreatedByManyToManyConnection!

  """Reads and enables pagination through a set of `CiipUser`."""
  ciipUsersByFuelDeletedByAndUpdatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CiipUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CiipUserFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CiipUser`."""
    orderBy: [CiipUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): CiipUserCiipUsersByFuelDeletedByAndUpdatedByManyToManyConnection!

  """Reads and enables pagination through a set of `CiipUser`."""
  ciipUsersByFuelUpdatedByAndCreatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CiipUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CiipUserFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CiipUser`."""
    orderBy: [CiipUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): CiipUserCiipUsersByFuelUpdatedByAndCreatedByManyToManyConnection!

  """Reads and enables pagination through a set of `CiipUser`."""
  ciipUsersByFuelUpdatedByAndDeletedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CiipUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CiipUserFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CiipUser`."""
    orderBy: [CiipUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): CiipUserCiipUsersByFuelUpdatedByAndDeletedByManyToManyConnection!

  """Reads and enables pagination through a set of `CiipUser`."""
  ciipUsersByGasCreatedByAndDeletedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CiipUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CiipUserFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CiipUser`."""
    orderBy: [CiipUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): CiipUserCiipUsersByGasCreatedByAndDeletedByManyToManyConnection!

  """Reads and enables pagination through a set of `CiipUser`."""
  ciipUsersByGasCreatedByAndUpdatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CiipUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CiipUserFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CiipUser`."""
    orderBy: [CiipUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): CiipUserCiipUsersByGasCreatedByAndUpdatedByManyToManyConnection!

  """Reads and enables pagination through a set of `CiipUser`."""
  ciipUsersByGasDeletedByAndCreatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CiipUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CiipUserFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CiipUser`."""
    orderBy: [CiipUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): CiipUserCiipUsersByGasDeletedByAndCreatedByManyToManyConnection!

  """Reads and enables pagination through a set of `CiipUser`."""
  ciipUsersByGasDeletedByAndUpdatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CiipUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CiipUserFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CiipUser`."""
    orderBy: [CiipUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): CiipUserCiipUsersByGasDeletedByAndUpdatedByManyToManyConnection!

  """Reads and enables pagination through a set of `CiipUser`."""
  ciipUsersByGasUpdatedByAndCreatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CiipUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CiipUserFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CiipUser`."""
    orderBy: [CiipUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): CiipUserCiipUsersByGasUpdatedByAndCreatedByManyToManyConnection!

  """Reads and enables pagination through a set of `CiipUser`."""
  ciipUsersByGasUpdatedByAndDeletedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CiipUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CiipUserFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CiipUser`."""
    orderBy: [CiipUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): CiipUserCiipUsersByGasUpdatedByAndDeletedByManyToManyConnection!

  """Reads and enables pagination through a set of `CiipUser`."""
  ciipUsersByLinkedProductCreatedByAndDeletedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CiipUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CiipUserFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CiipUser`."""
    orderBy: [CiipUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): CiipUserCiipUsersByLinkedProductCreatedByAndDeletedByManyToManyConnection!

  """Reads and enables pagination through a set of `CiipUser`."""
  ciipUsersByLinkedProductCreatedByAndUpdatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CiipUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CiipUserFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CiipUser`."""
    orderBy: [CiipUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): CiipUserCiipUsersByLinkedProductCreatedByAndUpdatedByManyToManyConnection!

  """Reads and enables pagination through a set of `CiipUser`."""
  ciipUsersByLinkedProductDeletedByAndCreatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CiipUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CiipUserFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CiipUser`."""
    orderBy: [CiipUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): CiipUserCiipUsersByLinkedProductDeletedByAndCreatedByManyToManyConnection!

  """Reads and enables pagination through a set of `CiipUser`."""
  ciipUsersByLinkedProductDeletedByAndUpdatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CiipUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CiipUserFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CiipUser`."""
    orderBy: [CiipUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): CiipUserCiipUsersByLinkedProductDeletedByAndUpdatedByManyToManyConnection!

  """Reads and enables pagination through a set of `CiipUser`."""
  ciipUsersByLinkedProductUpdatedByAndCreatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CiipUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CiipUserFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CiipUser`."""
    orderBy: [CiipUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): CiipUserCiipUsersByLinkedProductUpdatedByAndCreatedByManyToManyConnection!

  """Reads and enables pagination through a set of `CiipUser`."""
  ciipUsersByLinkedProductUpdatedByAndDeletedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CiipUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CiipUserFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CiipUser`."""
    orderBy: [CiipUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): CiipUserCiipUsersByLinkedProductUpdatedByAndDeletedByManyToManyConnection!

  """Reads and enables pagination through a set of `CiipUser`."""
  ciipUsersByProductCreatedByAndDeletedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CiipUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CiipUserFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CiipUser`."""
    orderBy: [CiipUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): CiipUserCiipUsersByProductCreatedByAndDeletedByManyToManyConnection!

  """Reads and enables pagination through a set of `CiipUser`."""
  ciipUsersByProductCreatedByAndUpdatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CiipUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CiipUserFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CiipUser`."""
    orderBy: [CiipUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): CiipUserCiipUsersByProductCreatedByAndUpdatedByManyToManyConnection!

  """Reads and enables pagination through a set of `CiipUser`."""
  ciipUsersByProductDeletedByAndCreatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CiipUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CiipUserFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CiipUser`."""
    orderBy: [CiipUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): CiipUserCiipUsersByProductDeletedByAndCreatedByManyToManyConnection!

  """Reads and enables pagination through a set of `CiipUser`."""
  ciipUsersByProductDeletedByAndUpdatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CiipUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CiipUserFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CiipUser`."""
    orderBy: [CiipUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): CiipUserCiipUsersByProductDeletedByAndUpdatedByManyToManyConnection!

  """Reads and enables pagination through a set of `CiipUser`."""
  ciipUsersByProductUpdatedByAndCreatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CiipUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CiipUserFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CiipUser`."""
    orderBy: [CiipUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): CiipUserCiipUsersByProductUpdatedByAndCreatedByManyToManyConnection!

  """Reads and enables pagination through a set of `CiipUser`."""
  ciipUsersByProductUpdatedByAndDeletedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CiipUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CiipUserFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CiipUser`."""
    orderBy: [CiipUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): CiipUserCiipUsersByProductUpdatedByAndDeletedByManyToManyConnection!

  """Reads and enables pagination through a set of `CiipUser`."""
  ciipUsersByReviewCommentCreatedByAndDeletedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CiipUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CiipUserFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CiipUser`."""
    orderBy: [CiipUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): CiipUserCiipUsersByReviewCommentCreatedByAndDeletedByManyToManyConnection!

  """Reads and enables pagination through a set of `CiipUser`."""
  ciipUsersByReviewCommentCreatedByAndUpdatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CiipUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CiipUserFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CiipUser`."""
    orderBy: [CiipUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): CiipUserCiipUsersByReviewCommentCreatedByAndUpdatedByManyToManyConnection!

  """Reads and enables pagination through a set of `CiipUser`."""
  ciipUsersByReviewCommentDeletedByAndCreatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CiipUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CiipUserFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CiipUser`."""
    orderBy: [CiipUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): CiipUserCiipUsersByReviewCommentDeletedByAndCreatedByManyToManyConnection!

  """Reads and enables pagination through a set of `CiipUser`."""
  ciipUsersByReviewCommentDeletedByAndUpdatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CiipUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CiipUserFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CiipUser`."""
    orderBy: [CiipUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): CiipUserCiipUsersByReviewCommentDeletedByAndUpdatedByManyToManyConnection!

  """Reads and enables pagination through a set of `CiipUser`."""
  ciipUsersByReviewCommentUpdatedByAndCreatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CiipUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CiipUserFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CiipUser`."""
    orderBy: [CiipUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): CiipUserCiipUsersByReviewCommentUpdatedByAndCreatedByManyToManyConnection!

  """Reads and enables pagination through a set of `CiipUser`."""
  ciipUsersByReviewCommentUpdatedByAndDeletedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CiipUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CiipUserFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CiipUser`."""
    orderBy: [CiipUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): CiipUserCiipUsersByReviewCommentUpdatedByAndDeletedByManyToManyConnection!

  """Reads and enables pagination through a set of `CiipUser`."""
  ciipUsersByUpdatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CiipUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CiipUserFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CiipUser`."""
    orderBy: [CiipUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): CiipUsersConnection!

  """The date the user was updated"""
  createdAt: Datetime!

  """The person who updated the user"""
  createdBy: Int

  """The date the user was deleted"""
  deletedAt: Datetime

  """The person who deleted the user"""
  deletedBy: Int

  """User's email address"""
  emailAddress: String

  """Reads and enables pagination through a set of `EmissionCategory`."""
  emissionCategoriesByCreatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: EmissionCategoryCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: EmissionCategoryFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `EmissionCategory`."""
    orderBy: [EmissionCategoriesOrderBy!] = [PRIMARY_KEY_ASC]
  ): EmissionCategoriesConnection!

  """Reads and enables pagination through a set of `EmissionCategory`."""
  emissionCategoriesByDeletedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: EmissionCategoryCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: EmissionCategoryFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `EmissionCategory`."""
    orderBy: [EmissionCategoriesOrderBy!] = [PRIMARY_KEY_ASC]
  ): EmissionCategoriesConnection!

  """Reads and enables pagination through a set of `EmissionCategory`."""
  emissionCategoriesByEmissionCategoryGasCreatedByAndEmissionCategoryId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: EmissionCategoryCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: EmissionCategoryFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `EmissionCategory`."""
    orderBy: [EmissionCategoriesOrderBy!] = [PRIMARY_KEY_ASC]
  ): CiipUserEmissionCategoriesByEmissionCategoryGasCreatedByAndEmissionCategoryIdManyToManyConnection!

  """Reads and enables pagination through a set of `EmissionCategory`."""
  emissionCategoriesByEmissionCategoryGasDeletedByAndEmissionCategoryId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: EmissionCategoryCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: EmissionCategoryFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `EmissionCategory`."""
    orderBy: [EmissionCategoriesOrderBy!] = [PRIMARY_KEY_ASC]
  ): CiipUserEmissionCategoriesByEmissionCategoryGasDeletedByAndEmissionCategoryIdManyToManyConnection!

  """Reads and enables pagination through a set of `EmissionCategory`."""
  emissionCategoriesByEmissionCategoryGasUpdatedByAndEmissionCategoryId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: EmissionCategoryCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: EmissionCategoryFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `EmissionCategory`."""
    orderBy: [EmissionCategoriesOrderBy!] = [PRIMARY_KEY_ASC]
  ): CiipUserEmissionCategoriesByEmissionCategoryGasUpdatedByAndEmissionCategoryIdManyToManyConnection!

  """Reads and enables pagination through a set of `EmissionCategory`."""
  emissionCategoriesByUpdatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: EmissionCategoryCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: EmissionCategoryFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `EmissionCategory`."""
    orderBy: [EmissionCategoriesOrderBy!] = [PRIMARY_KEY_ASC]
  ): EmissionCategoriesConnection!

  """Reads and enables pagination through a set of `EmissionCategoryGas`."""
  emissionCategoryGasesByCreatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: EmissionCategoryGasCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: EmissionCategoryGasFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `EmissionCategoryGas`."""
    orderBy: [EmissionCategoryGasesOrderBy!] = [PRIMARY_KEY_ASC]
  ): EmissionCategoryGasesConnection!

  """Reads and enables pagination through a set of `EmissionCategoryGas`."""
  emissionCategoryGasesByDeletedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: EmissionCategoryGasCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: EmissionCategoryGasFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `EmissionCategoryGas`."""
    orderBy: [EmissionCategoryGasesOrderBy!] = [PRIMARY_KEY_ASC]
  ): EmissionCategoryGasesConnection!

  """Reads and enables pagination through a set of `EmissionCategoryGas`."""
  emissionCategoryGasesByUpdatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: EmissionCategoryGasCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: EmissionCategoryGasFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `EmissionCategoryGas`."""
    orderBy: [EmissionCategoryGasesOrderBy!] = [PRIMARY_KEY_ASC]
  ): EmissionCategoryGasesConnection!

  """User's first name"""
  firstName: String

  """Reads and enables pagination through a set of `FormJson`."""
  formJsonsByCreatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: FormJsonCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: FormJsonFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `FormJson`."""
    orderBy: [FormJsonsOrderBy!] = [PRIMARY_KEY_ASC]
  ): FormJsonsConnection!

  """Reads and enables pagination through a set of `FormJson`."""
  formJsonsByDeletedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: FormJsonCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: FormJsonFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `FormJson`."""
    orderBy: [FormJsonsOrderBy!] = [PRIMARY_KEY_ASC]
  ): FormJsonsConnection!

  """Reads and enables pagination through a set of `FormJson`."""
  formJsonsByFormResultCreatedByAndFormId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: FormJsonCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: FormJsonFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `FormJson`."""
    orderBy: [FormJsonsOrderBy!] = [PRIMARY_KEY_ASC]
  ): CiipUserFormJsonsByFormResultCreatedByAndFormIdManyToManyConnection!

  """Reads and enables pagination through a set of `FormJson`."""
  formJsonsByFormResultDeletedByAndFormId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: FormJsonCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: FormJsonFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `FormJson`."""
    orderBy: [FormJsonsOrderBy!] = [PRIMARY_KEY_ASC]
  ): CiipUserFormJsonsByFormResultDeletedByAndFormIdManyToManyConnection!

  """Reads and enables pagination through a set of `FormJson`."""
  formJsonsByFormResultUpdatedByAndFormId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: FormJsonCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: FormJsonFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `FormJson`."""
    orderBy: [FormJsonsOrderBy!] = [PRIMARY_KEY_ASC]
  ): CiipUserFormJsonsByFormResultUpdatedByAndFormIdManyToManyConnection!

  """Reads and enables pagination through a set of `FormJson`."""
  formJsonsByReviewCommentCreatedByAndFormId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: FormJsonCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: FormJsonFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `FormJson`."""
    orderBy: [FormJsonsOrderBy!] = [PRIMARY_KEY_ASC]
  ): CiipUserFormJsonsByReviewCommentCreatedByAndFormIdManyToManyConnection!

  """Reads and enables pagination through a set of `FormJson`."""
  formJsonsByReviewCommentDeletedByAndFormId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: FormJsonCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: FormJsonFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `FormJson`."""
    orderBy: [FormJsonsOrderBy!] = [PRIMARY_KEY_ASC]
  ): CiipUserFormJsonsByReviewCommentDeletedByAndFormIdManyToManyConnection!

  """Reads and enables pagination through a set of `FormJson`."""
  formJsonsByReviewCommentUpdatedByAndFormId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: FormJsonCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: FormJsonFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `FormJson`."""
    orderBy: [FormJsonsOrderBy!] = [PRIMARY_KEY_ASC]
  ): CiipUserFormJsonsByReviewCommentUpdatedByAndFormIdManyToManyConnection!

  """Reads and enables pagination through a set of `FormJson`."""
  formJsonsByUpdatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: FormJsonCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: FormJsonFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `FormJson`."""
    orderBy: [FormJsonsOrderBy!] = [PRIMARY_KEY_ASC]
  ): FormJsonsConnection!

  """Reads and enables pagination through a set of `FormResult`."""
  formResultsByCreatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: FormResultCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: FormResultFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `FormResult`."""
    orderBy: [FormResultsOrderBy!] = [PRIMARY_KEY_ASC]
  ): FormResultsConnection!

  """Reads and enables pagination through a set of `FormResult`."""
  formResultsByDeletedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: FormResultCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: FormResultFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `FormResult`."""
    orderBy: [FormResultsOrderBy!] = [PRIMARY_KEY_ASC]
  ): FormResultsConnection!

  """Reads and enables pagination through a set of `FormResult`."""
  formResultsByUpdatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: FormResultCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: FormResultFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `FormResult`."""
    orderBy: [FormResultsOrderBy!] = [PRIMARY_KEY_ASC]
  ): FormResultsConnection!

  """Reads and enables pagination through a set of `FormResultStatus`."""
  formResultStatusesByCreatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: FormResultStatusCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: FormResultStatusFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `FormResultStatus`."""
    orderBy: [FormResultStatusesOrderBy!] = [PRIMARY_KEY_ASC]
  ): FormResultStatusesConnection!

  """Reads and enables pagination through a set of `FormResultStatus`."""
  formResultStatusesByDeletedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: FormResultStatusCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: FormResultStatusFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `FormResultStatus`."""
    orderBy: [FormResultStatusesOrderBy!] = [PRIMARY_KEY_ASC]
  ): FormResultStatusesConnection!

  """Reads and enables pagination through a set of `FormResultStatus`."""
  formResultStatusesByUpdatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: FormResultStatusCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: FormResultStatusFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `FormResultStatus`."""
    orderBy: [FormResultStatusesOrderBy!] = [PRIMARY_KEY_ASC]
  ): FormResultStatusesConnection!

  """Reads and enables pagination through a set of `Fuel`."""
  fuelsByCreatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: FuelCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: FuelFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Fuel`."""
    orderBy: [FuelsOrderBy!] = [PRIMARY_KEY_ASC]
  ): FuelsConnection!

  """Reads and enables pagination through a set of `Fuel`."""
  fuelsByDeletedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: FuelCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: FuelFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Fuel`."""
    orderBy: [FuelsOrderBy!] = [PRIMARY_KEY_ASC]
  ): FuelsConnection!

  """Reads and enables pagination through a set of `Fuel`."""
  fuelsByUpdatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: FuelCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: FuelFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Fuel`."""
    orderBy: [FuelsOrderBy!] = [PRIMARY_KEY_ASC]
  ): FuelsConnection!

  """Reads and enables pagination through a set of `Gas`."""
  gasesByCreatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: GasCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: GasFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Gas`."""
    orderBy: [GasesOrderBy!] = [PRIMARY_KEY_ASC]
  ): GasesConnection!

  """Reads and enables pagination through a set of `Gas`."""
  gasesByDeletedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: GasCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: GasFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Gas`."""
    orderBy: [GasesOrderBy!] = [PRIMARY_KEY_ASC]
  ): GasesConnection!

  """Reads and enables pagination through a set of `Gas`."""
  gasesByEmissionCategoryGasCreatedByAndGasId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: GasCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: GasFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Gas`."""
    orderBy: [GasesOrderBy!] = [PRIMARY_KEY_ASC]
  ): CiipUserGasesByEmissionCategoryGasCreatedByAndGasIdManyToManyConnection!

  """Reads and enables pagination through a set of `Gas`."""
  gasesByEmissionCategoryGasDeletedByAndGasId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: GasCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: GasFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Gas`."""
    orderBy: [GasesOrderBy!] = [PRIMARY_KEY_ASC]
  ): CiipUserGasesByEmissionCategoryGasDeletedByAndGasIdManyToManyConnection!

  """Reads and enables pagination through a set of `Gas`."""
  gasesByEmissionCategoryGasUpdatedByAndGasId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: GasCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: GasFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Gas`."""
    orderBy: [GasesOrderBy!] = [PRIMARY_KEY_ASC]
  ): CiipUserGasesByEmissionCategoryGasUpdatedByAndGasIdManyToManyConnection!

  """Reads and enables pagination through a set of `Gas`."""
  gasesByUpdatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: GasCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: GasFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Gas`."""
    orderBy: [GasesOrderBy!] = [PRIMARY_KEY_ASC]
  ): GasesConnection!

  """
  Computed column true if the user has certification requests attached to their email
  """
  hasCertificationRequests: Boolean

  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  id: ID!

  """User's last name"""
  lastName: String

  """Reads and enables pagination through a set of `LinkedProduct`."""
  linkedProductsByCreatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: LinkedProductCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: LinkedProductFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `LinkedProduct`."""
    orderBy: [LinkedProductsOrderBy!] = [PRIMARY_KEY_ASC]
  ): LinkedProductsConnection!

  """Reads and enables pagination through a set of `LinkedProduct`."""
  linkedProductsByDeletedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: LinkedProductCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: LinkedProductFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `LinkedProduct`."""
    orderBy: [LinkedProductsOrderBy!] = [PRIMARY_KEY_ASC]
  ): LinkedProductsConnection!

  """Reads and enables pagination through a set of `LinkedProduct`."""
  linkedProductsByUpdatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: LinkedProductCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: LinkedProductFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `LinkedProduct`."""
    orderBy: [LinkedProductsOrderBy!] = [PRIMARY_KEY_ASC]
  ): LinkedProductsConnection!

  """User's occupation"""
  occupation: String

  """Reads and enables pagination through a set of `Organisation`."""
  organisationsByCiipUserOrganisationUserIdAndOrganisationId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: OrganisationCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: OrganisationFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Organisation`."""
    orderBy: [OrganisationsOrderBy!] = [PRIMARY_KEY_ASC]
  ): CiipUserOrganisationsByCiipUserOrganisationUserIdAndOrganisationIdManyToManyConnection!

  """User's phone number"""
  phoneNumber: String

  """Reads and enables pagination through a set of `Product`."""
  productsByBenchmarkCreatedByAndProductId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProductCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ProductFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Product`."""
    orderBy: [ProductsOrderBy!] = [PRIMARY_KEY_ASC]
  ): CiipUserProductsByBenchmarkCreatedByAndProductIdManyToManyConnection!

  """Reads and enables pagination through a set of `Product`."""
  productsByBenchmarkDeletedByAndProductId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProductCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ProductFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Product`."""
    orderBy: [ProductsOrderBy!] = [PRIMARY_KEY_ASC]
  ): CiipUserProductsByBenchmarkDeletedByAndProductIdManyToManyConnection!

  """Reads and enables pagination through a set of `Product`."""
  productsByBenchmarkUpdatedByAndProductId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProductCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ProductFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Product`."""
    orderBy: [ProductsOrderBy!] = [PRIMARY_KEY_ASC]
  ): CiipUserProductsByBenchmarkUpdatedByAndProductIdManyToManyConnection!

  """Reads and enables pagination through a set of `Product`."""
  productsByCreatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProductCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ProductFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Product`."""
    orderBy: [ProductsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ProductsConnection!

  """Reads and enables pagination through a set of `Product`."""
  productsByDeletedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProductCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ProductFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Product`."""
    orderBy: [ProductsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ProductsConnection!

  """Reads and enables pagination through a set of `Product`."""
  productsByLinkedProductCreatedByAndLinkedProductId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProductCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ProductFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Product`."""
    orderBy: [ProductsOrderBy!] = [PRIMARY_KEY_ASC]
  ): CiipUserProductsByLinkedProductCreatedByAndLinkedProductIdManyToManyConnection!

  """Reads and enables pagination through a set of `Product`."""
  productsByLinkedProductCreatedByAndProductId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProductCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ProductFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Product`."""
    orderBy: [ProductsOrderBy!] = [PRIMARY_KEY_ASC]
  ): CiipUserProductsByLinkedProductCreatedByAndProductIdManyToManyConnection!

  """Reads and enables pagination through a set of `Product`."""
  productsByLinkedProductDeletedByAndLinkedProductId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProductCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ProductFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Product`."""
    orderBy: [ProductsOrderBy!] = [PRIMARY_KEY_ASC]
  ): CiipUserProductsByLinkedProductDeletedByAndLinkedProductIdManyToManyConnection!

  """Reads and enables pagination through a set of `Product`."""
  productsByLinkedProductDeletedByAndProductId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProductCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ProductFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Product`."""
    orderBy: [ProductsOrderBy!] = [PRIMARY_KEY_ASC]
  ): CiipUserProductsByLinkedProductDeletedByAndProductIdManyToManyConnection!

  """Reads and enables pagination through a set of `Product`."""
  productsByLinkedProductUpdatedByAndLinkedProductId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProductCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ProductFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Product`."""
    orderBy: [ProductsOrderBy!] = [PRIMARY_KEY_ASC]
  ): CiipUserProductsByLinkedProductUpdatedByAndLinkedProductIdManyToManyConnection!

  """Reads and enables pagination through a set of `Product`."""
  productsByLinkedProductUpdatedByAndProductId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProductCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ProductFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Product`."""
    orderBy: [ProductsOrderBy!] = [PRIMARY_KEY_ASC]
  ): CiipUserProductsByLinkedProductUpdatedByAndProductIdManyToManyConnection!

  """Reads and enables pagination through a set of `Product`."""
  productsByUpdatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProductCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ProductFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Product`."""
    orderBy: [ProductsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ProductsConnection!

  """Reads and enables pagination through a set of `ReportingYear`."""
  reportingYearsByBenchmarkCreatedByAndEndReportingYear(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ReportingYearCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ReportingYearFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `ReportingYear`."""
    orderBy: [ReportingYearsOrderBy!] = [PRIMARY_KEY_ASC]
  ): CiipUserReportingYearsByBenchmarkCreatedByAndEndReportingYearManyToManyConnection!

  """Reads and enables pagination through a set of `ReportingYear`."""
  reportingYearsByBenchmarkCreatedByAndStartReportingYear(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ReportingYearCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ReportingYearFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `ReportingYear`."""
    orderBy: [ReportingYearsOrderBy!] = [PRIMARY_KEY_ASC]
  ): CiipUserReportingYearsByBenchmarkCreatedByAndStartReportingYearManyToManyConnection!

  """Reads and enables pagination through a set of `ReportingYear`."""
  reportingYearsByBenchmarkDeletedByAndEndReportingYear(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ReportingYearCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ReportingYearFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `ReportingYear`."""
    orderBy: [ReportingYearsOrderBy!] = [PRIMARY_KEY_ASC]
  ): CiipUserReportingYearsByBenchmarkDeletedByAndEndReportingYearManyToManyConnection!

  """Reads and enables pagination through a set of `ReportingYear`."""
  reportingYearsByBenchmarkDeletedByAndStartReportingYear(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ReportingYearCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ReportingYearFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `ReportingYear`."""
    orderBy: [ReportingYearsOrderBy!] = [PRIMARY_KEY_ASC]
  ): CiipUserReportingYearsByBenchmarkDeletedByAndStartReportingYearManyToManyConnection!

  """Reads and enables pagination through a set of `ReportingYear`."""
  reportingYearsByBenchmarkUpdatedByAndEndReportingYear(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ReportingYearCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ReportingYearFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `ReportingYear`."""
    orderBy: [ReportingYearsOrderBy!] = [PRIMARY_KEY_ASC]
  ): CiipUserReportingYearsByBenchmarkUpdatedByAndEndReportingYearManyToManyConnection!

  """Reads and enables pagination through a set of `ReportingYear`."""
  reportingYearsByBenchmarkUpdatedByAndStartReportingYear(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ReportingYearCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ReportingYearFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `ReportingYear`."""
    orderBy: [ReportingYearsOrderBy!] = [PRIMARY_KEY_ASC]
  ): CiipUserReportingYearsByBenchmarkUpdatedByAndStartReportingYearManyToManyConnection!

  """Reads and enables pagination through a set of `ReviewComment`."""
  reviewCommentsByCreatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ReviewCommentCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ReviewCommentFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `ReviewComment`."""
    orderBy: [ReviewCommentsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ReviewCommentsConnection!

  """Reads and enables pagination through a set of `ReviewComment`."""
  reviewCommentsByDeletedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ReviewCommentCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ReviewCommentFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `ReviewComment`."""
    orderBy: [ReviewCommentsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ReviewCommentsConnection!

  """Reads and enables pagination through a set of `ReviewComment`."""
  reviewCommentsByUpdatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ReviewCommentCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ReviewCommentFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `ReviewComment`."""
    orderBy: [ReviewCommentsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ReviewCommentsConnection!

  """Unique ID for the user"""
  rowId: Int!

  """The date the user was updated"""
  updatedAt: Datetime!

  """The person who updated the user"""
  updatedBy: Int

  """Universally Unique ID for the user used for auth"""
  uuid: UUID!
}

"""
A connection to a list of `Application` values, with data from `ApplicationRevision`.
"""
type CiipUserApplicationsByApplicationRevisionCreatedByAndApplicationIdManyToManyConnection {
  """
  A list of edges which contains the `Application`, info from the
  `ApplicationRevision`, and the cursor to aid in pagination.
  """
  edges: [CiipUserApplicationsByApplicationRevisionCreatedByAndApplicationIdManyToManyEdge!]!

  """A list of `Application` objects."""
  nodes: [Application]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Application` you could get from the connection."""
  totalCount: Int!
}

"""
A `Application` edge in the connection, with data from `ApplicationRevision`.
"""
type CiipUserApplicationsByApplicationRevisionCreatedByAndApplicationIdManyToManyEdge {
  """Reads and enables pagination through a set of `ApplicationRevision`."""
  applicationRevisionsByApplicationId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ApplicationRevisionCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ApplicationRevisionFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `ApplicationRevision`."""
    orderBy: [ApplicationRevisionsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ApplicationRevisionsConnection!

  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Application` at the end of the edge."""
  node: Application
}

"""
A connection to a list of `Application` values, with data from `ApplicationRevision`.
"""
type CiipUserApplicationsByApplicationRevisionDeletedByAndApplicationIdManyToManyConnection {
  """
  A list of edges which contains the `Application`, info from the
  `ApplicationRevision`, and the cursor to aid in pagination.
  """
  edges: [CiipUserApplicationsByApplicationRevisionDeletedByAndApplicationIdManyToManyEdge!]!

  """A list of `Application` objects."""
  nodes: [Application]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Application` you could get from the connection."""
  totalCount: Int!
}

"""
A `Application` edge in the connection, with data from `ApplicationRevision`.
"""
type CiipUserApplicationsByApplicationRevisionDeletedByAndApplicationIdManyToManyEdge {
  """Reads and enables pagination through a set of `ApplicationRevision`."""
  applicationRevisionsByApplicationId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ApplicationRevisionCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ApplicationRevisionFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `ApplicationRevision`."""
    orderBy: [ApplicationRevisionsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ApplicationRevisionsConnection!

  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Application` at the end of the edge."""
  node: Application
}

"""
A connection to a list of `Application` values, with data from `ApplicationRevision`.
"""
type CiipUserApplicationsByApplicationRevisionUpdatedByAndApplicationIdManyToManyConnection {
  """
  A list of edges which contains the `Application`, info from the
  `ApplicationRevision`, and the cursor to aid in pagination.
  """
  edges: [CiipUserApplicationsByApplicationRevisionUpdatedByAndApplicationIdManyToManyEdge!]!

  """A list of `Application` objects."""
  nodes: [Application]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Application` you could get from the connection."""
  totalCount: Int!
}

"""
A `Application` edge in the connection, with data from `ApplicationRevision`.
"""
type CiipUserApplicationsByApplicationRevisionUpdatedByAndApplicationIdManyToManyEdge {
  """Reads and enables pagination through a set of `ApplicationRevision`."""
  applicationRevisionsByApplicationId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ApplicationRevisionCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ApplicationRevisionFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `ApplicationRevision`."""
    orderBy: [ApplicationRevisionsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ApplicationRevisionsConnection!

  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Application` at the end of the edge."""
  node: Application
}

"""
A connection to a list of `Application` values, with data from `CertificationUrl`.
"""
type CiipUserApplicationsByCertificationUrlCertifiedByAndApplicationIdManyToManyConnection {
  """
  A list of edges which contains the `Application`, info from the `CertificationUrl`, and the cursor to aid in pagination.
  """
  edges: [CiipUserApplicationsByCertificationUrlCertifiedByAndApplicationIdManyToManyEdge!]!

  """A list of `Application` objects."""
  nodes: [Application]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Application` you could get from the connection."""
  totalCount: Int!
}

"""
A `Application` edge in the connection, with data from `CertificationUrl`.
"""
type CiipUserApplicationsByCertificationUrlCertifiedByAndApplicationIdManyToManyEdge {
  """Reads and enables pagination through a set of `CertificationUrl`."""
  certificationUrlsByApplicationId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CertificationUrlCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CertificationUrlFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CertificationUrl`."""
    orderBy: [CertificationUrlsOrderBy!] = [PRIMARY_KEY_ASC]
  ): CertificationUrlsConnection!

  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Application` at the end of the edge."""
  node: Application
}

"""
A connection to a list of `Application` values, with data from `CertificationUrl`.
"""
type CiipUserApplicationsByCertificationUrlCreatedByAndApplicationIdManyToManyConnection {
  """
  A list of edges which contains the `Application`, info from the `CertificationUrl`, and the cursor to aid in pagination.
  """
  edges: [CiipUserApplicationsByCertificationUrlCreatedByAndApplicationIdManyToManyEdge!]!

  """A list of `Application` objects."""
  nodes: [Application]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Application` you could get from the connection."""
  totalCount: Int!
}

"""
A `Application` edge in the connection, with data from `CertificationUrl`.
"""
type CiipUserApplicationsByCertificationUrlCreatedByAndApplicationIdManyToManyEdge {
  """Reads and enables pagination through a set of `CertificationUrl`."""
  certificationUrlsByApplicationId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CertificationUrlCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CertificationUrlFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CertificationUrl`."""
    orderBy: [CertificationUrlsOrderBy!] = [PRIMARY_KEY_ASC]
  ): CertificationUrlsConnection!

  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Application` at the end of the edge."""
  node: Application
}

"""
A connection to a list of `Application` values, with data from `CertificationUrl`.
"""
type CiipUserApplicationsByCertificationUrlDeletedByAndApplicationIdManyToManyConnection {
  """
  A list of edges which contains the `Application`, info from the `CertificationUrl`, and the cursor to aid in pagination.
  """
  edges: [CiipUserApplicationsByCertificationUrlDeletedByAndApplicationIdManyToManyEdge!]!

  """A list of `Application` objects."""
  nodes: [Application]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Application` you could get from the connection."""
  totalCount: Int!
}

"""
A `Application` edge in the connection, with data from `CertificationUrl`.
"""
type CiipUserApplicationsByCertificationUrlDeletedByAndApplicationIdManyToManyEdge {
  """Reads and enables pagination through a set of `CertificationUrl`."""
  certificationUrlsByApplicationId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CertificationUrlCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CertificationUrlFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CertificationUrl`."""
    orderBy: [CertificationUrlsOrderBy!] = [PRIMARY_KEY_ASC]
  ): CertificationUrlsConnection!

  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Application` at the end of the edge."""
  node: Application
}

"""
A connection to a list of `Application` values, with data from `CertificationUrl`.
"""
type CiipUserApplicationsByCertificationUrlUpdatedByAndApplicationIdManyToManyConnection {
  """
  A list of edges which contains the `Application`, info from the `CertificationUrl`, and the cursor to aid in pagination.
  """
  edges: [CiipUserApplicationsByCertificationUrlUpdatedByAndApplicationIdManyToManyEdge!]!

  """A list of `Application` objects."""
  nodes: [Application]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Application` you could get from the connection."""
  totalCount: Int!
}

"""
A `Application` edge in the connection, with data from `CertificationUrl`.
"""
type CiipUserApplicationsByCertificationUrlUpdatedByAndApplicationIdManyToManyEdge {
  """Reads and enables pagination through a set of `CertificationUrl`."""
  certificationUrlsByApplicationId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CertificationUrlCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CertificationUrlFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CertificationUrl`."""
    orderBy: [CertificationUrlsOrderBy!] = [PRIMARY_KEY_ASC]
  ): CertificationUrlsConnection!

  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Application` at the end of the edge."""
  node: Application
}

"""
A connection to a list of `Application` values, with data from `FormResult`.
"""
type CiipUserApplicationsByFormResultCreatedByAndApplicationIdManyToManyConnection {
  """
  A list of edges which contains the `Application`, info from the `FormResult`, and the cursor to aid in pagination.
  """
  edges: [CiipUserApplicationsByFormResultCreatedByAndApplicationIdManyToManyEdge!]!

  """A list of `Application` objects."""
  nodes: [Application]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Application` you could get from the connection."""
  totalCount: Int!
}

"""A `Application` edge in the connection, with data from `FormResult`."""
type CiipUserApplicationsByFormResultCreatedByAndApplicationIdManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """Reads and enables pagination through a set of `FormResult`."""
  formResultsByApplicationId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: FormResultCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: FormResultFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `FormResult`."""
    orderBy: [FormResultsOrderBy!] = [PRIMARY_KEY_ASC]
  ): FormResultsConnection!

  """The `Application` at the end of the edge."""
  node: Application
}

"""
A connection to a list of `Application` values, with data from `FormResult`.
"""
type CiipUserApplicationsByFormResultDeletedByAndApplicationIdManyToManyConnection {
  """
  A list of edges which contains the `Application`, info from the `FormResult`, and the cursor to aid in pagination.
  """
  edges: [CiipUserApplicationsByFormResultDeletedByAndApplicationIdManyToManyEdge!]!

  """A list of `Application` objects."""
  nodes: [Application]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Application` you could get from the connection."""
  totalCount: Int!
}

"""A `Application` edge in the connection, with data from `FormResult`."""
type CiipUserApplicationsByFormResultDeletedByAndApplicationIdManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """Reads and enables pagination through a set of `FormResult`."""
  formResultsByApplicationId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: FormResultCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: FormResultFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `FormResult`."""
    orderBy: [FormResultsOrderBy!] = [PRIMARY_KEY_ASC]
  ): FormResultsConnection!

  """The `Application` at the end of the edge."""
  node: Application
}

"""
A connection to a list of `Application` values, with data from `FormResultStatus`.
"""
type CiipUserApplicationsByFormResultStatusCreatedByAndApplicationIdManyToManyConnection {
  """
  A list of edges which contains the `Application`, info from the `FormResultStatus`, and the cursor to aid in pagination.
  """
  edges: [CiipUserApplicationsByFormResultStatusCreatedByAndApplicationIdManyToManyEdge!]!

  """A list of `Application` objects."""
  nodes: [Application]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Application` you could get from the connection."""
  totalCount: Int!
}

"""
A `Application` edge in the connection, with data from `FormResultStatus`.
"""
type CiipUserApplicationsByFormResultStatusCreatedByAndApplicationIdManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """Reads and enables pagination through a set of `FormResultStatus`."""
  formResultStatusesByApplicationId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: FormResultStatusCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: FormResultStatusFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `FormResultStatus`."""
    orderBy: [FormResultStatusesOrderBy!] = [PRIMARY_KEY_ASC]
  ): FormResultStatusesConnection!

  """The `Application` at the end of the edge."""
  node: Application
}

"""
A connection to a list of `Application` values, with data from `FormResultStatus`.
"""
type CiipUserApplicationsByFormResultStatusDeletedByAndApplicationIdManyToManyConnection {
  """
  A list of edges which contains the `Application`, info from the `FormResultStatus`, and the cursor to aid in pagination.
  """
  edges: [CiipUserApplicationsByFormResultStatusDeletedByAndApplicationIdManyToManyEdge!]!

  """A list of `Application` objects."""
  nodes: [Application]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Application` you could get from the connection."""
  totalCount: Int!
}

"""
A `Application` edge in the connection, with data from `FormResultStatus`.
"""
type CiipUserApplicationsByFormResultStatusDeletedByAndApplicationIdManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """Reads and enables pagination through a set of `FormResultStatus`."""
  formResultStatusesByApplicationId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: FormResultStatusCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: FormResultStatusFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `FormResultStatus`."""
    orderBy: [FormResultStatusesOrderBy!] = [PRIMARY_KEY_ASC]
  ): FormResultStatusesConnection!

  """The `Application` at the end of the edge."""
  node: Application
}

"""
A connection to a list of `Application` values, with data from `FormResultStatus`.
"""
type CiipUserApplicationsByFormResultStatusUpdatedByAndApplicationIdManyToManyConnection {
  """
  A list of edges which contains the `Application`, info from the `FormResultStatus`, and the cursor to aid in pagination.
  """
  edges: [CiipUserApplicationsByFormResultStatusUpdatedByAndApplicationIdManyToManyEdge!]!

  """A list of `Application` objects."""
  nodes: [Application]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Application` you could get from the connection."""
  totalCount: Int!
}

"""
A `Application` edge in the connection, with data from `FormResultStatus`.
"""
type CiipUserApplicationsByFormResultStatusUpdatedByAndApplicationIdManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """Reads and enables pagination through a set of `FormResultStatus`."""
  formResultStatusesByApplicationId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: FormResultStatusCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: FormResultStatusFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `FormResultStatus`."""
    orderBy: [FormResultStatusesOrderBy!] = [PRIMARY_KEY_ASC]
  ): FormResultStatusesConnection!

  """The `Application` at the end of the edge."""
  node: Application
}

"""
A connection to a list of `Application` values, with data from `FormResult`.
"""
type CiipUserApplicationsByFormResultUpdatedByAndApplicationIdManyToManyConnection {
  """
  A list of edges which contains the `Application`, info from the `FormResult`, and the cursor to aid in pagination.
  """
  edges: [CiipUserApplicationsByFormResultUpdatedByAndApplicationIdManyToManyEdge!]!

  """A list of `Application` objects."""
  nodes: [Application]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Application` you could get from the connection."""
  totalCount: Int!
}

"""A `Application` edge in the connection, with data from `FormResult`."""
type CiipUserApplicationsByFormResultUpdatedByAndApplicationIdManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """Reads and enables pagination through a set of `FormResult`."""
  formResultsByApplicationId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: FormResultCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: FormResultFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `FormResult`."""
    orderBy: [FormResultsOrderBy!] = [PRIMARY_KEY_ASC]
  ): FormResultsConnection!

  """The `Application` at the end of the edge."""
  node: Application
}

"""
A connection to a list of `Application` values, with data from `ReviewComment`.
"""
type CiipUserApplicationsByReviewCommentCreatedByAndApplicationIdManyToManyConnection {
  """
  A list of edges which contains the `Application`, info from the `ReviewComment`, and the cursor to aid in pagination.
  """
  edges: [CiipUserApplicationsByReviewCommentCreatedByAndApplicationIdManyToManyEdge!]!

  """A list of `Application` objects."""
  nodes: [Application]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Application` you could get from the connection."""
  totalCount: Int!
}

"""
A `Application` edge in the connection, with data from `ReviewComment`.
"""
type CiipUserApplicationsByReviewCommentCreatedByAndApplicationIdManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Application` at the end of the edge."""
  node: Application

  """Reads and enables pagination through a set of `ReviewComment`."""
  reviewCommentsByApplicationId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ReviewCommentCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ReviewCommentFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `ReviewComment`."""
    orderBy: [ReviewCommentsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ReviewCommentsConnection!
}

"""
A connection to a list of `Application` values, with data from `ReviewComment`.
"""
type CiipUserApplicationsByReviewCommentDeletedByAndApplicationIdManyToManyConnection {
  """
  A list of edges which contains the `Application`, info from the `ReviewComment`, and the cursor to aid in pagination.
  """
  edges: [CiipUserApplicationsByReviewCommentDeletedByAndApplicationIdManyToManyEdge!]!

  """A list of `Application` objects."""
  nodes: [Application]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Application` you could get from the connection."""
  totalCount: Int!
}

"""
A `Application` edge in the connection, with data from `ReviewComment`.
"""
type CiipUserApplicationsByReviewCommentDeletedByAndApplicationIdManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Application` at the end of the edge."""
  node: Application

  """Reads and enables pagination through a set of `ReviewComment`."""
  reviewCommentsByApplicationId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ReviewCommentCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ReviewCommentFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `ReviewComment`."""
    orderBy: [ReviewCommentsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ReviewCommentsConnection!
}

"""
A connection to a list of `Application` values, with data from `ReviewComment`.
"""
type CiipUserApplicationsByReviewCommentUpdatedByAndApplicationIdManyToManyConnection {
  """
  A list of edges which contains the `Application`, info from the `ReviewComment`, and the cursor to aid in pagination.
  """
  edges: [CiipUserApplicationsByReviewCommentUpdatedByAndApplicationIdManyToManyEdge!]!

  """A list of `Application` objects."""
  nodes: [Application]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Application` you could get from the connection."""
  totalCount: Int!
}

"""
A `Application` edge in the connection, with data from `ReviewComment`.
"""
type CiipUserApplicationsByReviewCommentUpdatedByAndApplicationIdManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Application` at the end of the edge."""
  node: Application

  """Reads and enables pagination through a set of `ReviewComment`."""
  reviewCommentsByApplicationId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ReviewCommentCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ReviewCommentFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `ReviewComment`."""
    orderBy: [ReviewCommentsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ReviewCommentsConnection!
}

"""
A connection to a list of `CiipUser` values, with data from `ApplicationRevision`.
"""
type CiipUserCiipUsersByApplicationRevisionCreatedByAndDeletedByManyToManyConnection {
  """
  A list of edges which contains the `CiipUser`, info from the `ApplicationRevision`, and the cursor to aid in pagination.
  """
  edges: [CiipUserCiipUsersByApplicationRevisionCreatedByAndDeletedByManyToManyEdge!]!

  """A list of `CiipUser` objects."""
  nodes: [CiipUser]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CiipUser` you could get from the connection."""
  totalCount: Int!
}

"""
A `CiipUser` edge in the connection, with data from `ApplicationRevision`.
"""
type CiipUserCiipUsersByApplicationRevisionCreatedByAndDeletedByManyToManyEdge {
  """Reads and enables pagination through a set of `ApplicationRevision`."""
  applicationRevisionsByDeletedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ApplicationRevisionCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ApplicationRevisionFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `ApplicationRevision`."""
    orderBy: [ApplicationRevisionsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ApplicationRevisionsConnection!

  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CiipUser` at the end of the edge."""
  node: CiipUser
}

"""
A connection to a list of `CiipUser` values, with data from `ApplicationRevision`.
"""
type CiipUserCiipUsersByApplicationRevisionCreatedByAndUpdatedByManyToManyConnection {
  """
  A list of edges which contains the `CiipUser`, info from the `ApplicationRevision`, and the cursor to aid in pagination.
  """
  edges: [CiipUserCiipUsersByApplicationRevisionCreatedByAndUpdatedByManyToManyEdge!]!

  """A list of `CiipUser` objects."""
  nodes: [CiipUser]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CiipUser` you could get from the connection."""
  totalCount: Int!
}

"""
A `CiipUser` edge in the connection, with data from `ApplicationRevision`.
"""
type CiipUserCiipUsersByApplicationRevisionCreatedByAndUpdatedByManyToManyEdge {
  """Reads and enables pagination through a set of `ApplicationRevision`."""
  applicationRevisionsByUpdatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ApplicationRevisionCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ApplicationRevisionFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `ApplicationRevision`."""
    orderBy: [ApplicationRevisionsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ApplicationRevisionsConnection!

  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CiipUser` at the end of the edge."""
  node: CiipUser
}

"""
A connection to a list of `CiipUser` values, with data from `ApplicationRevision`.
"""
type CiipUserCiipUsersByApplicationRevisionDeletedByAndCreatedByManyToManyConnection {
  """
  A list of edges which contains the `CiipUser`, info from the `ApplicationRevision`, and the cursor to aid in pagination.
  """
  edges: [CiipUserCiipUsersByApplicationRevisionDeletedByAndCreatedByManyToManyEdge!]!

  """A list of `CiipUser` objects."""
  nodes: [CiipUser]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CiipUser` you could get from the connection."""
  totalCount: Int!
}

"""
A `CiipUser` edge in the connection, with data from `ApplicationRevision`.
"""
type CiipUserCiipUsersByApplicationRevisionDeletedByAndCreatedByManyToManyEdge {
  """Reads and enables pagination through a set of `ApplicationRevision`."""
  applicationRevisionsByCreatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ApplicationRevisionCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ApplicationRevisionFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `ApplicationRevision`."""
    orderBy: [ApplicationRevisionsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ApplicationRevisionsConnection!

  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CiipUser` at the end of the edge."""
  node: CiipUser
}

"""
A connection to a list of `CiipUser` values, with data from `ApplicationRevision`.
"""
type CiipUserCiipUsersByApplicationRevisionDeletedByAndUpdatedByManyToManyConnection {
  """
  A list of edges which contains the `CiipUser`, info from the `ApplicationRevision`, and the cursor to aid in pagination.
  """
  edges: [CiipUserCiipUsersByApplicationRevisionDeletedByAndUpdatedByManyToManyEdge!]!

  """A list of `CiipUser` objects."""
  nodes: [CiipUser]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CiipUser` you could get from the connection."""
  totalCount: Int!
}

"""
A `CiipUser` edge in the connection, with data from `ApplicationRevision`.
"""
type CiipUserCiipUsersByApplicationRevisionDeletedByAndUpdatedByManyToManyEdge {
  """Reads and enables pagination through a set of `ApplicationRevision`."""
  applicationRevisionsByUpdatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ApplicationRevisionCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ApplicationRevisionFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `ApplicationRevision`."""
    orderBy: [ApplicationRevisionsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ApplicationRevisionsConnection!

  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CiipUser` at the end of the edge."""
  node: CiipUser
}

"""
A connection to a list of `CiipUser` values, with data from `ApplicationRevisionStatus`.
"""
type CiipUserCiipUsersByApplicationRevisionStatusCreatedByAndDeletedByManyToManyConnection {
  """
  A list of edges which contains the `CiipUser`, info from the
  `ApplicationRevisionStatus`, and the cursor to aid in pagination.
  """
  edges: [CiipUserCiipUsersByApplicationRevisionStatusCreatedByAndDeletedByManyToManyEdge!]!

  """A list of `CiipUser` objects."""
  nodes: [CiipUser]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CiipUser` you could get from the connection."""
  totalCount: Int!
}

"""
A `CiipUser` edge in the connection, with data from `ApplicationRevisionStatus`.
"""
type CiipUserCiipUsersByApplicationRevisionStatusCreatedByAndDeletedByManyToManyEdge {
  """
  Reads and enables pagination through a set of `ApplicationRevisionStatus`.
  """
  applicationRevisionStatusesByDeletedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ApplicationRevisionStatusCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ApplicationRevisionStatusFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `ApplicationRevisionStatus`."""
    orderBy: [ApplicationRevisionStatusesOrderBy!] = [PRIMARY_KEY_ASC]
  ): ApplicationRevisionStatusesConnection!

  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CiipUser` at the end of the edge."""
  node: CiipUser
}

"""
A connection to a list of `CiipUser` values, with data from `ApplicationRevisionStatus`.
"""
type CiipUserCiipUsersByApplicationRevisionStatusCreatedByAndUpdatedByManyToManyConnection {
  """
  A list of edges which contains the `CiipUser`, info from the
  `ApplicationRevisionStatus`, and the cursor to aid in pagination.
  """
  edges: [CiipUserCiipUsersByApplicationRevisionStatusCreatedByAndUpdatedByManyToManyEdge!]!

  """A list of `CiipUser` objects."""
  nodes: [CiipUser]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CiipUser` you could get from the connection."""
  totalCount: Int!
}

"""
A `CiipUser` edge in the connection, with data from `ApplicationRevisionStatus`.
"""
type CiipUserCiipUsersByApplicationRevisionStatusCreatedByAndUpdatedByManyToManyEdge {
  """
  Reads and enables pagination through a set of `ApplicationRevisionStatus`.
  """
  applicationRevisionStatusesByUpdatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ApplicationRevisionStatusCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ApplicationRevisionStatusFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `ApplicationRevisionStatus`."""
    orderBy: [ApplicationRevisionStatusesOrderBy!] = [PRIMARY_KEY_ASC]
  ): ApplicationRevisionStatusesConnection!

  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CiipUser` at the end of the edge."""
  node: CiipUser
}

"""
A connection to a list of `CiipUser` values, with data from `ApplicationRevisionStatus`.
"""
type CiipUserCiipUsersByApplicationRevisionStatusDeletedByAndCreatedByManyToManyConnection {
  """
  A list of edges which contains the `CiipUser`, info from the
  `ApplicationRevisionStatus`, and the cursor to aid in pagination.
  """
  edges: [CiipUserCiipUsersByApplicationRevisionStatusDeletedByAndCreatedByManyToManyEdge!]!

  """A list of `CiipUser` objects."""
  nodes: [CiipUser]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CiipUser` you could get from the connection."""
  totalCount: Int!
}

"""
A `CiipUser` edge in the connection, with data from `ApplicationRevisionStatus`.
"""
type CiipUserCiipUsersByApplicationRevisionStatusDeletedByAndCreatedByManyToManyEdge {
  """
  Reads and enables pagination through a set of `ApplicationRevisionStatus`.
  """
  applicationRevisionStatusesByCreatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ApplicationRevisionStatusCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ApplicationRevisionStatusFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `ApplicationRevisionStatus`."""
    orderBy: [ApplicationRevisionStatusesOrderBy!] = [PRIMARY_KEY_ASC]
  ): ApplicationRevisionStatusesConnection!

  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CiipUser` at the end of the edge."""
  node: CiipUser
}

"""
A connection to a list of `CiipUser` values, with data from `ApplicationRevisionStatus`.
"""
type CiipUserCiipUsersByApplicationRevisionStatusDeletedByAndUpdatedByManyToManyConnection {
  """
  A list of edges which contains the `CiipUser`, info from the
  `ApplicationRevisionStatus`, and the cursor to aid in pagination.
  """
  edges: [CiipUserCiipUsersByApplicationRevisionStatusDeletedByAndUpdatedByManyToManyEdge!]!

  """A list of `CiipUser` objects."""
  nodes: [CiipUser]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CiipUser` you could get from the connection."""
  totalCount: Int!
}

"""
A `CiipUser` edge in the connection, with data from `ApplicationRevisionStatus`.
"""
type CiipUserCiipUsersByApplicationRevisionStatusDeletedByAndUpdatedByManyToManyEdge {
  """
  Reads and enables pagination through a set of `ApplicationRevisionStatus`.
  """
  applicationRevisionStatusesByUpdatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ApplicationRevisionStatusCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ApplicationRevisionStatusFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `ApplicationRevisionStatus`."""
    orderBy: [ApplicationRevisionStatusesOrderBy!] = [PRIMARY_KEY_ASC]
  ): ApplicationRevisionStatusesConnection!

  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CiipUser` at the end of the edge."""
  node: CiipUser
}

"""
A connection to a list of `CiipUser` values, with data from `ApplicationRevisionStatus`.
"""
type CiipUserCiipUsersByApplicationRevisionStatusUpdatedByAndCreatedByManyToManyConnection {
  """
  A list of edges which contains the `CiipUser`, info from the
  `ApplicationRevisionStatus`, and the cursor to aid in pagination.
  """
  edges: [CiipUserCiipUsersByApplicationRevisionStatusUpdatedByAndCreatedByManyToManyEdge!]!

  """A list of `CiipUser` objects."""
  nodes: [CiipUser]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CiipUser` you could get from the connection."""
  totalCount: Int!
}

"""
A `CiipUser` edge in the connection, with data from `ApplicationRevisionStatus`.
"""
type CiipUserCiipUsersByApplicationRevisionStatusUpdatedByAndCreatedByManyToManyEdge {
  """
  Reads and enables pagination through a set of `ApplicationRevisionStatus`.
  """
  applicationRevisionStatusesByCreatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ApplicationRevisionStatusCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ApplicationRevisionStatusFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `ApplicationRevisionStatus`."""
    orderBy: [ApplicationRevisionStatusesOrderBy!] = [PRIMARY_KEY_ASC]
  ): ApplicationRevisionStatusesConnection!

  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CiipUser` at the end of the edge."""
  node: CiipUser
}

"""
A connection to a list of `CiipUser` values, with data from `ApplicationRevisionStatus`.
"""
type CiipUserCiipUsersByApplicationRevisionStatusUpdatedByAndDeletedByManyToManyConnection {
  """
  A list of edges which contains the `CiipUser`, info from the
  `ApplicationRevisionStatus`, and the cursor to aid in pagination.
  """
  edges: [CiipUserCiipUsersByApplicationRevisionStatusUpdatedByAndDeletedByManyToManyEdge!]!

  """A list of `CiipUser` objects."""
  nodes: [CiipUser]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CiipUser` you could get from the connection."""
  totalCount: Int!
}

"""
A `CiipUser` edge in the connection, with data from `ApplicationRevisionStatus`.
"""
type CiipUserCiipUsersByApplicationRevisionStatusUpdatedByAndDeletedByManyToManyEdge {
  """
  Reads and enables pagination through a set of `ApplicationRevisionStatus`.
  """
  applicationRevisionStatusesByDeletedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ApplicationRevisionStatusCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ApplicationRevisionStatusFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `ApplicationRevisionStatus`."""
    orderBy: [ApplicationRevisionStatusesOrderBy!] = [PRIMARY_KEY_ASC]
  ): ApplicationRevisionStatusesConnection!

  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CiipUser` at the end of the edge."""
  node: CiipUser
}

"""
A connection to a list of `CiipUser` values, with data from `ApplicationRevision`.
"""
type CiipUserCiipUsersByApplicationRevisionUpdatedByAndCreatedByManyToManyConnection {
  """
  A list of edges which contains the `CiipUser`, info from the `ApplicationRevision`, and the cursor to aid in pagination.
  """
  edges: [CiipUserCiipUsersByApplicationRevisionUpdatedByAndCreatedByManyToManyEdge!]!

  """A list of `CiipUser` objects."""
  nodes: [CiipUser]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CiipUser` you could get from the connection."""
  totalCount: Int!
}

"""
A `CiipUser` edge in the connection, with data from `ApplicationRevision`.
"""
type CiipUserCiipUsersByApplicationRevisionUpdatedByAndCreatedByManyToManyEdge {
  """Reads and enables pagination through a set of `ApplicationRevision`."""
  applicationRevisionsByCreatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ApplicationRevisionCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ApplicationRevisionFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `ApplicationRevision`."""
    orderBy: [ApplicationRevisionsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ApplicationRevisionsConnection!

  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CiipUser` at the end of the edge."""
  node: CiipUser
}

"""
A connection to a list of `CiipUser` values, with data from `ApplicationRevision`.
"""
type CiipUserCiipUsersByApplicationRevisionUpdatedByAndDeletedByManyToManyConnection {
  """
  A list of edges which contains the `CiipUser`, info from the `ApplicationRevision`, and the cursor to aid in pagination.
  """
  edges: [CiipUserCiipUsersByApplicationRevisionUpdatedByAndDeletedByManyToManyEdge!]!

  """A list of `CiipUser` objects."""
  nodes: [CiipUser]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CiipUser` you could get from the connection."""
  totalCount: Int!
}

"""
A `CiipUser` edge in the connection, with data from `ApplicationRevision`.
"""
type CiipUserCiipUsersByApplicationRevisionUpdatedByAndDeletedByManyToManyEdge {
  """Reads and enables pagination through a set of `ApplicationRevision`."""
  applicationRevisionsByDeletedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ApplicationRevisionCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ApplicationRevisionFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `ApplicationRevision`."""
    orderBy: [ApplicationRevisionsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ApplicationRevisionsConnection!

  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CiipUser` at the end of the edge."""
  node: CiipUser
}

"""
A connection to a list of `CiipUser` values, with data from `Benchmark`.
"""
type CiipUserCiipUsersByBenchmarkCreatedByAndDeletedByManyToManyConnection {
  """
  A list of edges which contains the `CiipUser`, info from the `Benchmark`, and the cursor to aid in pagination.
  """
  edges: [CiipUserCiipUsersByBenchmarkCreatedByAndDeletedByManyToManyEdge!]!

  """A list of `CiipUser` objects."""
  nodes: [CiipUser]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CiipUser` you could get from the connection."""
  totalCount: Int!
}

"""A `CiipUser` edge in the connection, with data from `Benchmark`."""
type CiipUserCiipUsersByBenchmarkCreatedByAndDeletedByManyToManyEdge {
  """Reads and enables pagination through a set of `Benchmark`."""
  benchmarksByDeletedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: BenchmarkCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: BenchmarkFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Benchmark`."""
    orderBy: [BenchmarksOrderBy!] = [PRIMARY_KEY_ASC]
  ): BenchmarksConnection!

  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CiipUser` at the end of the edge."""
  node: CiipUser
}

"""
A connection to a list of `CiipUser` values, with data from `Benchmark`.
"""
type CiipUserCiipUsersByBenchmarkCreatedByAndUpdatedByManyToManyConnection {
  """
  A list of edges which contains the `CiipUser`, info from the `Benchmark`, and the cursor to aid in pagination.
  """
  edges: [CiipUserCiipUsersByBenchmarkCreatedByAndUpdatedByManyToManyEdge!]!

  """A list of `CiipUser` objects."""
  nodes: [CiipUser]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CiipUser` you could get from the connection."""
  totalCount: Int!
}

"""A `CiipUser` edge in the connection, with data from `Benchmark`."""
type CiipUserCiipUsersByBenchmarkCreatedByAndUpdatedByManyToManyEdge {
  """Reads and enables pagination through a set of `Benchmark`."""
  benchmarksByUpdatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: BenchmarkCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: BenchmarkFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Benchmark`."""
    orderBy: [BenchmarksOrderBy!] = [PRIMARY_KEY_ASC]
  ): BenchmarksConnection!

  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CiipUser` at the end of the edge."""
  node: CiipUser
}

"""
A connection to a list of `CiipUser` values, with data from `Benchmark`.
"""
type CiipUserCiipUsersByBenchmarkDeletedByAndCreatedByManyToManyConnection {
  """
  A list of edges which contains the `CiipUser`, info from the `Benchmark`, and the cursor to aid in pagination.
  """
  edges: [CiipUserCiipUsersByBenchmarkDeletedByAndCreatedByManyToManyEdge!]!

  """A list of `CiipUser` objects."""
  nodes: [CiipUser]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CiipUser` you could get from the connection."""
  totalCount: Int!
}

"""A `CiipUser` edge in the connection, with data from `Benchmark`."""
type CiipUserCiipUsersByBenchmarkDeletedByAndCreatedByManyToManyEdge {
  """Reads and enables pagination through a set of `Benchmark`."""
  benchmarksByCreatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: BenchmarkCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: BenchmarkFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Benchmark`."""
    orderBy: [BenchmarksOrderBy!] = [PRIMARY_KEY_ASC]
  ): BenchmarksConnection!

  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CiipUser` at the end of the edge."""
  node: CiipUser
}

"""
A connection to a list of `CiipUser` values, with data from `Benchmark`.
"""
type CiipUserCiipUsersByBenchmarkDeletedByAndUpdatedByManyToManyConnection {
  """
  A list of edges which contains the `CiipUser`, info from the `Benchmark`, and the cursor to aid in pagination.
  """
  edges: [CiipUserCiipUsersByBenchmarkDeletedByAndUpdatedByManyToManyEdge!]!

  """A list of `CiipUser` objects."""
  nodes: [CiipUser]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CiipUser` you could get from the connection."""
  totalCount: Int!
}

"""A `CiipUser` edge in the connection, with data from `Benchmark`."""
type CiipUserCiipUsersByBenchmarkDeletedByAndUpdatedByManyToManyEdge {
  """Reads and enables pagination through a set of `Benchmark`."""
  benchmarksByUpdatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: BenchmarkCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: BenchmarkFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Benchmark`."""
    orderBy: [BenchmarksOrderBy!] = [PRIMARY_KEY_ASC]
  ): BenchmarksConnection!

  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CiipUser` at the end of the edge."""
  node: CiipUser
}

"""
A connection to a list of `CiipUser` values, with data from `Benchmark`.
"""
type CiipUserCiipUsersByBenchmarkUpdatedByAndCreatedByManyToManyConnection {
  """
  A list of edges which contains the `CiipUser`, info from the `Benchmark`, and the cursor to aid in pagination.
  """
  edges: [CiipUserCiipUsersByBenchmarkUpdatedByAndCreatedByManyToManyEdge!]!

  """A list of `CiipUser` objects."""
  nodes: [CiipUser]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CiipUser` you could get from the connection."""
  totalCount: Int!
}

"""A `CiipUser` edge in the connection, with data from `Benchmark`."""
type CiipUserCiipUsersByBenchmarkUpdatedByAndCreatedByManyToManyEdge {
  """Reads and enables pagination through a set of `Benchmark`."""
  benchmarksByCreatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: BenchmarkCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: BenchmarkFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Benchmark`."""
    orderBy: [BenchmarksOrderBy!] = [PRIMARY_KEY_ASC]
  ): BenchmarksConnection!

  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CiipUser` at the end of the edge."""
  node: CiipUser
}

"""
A connection to a list of `CiipUser` values, with data from `Benchmark`.
"""
type CiipUserCiipUsersByBenchmarkUpdatedByAndDeletedByManyToManyConnection {
  """
  A list of edges which contains the `CiipUser`, info from the `Benchmark`, and the cursor to aid in pagination.
  """
  edges: [CiipUserCiipUsersByBenchmarkUpdatedByAndDeletedByManyToManyEdge!]!

  """A list of `CiipUser` objects."""
  nodes: [CiipUser]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CiipUser` you could get from the connection."""
  totalCount: Int!
}

"""A `CiipUser` edge in the connection, with data from `Benchmark`."""
type CiipUserCiipUsersByBenchmarkUpdatedByAndDeletedByManyToManyEdge {
  """Reads and enables pagination through a set of `Benchmark`."""
  benchmarksByDeletedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: BenchmarkCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: BenchmarkFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Benchmark`."""
    orderBy: [BenchmarksOrderBy!] = [PRIMARY_KEY_ASC]
  ): BenchmarksConnection!

  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CiipUser` at the end of the edge."""
  node: CiipUser
}

"""
A connection to a list of `CiipUser` values, with data from `CertificationUrl`.
"""
type CiipUserCiipUsersByCertificationUrlCertifiedByAndCreatedByManyToManyConnection {
  """
  A list of edges which contains the `CiipUser`, info from the `CertificationUrl`, and the cursor to aid in pagination.
  """
  edges: [CiipUserCiipUsersByCertificationUrlCertifiedByAndCreatedByManyToManyEdge!]!

  """A list of `CiipUser` objects."""
  nodes: [CiipUser]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CiipUser` you could get from the connection."""
  totalCount: Int!
}

"""
A `CiipUser` edge in the connection, with data from `CertificationUrl`.
"""
type CiipUserCiipUsersByCertificationUrlCertifiedByAndCreatedByManyToManyEdge {
  """Reads and enables pagination through a set of `CertificationUrl`."""
  certificationUrlsByCreatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CertificationUrlCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CertificationUrlFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CertificationUrl`."""
    orderBy: [CertificationUrlsOrderBy!] = [PRIMARY_KEY_ASC]
  ): CertificationUrlsConnection!

  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CiipUser` at the end of the edge."""
  node: CiipUser
}

"""
A connection to a list of `CiipUser` values, with data from `CertificationUrl`.
"""
type CiipUserCiipUsersByCertificationUrlCertifiedByAndDeletedByManyToManyConnection {
  """
  A list of edges which contains the `CiipUser`, info from the `CertificationUrl`, and the cursor to aid in pagination.
  """
  edges: [CiipUserCiipUsersByCertificationUrlCertifiedByAndDeletedByManyToManyEdge!]!

  """A list of `CiipUser` objects."""
  nodes: [CiipUser]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CiipUser` you could get from the connection."""
  totalCount: Int!
}

"""
A `CiipUser` edge in the connection, with data from `CertificationUrl`.
"""
type CiipUserCiipUsersByCertificationUrlCertifiedByAndDeletedByManyToManyEdge {
  """Reads and enables pagination through a set of `CertificationUrl`."""
  certificationUrlsByDeletedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CertificationUrlCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CertificationUrlFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CertificationUrl`."""
    orderBy: [CertificationUrlsOrderBy!] = [PRIMARY_KEY_ASC]
  ): CertificationUrlsConnection!

  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CiipUser` at the end of the edge."""
  node: CiipUser
}

"""
A connection to a list of `CiipUser` values, with data from `CertificationUrl`.
"""
type CiipUserCiipUsersByCertificationUrlCertifiedByAndUpdatedByManyToManyConnection {
  """
  A list of edges which contains the `CiipUser`, info from the `CertificationUrl`, and the cursor to aid in pagination.
  """
  edges: [CiipUserCiipUsersByCertificationUrlCertifiedByAndUpdatedByManyToManyEdge!]!

  """A list of `CiipUser` objects."""
  nodes: [CiipUser]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CiipUser` you could get from the connection."""
  totalCount: Int!
}

"""
A `CiipUser` edge in the connection, with data from `CertificationUrl`.
"""
type CiipUserCiipUsersByCertificationUrlCertifiedByAndUpdatedByManyToManyEdge {
  """Reads and enables pagination through a set of `CertificationUrl`."""
  certificationUrlsByUpdatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CertificationUrlCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CertificationUrlFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CertificationUrl`."""
    orderBy: [CertificationUrlsOrderBy!] = [PRIMARY_KEY_ASC]
  ): CertificationUrlsConnection!

  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CiipUser` at the end of the edge."""
  node: CiipUser
}

"""
A connection to a list of `CiipUser` values, with data from `CertificationUrl`.
"""
type CiipUserCiipUsersByCertificationUrlCreatedByAndCertifiedByManyToManyConnection {
  """
  A list of edges which contains the `CiipUser`, info from the `CertificationUrl`, and the cursor to aid in pagination.
  """
  edges: [CiipUserCiipUsersByCertificationUrlCreatedByAndCertifiedByManyToManyEdge!]!

  """A list of `CiipUser` objects."""
  nodes: [CiipUser]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CiipUser` you could get from the connection."""
  totalCount: Int!
}

"""
A `CiipUser` edge in the connection, with data from `CertificationUrl`.
"""
type CiipUserCiipUsersByCertificationUrlCreatedByAndCertifiedByManyToManyEdge {
  """Reads and enables pagination through a set of `CertificationUrl`."""
  certificationUrlsByCertifiedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CertificationUrlCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CertificationUrlFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CertificationUrl`."""
    orderBy: [CertificationUrlsOrderBy!] = [PRIMARY_KEY_ASC]
  ): CertificationUrlsConnection!

  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CiipUser` at the end of the edge."""
  node: CiipUser
}

"""
A connection to a list of `CiipUser` values, with data from `CertificationUrl`.
"""
type CiipUserCiipUsersByCertificationUrlCreatedByAndDeletedByManyToManyConnection {
  """
  A list of edges which contains the `CiipUser`, info from the `CertificationUrl`, and the cursor to aid in pagination.
  """
  edges: [CiipUserCiipUsersByCertificationUrlCreatedByAndDeletedByManyToManyEdge!]!

  """A list of `CiipUser` objects."""
  nodes: [CiipUser]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CiipUser` you could get from the connection."""
  totalCount: Int!
}

"""
A `CiipUser` edge in the connection, with data from `CertificationUrl`.
"""
type CiipUserCiipUsersByCertificationUrlCreatedByAndDeletedByManyToManyEdge {
  """Reads and enables pagination through a set of `CertificationUrl`."""
  certificationUrlsByDeletedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CertificationUrlCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CertificationUrlFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CertificationUrl`."""
    orderBy: [CertificationUrlsOrderBy!] = [PRIMARY_KEY_ASC]
  ): CertificationUrlsConnection!

  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CiipUser` at the end of the edge."""
  node: CiipUser
}

"""
A connection to a list of `CiipUser` values, with data from `CertificationUrl`.
"""
type CiipUserCiipUsersByCertificationUrlCreatedByAndUpdatedByManyToManyConnection {
  """
  A list of edges which contains the `CiipUser`, info from the `CertificationUrl`, and the cursor to aid in pagination.
  """
  edges: [CiipUserCiipUsersByCertificationUrlCreatedByAndUpdatedByManyToManyEdge!]!

  """A list of `CiipUser` objects."""
  nodes: [CiipUser]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CiipUser` you could get from the connection."""
  totalCount: Int!
}

"""
A `CiipUser` edge in the connection, with data from `CertificationUrl`.
"""
type CiipUserCiipUsersByCertificationUrlCreatedByAndUpdatedByManyToManyEdge {
  """Reads and enables pagination through a set of `CertificationUrl`."""
  certificationUrlsByUpdatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CertificationUrlCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CertificationUrlFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CertificationUrl`."""
    orderBy: [CertificationUrlsOrderBy!] = [PRIMARY_KEY_ASC]
  ): CertificationUrlsConnection!

  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CiipUser` at the end of the edge."""
  node: CiipUser
}

"""
A connection to a list of `CiipUser` values, with data from `CertificationUrl`.
"""
type CiipUserCiipUsersByCertificationUrlDeletedByAndCertifiedByManyToManyConnection {
  """
  A list of edges which contains the `CiipUser`, info from the `CertificationUrl`, and the cursor to aid in pagination.
  """
  edges: [CiipUserCiipUsersByCertificationUrlDeletedByAndCertifiedByManyToManyEdge!]!

  """A list of `CiipUser` objects."""
  nodes: [CiipUser]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CiipUser` you could get from the connection."""
  totalCount: Int!
}

"""
A `CiipUser` edge in the connection, with data from `CertificationUrl`.
"""
type CiipUserCiipUsersByCertificationUrlDeletedByAndCertifiedByManyToManyEdge {
  """Reads and enables pagination through a set of `CertificationUrl`."""
  certificationUrlsByCertifiedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CertificationUrlCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CertificationUrlFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CertificationUrl`."""
    orderBy: [CertificationUrlsOrderBy!] = [PRIMARY_KEY_ASC]
  ): CertificationUrlsConnection!

  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CiipUser` at the end of the edge."""
  node: CiipUser
}

"""
A connection to a list of `CiipUser` values, with data from `CertificationUrl`.
"""
type CiipUserCiipUsersByCertificationUrlDeletedByAndCreatedByManyToManyConnection {
  """
  A list of edges which contains the `CiipUser`, info from the `CertificationUrl`, and the cursor to aid in pagination.
  """
  edges: [CiipUserCiipUsersByCertificationUrlDeletedByAndCreatedByManyToManyEdge!]!

  """A list of `CiipUser` objects."""
  nodes: [CiipUser]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CiipUser` you could get from the connection."""
  totalCount: Int!
}

"""
A `CiipUser` edge in the connection, with data from `CertificationUrl`.
"""
type CiipUserCiipUsersByCertificationUrlDeletedByAndCreatedByManyToManyEdge {
  """Reads and enables pagination through a set of `CertificationUrl`."""
  certificationUrlsByCreatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CertificationUrlCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CertificationUrlFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CertificationUrl`."""
    orderBy: [CertificationUrlsOrderBy!] = [PRIMARY_KEY_ASC]
  ): CertificationUrlsConnection!

  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CiipUser` at the end of the edge."""
  node: CiipUser
}

"""
A connection to a list of `CiipUser` values, with data from `CertificationUrl`.
"""
type CiipUserCiipUsersByCertificationUrlDeletedByAndUpdatedByManyToManyConnection {
  """
  A list of edges which contains the `CiipUser`, info from the `CertificationUrl`, and the cursor to aid in pagination.
  """
  edges: [CiipUserCiipUsersByCertificationUrlDeletedByAndUpdatedByManyToManyEdge!]!

  """A list of `CiipUser` objects."""
  nodes: [CiipUser]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CiipUser` you could get from the connection."""
  totalCount: Int!
}

"""
A `CiipUser` edge in the connection, with data from `CertificationUrl`.
"""
type CiipUserCiipUsersByCertificationUrlDeletedByAndUpdatedByManyToManyEdge {
  """Reads and enables pagination through a set of `CertificationUrl`."""
  certificationUrlsByUpdatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CertificationUrlCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CertificationUrlFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CertificationUrl`."""
    orderBy: [CertificationUrlsOrderBy!] = [PRIMARY_KEY_ASC]
  ): CertificationUrlsConnection!

  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CiipUser` at the end of the edge."""
  node: CiipUser
}

"""
A connection to a list of `CiipUser` values, with data from `CertificationUrl`.
"""
type CiipUserCiipUsersByCertificationUrlUpdatedByAndCertifiedByManyToManyConnection {
  """
  A list of edges which contains the `CiipUser`, info from the `CertificationUrl`, and the cursor to aid in pagination.
  """
  edges: [CiipUserCiipUsersByCertificationUrlUpdatedByAndCertifiedByManyToManyEdge!]!

  """A list of `CiipUser` objects."""
  nodes: [CiipUser]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CiipUser` you could get from the connection."""
  totalCount: Int!
}

"""
A `CiipUser` edge in the connection, with data from `CertificationUrl`.
"""
type CiipUserCiipUsersByCertificationUrlUpdatedByAndCertifiedByManyToManyEdge {
  """Reads and enables pagination through a set of `CertificationUrl`."""
  certificationUrlsByCertifiedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CertificationUrlCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CertificationUrlFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CertificationUrl`."""
    orderBy: [CertificationUrlsOrderBy!] = [PRIMARY_KEY_ASC]
  ): CertificationUrlsConnection!

  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CiipUser` at the end of the edge."""
  node: CiipUser
}

"""
A connection to a list of `CiipUser` values, with data from `CertificationUrl`.
"""
type CiipUserCiipUsersByCertificationUrlUpdatedByAndCreatedByManyToManyConnection {
  """
  A list of edges which contains the `CiipUser`, info from the `CertificationUrl`, and the cursor to aid in pagination.
  """
  edges: [CiipUserCiipUsersByCertificationUrlUpdatedByAndCreatedByManyToManyEdge!]!

  """A list of `CiipUser` objects."""
  nodes: [CiipUser]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CiipUser` you could get from the connection."""
  totalCount: Int!
}

"""
A `CiipUser` edge in the connection, with data from `CertificationUrl`.
"""
type CiipUserCiipUsersByCertificationUrlUpdatedByAndCreatedByManyToManyEdge {
  """Reads and enables pagination through a set of `CertificationUrl`."""
  certificationUrlsByCreatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CertificationUrlCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CertificationUrlFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CertificationUrl`."""
    orderBy: [CertificationUrlsOrderBy!] = [PRIMARY_KEY_ASC]
  ): CertificationUrlsConnection!

  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CiipUser` at the end of the edge."""
  node: CiipUser
}

"""
A connection to a list of `CiipUser` values, with data from `CertificationUrl`.
"""
type CiipUserCiipUsersByCertificationUrlUpdatedByAndDeletedByManyToManyConnection {
  """
  A list of edges which contains the `CiipUser`, info from the `CertificationUrl`, and the cursor to aid in pagination.
  """
  edges: [CiipUserCiipUsersByCertificationUrlUpdatedByAndDeletedByManyToManyEdge!]!

  """A list of `CiipUser` objects."""
  nodes: [CiipUser]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CiipUser` you could get from the connection."""
  totalCount: Int!
}

"""
A `CiipUser` edge in the connection, with data from `CertificationUrl`.
"""
type CiipUserCiipUsersByCertificationUrlUpdatedByAndDeletedByManyToManyEdge {
  """Reads and enables pagination through a set of `CertificationUrl`."""
  certificationUrlsByDeletedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CertificationUrlCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CertificationUrlFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CertificationUrl`."""
    orderBy: [CertificationUrlsOrderBy!] = [PRIMARY_KEY_ASC]
  ): CertificationUrlsConnection!

  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CiipUser` at the end of the edge."""
  node: CiipUser
}

"""
A connection to a list of `CiipUser` values, with data from `CiipUser`.
"""
type CiipUserCiipUsersByCiipUserCreatedByAndDeletedByManyToManyConnection {
  """
  A list of edges which contains the `CiipUser`, info from the `CiipUser`, and the cursor to aid in pagination.
  """
  edges: [CiipUserCiipUsersByCiipUserCreatedByAndDeletedByManyToManyEdge!]!

  """A list of `CiipUser` objects."""
  nodes: [CiipUser]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CiipUser` you could get from the connection."""
  totalCount: Int!
}

"""A `CiipUser` edge in the connection, with data from `CiipUser`."""
type CiipUserCiipUsersByCiipUserCreatedByAndDeletedByManyToManyEdge {
  """Reads and enables pagination through a set of `CiipUser`."""
  ciipUsersByDeletedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CiipUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CiipUserFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CiipUser`."""
    orderBy: [CiipUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): CiipUsersConnection!

  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CiipUser` at the end of the edge."""
  node: CiipUser
}

"""
A connection to a list of `CiipUser` values, with data from `CiipUser`.
"""
type CiipUserCiipUsersByCiipUserCreatedByAndUpdatedByManyToManyConnection {
  """
  A list of edges which contains the `CiipUser`, info from the `CiipUser`, and the cursor to aid in pagination.
  """
  edges: [CiipUserCiipUsersByCiipUserCreatedByAndUpdatedByManyToManyEdge!]!

  """A list of `CiipUser` objects."""
  nodes: [CiipUser]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CiipUser` you could get from the connection."""
  totalCount: Int!
}

"""A `CiipUser` edge in the connection, with data from `CiipUser`."""
type CiipUserCiipUsersByCiipUserCreatedByAndUpdatedByManyToManyEdge {
  """Reads and enables pagination through a set of `CiipUser`."""
  ciipUsersByUpdatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CiipUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CiipUserFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CiipUser`."""
    orderBy: [CiipUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): CiipUsersConnection!

  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CiipUser` at the end of the edge."""
  node: CiipUser
}

"""
A connection to a list of `CiipUser` values, with data from `CiipUser`.
"""
type CiipUserCiipUsersByCiipUserDeletedByAndCreatedByManyToManyConnection {
  """
  A list of edges which contains the `CiipUser`, info from the `CiipUser`, and the cursor to aid in pagination.
  """
  edges: [CiipUserCiipUsersByCiipUserDeletedByAndCreatedByManyToManyEdge!]!

  """A list of `CiipUser` objects."""
  nodes: [CiipUser]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CiipUser` you could get from the connection."""
  totalCount: Int!
}

"""A `CiipUser` edge in the connection, with data from `CiipUser`."""
type CiipUserCiipUsersByCiipUserDeletedByAndCreatedByManyToManyEdge {
  """Reads and enables pagination through a set of `CiipUser`."""
  ciipUsersByCreatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CiipUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CiipUserFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CiipUser`."""
    orderBy: [CiipUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): CiipUsersConnection!

  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CiipUser` at the end of the edge."""
  node: CiipUser
}

"""
A connection to a list of `CiipUser` values, with data from `CiipUser`.
"""
type CiipUserCiipUsersByCiipUserDeletedByAndUpdatedByManyToManyConnection {
  """
  A list of edges which contains the `CiipUser`, info from the `CiipUser`, and the cursor to aid in pagination.
  """
  edges: [CiipUserCiipUsersByCiipUserDeletedByAndUpdatedByManyToManyEdge!]!

  """A list of `CiipUser` objects."""
  nodes: [CiipUser]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CiipUser` you could get from the connection."""
  totalCount: Int!
}

"""A `CiipUser` edge in the connection, with data from `CiipUser`."""
type CiipUserCiipUsersByCiipUserDeletedByAndUpdatedByManyToManyEdge {
  """Reads and enables pagination through a set of `CiipUser`."""
  ciipUsersByUpdatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CiipUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CiipUserFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CiipUser`."""
    orderBy: [CiipUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): CiipUsersConnection!

  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CiipUser` at the end of the edge."""
  node: CiipUser
}

"""
A connection to a list of `CiipUser` values, with data from `CiipUser`.
"""
type CiipUserCiipUsersByCiipUserUpdatedByAndCreatedByManyToManyConnection {
  """
  A list of edges which contains the `CiipUser`, info from the `CiipUser`, and the cursor to aid in pagination.
  """
  edges: [CiipUserCiipUsersByCiipUserUpdatedByAndCreatedByManyToManyEdge!]!

  """A list of `CiipUser` objects."""
  nodes: [CiipUser]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CiipUser` you could get from the connection."""
  totalCount: Int!
}

"""A `CiipUser` edge in the connection, with data from `CiipUser`."""
type CiipUserCiipUsersByCiipUserUpdatedByAndCreatedByManyToManyEdge {
  """Reads and enables pagination through a set of `CiipUser`."""
  ciipUsersByCreatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CiipUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CiipUserFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CiipUser`."""
    orderBy: [CiipUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): CiipUsersConnection!

  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CiipUser` at the end of the edge."""
  node: CiipUser
}

"""
A connection to a list of `CiipUser` values, with data from `CiipUser`.
"""
type CiipUserCiipUsersByCiipUserUpdatedByAndDeletedByManyToManyConnection {
  """
  A list of edges which contains the `CiipUser`, info from the `CiipUser`, and the cursor to aid in pagination.
  """
  edges: [CiipUserCiipUsersByCiipUserUpdatedByAndDeletedByManyToManyEdge!]!

  """A list of `CiipUser` objects."""
  nodes: [CiipUser]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CiipUser` you could get from the connection."""
  totalCount: Int!
}

"""A `CiipUser` edge in the connection, with data from `CiipUser`."""
type CiipUserCiipUsersByCiipUserUpdatedByAndDeletedByManyToManyEdge {
  """Reads and enables pagination through a set of `CiipUser`."""
  ciipUsersByDeletedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CiipUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CiipUserFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CiipUser`."""
    orderBy: [CiipUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): CiipUsersConnection!

  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CiipUser` at the end of the edge."""
  node: CiipUser
}

"""
A connection to a list of `CiipUser` values, with data from `EmissionCategory`.
"""
type CiipUserCiipUsersByEmissionCategoryCreatedByAndDeletedByManyToManyConnection {
  """
  A list of edges which contains the `CiipUser`, info from the `EmissionCategory`, and the cursor to aid in pagination.
  """
  edges: [CiipUserCiipUsersByEmissionCategoryCreatedByAndDeletedByManyToManyEdge!]!

  """A list of `CiipUser` objects."""
  nodes: [CiipUser]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CiipUser` you could get from the connection."""
  totalCount: Int!
}

"""
A `CiipUser` edge in the connection, with data from `EmissionCategory`.
"""
type CiipUserCiipUsersByEmissionCategoryCreatedByAndDeletedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """Reads and enables pagination through a set of `EmissionCategory`."""
  emissionCategoriesByDeletedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: EmissionCategoryCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: EmissionCategoryFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `EmissionCategory`."""
    orderBy: [EmissionCategoriesOrderBy!] = [PRIMARY_KEY_ASC]
  ): EmissionCategoriesConnection!

  """The `CiipUser` at the end of the edge."""
  node: CiipUser
}

"""
A connection to a list of `CiipUser` values, with data from `EmissionCategory`.
"""
type CiipUserCiipUsersByEmissionCategoryCreatedByAndUpdatedByManyToManyConnection {
  """
  A list of edges which contains the `CiipUser`, info from the `EmissionCategory`, and the cursor to aid in pagination.
  """
  edges: [CiipUserCiipUsersByEmissionCategoryCreatedByAndUpdatedByManyToManyEdge!]!

  """A list of `CiipUser` objects."""
  nodes: [CiipUser]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CiipUser` you could get from the connection."""
  totalCount: Int!
}

"""
A `CiipUser` edge in the connection, with data from `EmissionCategory`.
"""
type CiipUserCiipUsersByEmissionCategoryCreatedByAndUpdatedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """Reads and enables pagination through a set of `EmissionCategory`."""
  emissionCategoriesByUpdatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: EmissionCategoryCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: EmissionCategoryFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `EmissionCategory`."""
    orderBy: [EmissionCategoriesOrderBy!] = [PRIMARY_KEY_ASC]
  ): EmissionCategoriesConnection!

  """The `CiipUser` at the end of the edge."""
  node: CiipUser
}

"""
A connection to a list of `CiipUser` values, with data from `EmissionCategory`.
"""
type CiipUserCiipUsersByEmissionCategoryDeletedByAndCreatedByManyToManyConnection {
  """
  A list of edges which contains the `CiipUser`, info from the `EmissionCategory`, and the cursor to aid in pagination.
  """
  edges: [CiipUserCiipUsersByEmissionCategoryDeletedByAndCreatedByManyToManyEdge!]!

  """A list of `CiipUser` objects."""
  nodes: [CiipUser]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CiipUser` you could get from the connection."""
  totalCount: Int!
}

"""
A `CiipUser` edge in the connection, with data from `EmissionCategory`.
"""
type CiipUserCiipUsersByEmissionCategoryDeletedByAndCreatedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """Reads and enables pagination through a set of `EmissionCategory`."""
  emissionCategoriesByCreatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: EmissionCategoryCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: EmissionCategoryFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `EmissionCategory`."""
    orderBy: [EmissionCategoriesOrderBy!] = [PRIMARY_KEY_ASC]
  ): EmissionCategoriesConnection!

  """The `CiipUser` at the end of the edge."""
  node: CiipUser
}

"""
A connection to a list of `CiipUser` values, with data from `EmissionCategory`.
"""
type CiipUserCiipUsersByEmissionCategoryDeletedByAndUpdatedByManyToManyConnection {
  """
  A list of edges which contains the `CiipUser`, info from the `EmissionCategory`, and the cursor to aid in pagination.
  """
  edges: [CiipUserCiipUsersByEmissionCategoryDeletedByAndUpdatedByManyToManyEdge!]!

  """A list of `CiipUser` objects."""
  nodes: [CiipUser]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CiipUser` you could get from the connection."""
  totalCount: Int!
}

"""
A `CiipUser` edge in the connection, with data from `EmissionCategory`.
"""
type CiipUserCiipUsersByEmissionCategoryDeletedByAndUpdatedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """Reads and enables pagination through a set of `EmissionCategory`."""
  emissionCategoriesByUpdatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: EmissionCategoryCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: EmissionCategoryFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `EmissionCategory`."""
    orderBy: [EmissionCategoriesOrderBy!] = [PRIMARY_KEY_ASC]
  ): EmissionCategoriesConnection!

  """The `CiipUser` at the end of the edge."""
  node: CiipUser
}

"""
A connection to a list of `CiipUser` values, with data from `EmissionCategoryGas`.
"""
type CiipUserCiipUsersByEmissionCategoryGasCreatedByAndDeletedByManyToManyConnection {
  """
  A list of edges which contains the `CiipUser`, info from the `EmissionCategoryGas`, and the cursor to aid in pagination.
  """
  edges: [CiipUserCiipUsersByEmissionCategoryGasCreatedByAndDeletedByManyToManyEdge!]!

  """A list of `CiipUser` objects."""
  nodes: [CiipUser]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CiipUser` you could get from the connection."""
  totalCount: Int!
}

"""
A `CiipUser` edge in the connection, with data from `EmissionCategoryGas`.
"""
type CiipUserCiipUsersByEmissionCategoryGasCreatedByAndDeletedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """Reads and enables pagination through a set of `EmissionCategoryGas`."""
  emissionCategoryGasesByDeletedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: EmissionCategoryGasCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: EmissionCategoryGasFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `EmissionCategoryGas`."""
    orderBy: [EmissionCategoryGasesOrderBy!] = [PRIMARY_KEY_ASC]
  ): EmissionCategoryGasesConnection!

  """The `CiipUser` at the end of the edge."""
  node: CiipUser
}

"""
A connection to a list of `CiipUser` values, with data from `EmissionCategoryGas`.
"""
type CiipUserCiipUsersByEmissionCategoryGasCreatedByAndUpdatedByManyToManyConnection {
  """
  A list of edges which contains the `CiipUser`, info from the `EmissionCategoryGas`, and the cursor to aid in pagination.
  """
  edges: [CiipUserCiipUsersByEmissionCategoryGasCreatedByAndUpdatedByManyToManyEdge!]!

  """A list of `CiipUser` objects."""
  nodes: [CiipUser]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CiipUser` you could get from the connection."""
  totalCount: Int!
}

"""
A `CiipUser` edge in the connection, with data from `EmissionCategoryGas`.
"""
type CiipUserCiipUsersByEmissionCategoryGasCreatedByAndUpdatedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """Reads and enables pagination through a set of `EmissionCategoryGas`."""
  emissionCategoryGasesByUpdatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: EmissionCategoryGasCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: EmissionCategoryGasFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `EmissionCategoryGas`."""
    orderBy: [EmissionCategoryGasesOrderBy!] = [PRIMARY_KEY_ASC]
  ): EmissionCategoryGasesConnection!

  """The `CiipUser` at the end of the edge."""
  node: CiipUser
}

"""
A connection to a list of `CiipUser` values, with data from `EmissionCategoryGas`.
"""
type CiipUserCiipUsersByEmissionCategoryGasDeletedByAndCreatedByManyToManyConnection {
  """
  A list of edges which contains the `CiipUser`, info from the `EmissionCategoryGas`, and the cursor to aid in pagination.
  """
  edges: [CiipUserCiipUsersByEmissionCategoryGasDeletedByAndCreatedByManyToManyEdge!]!

  """A list of `CiipUser` objects."""
  nodes: [CiipUser]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CiipUser` you could get from the connection."""
  totalCount: Int!
}

"""
A `CiipUser` edge in the connection, with data from `EmissionCategoryGas`.
"""
type CiipUserCiipUsersByEmissionCategoryGasDeletedByAndCreatedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """Reads and enables pagination through a set of `EmissionCategoryGas`."""
  emissionCategoryGasesByCreatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: EmissionCategoryGasCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: EmissionCategoryGasFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `EmissionCategoryGas`."""
    orderBy: [EmissionCategoryGasesOrderBy!] = [PRIMARY_KEY_ASC]
  ): EmissionCategoryGasesConnection!

  """The `CiipUser` at the end of the edge."""
  node: CiipUser
}

"""
A connection to a list of `CiipUser` values, with data from `EmissionCategoryGas`.
"""
type CiipUserCiipUsersByEmissionCategoryGasDeletedByAndUpdatedByManyToManyConnection {
  """
  A list of edges which contains the `CiipUser`, info from the `EmissionCategoryGas`, and the cursor to aid in pagination.
  """
  edges: [CiipUserCiipUsersByEmissionCategoryGasDeletedByAndUpdatedByManyToManyEdge!]!

  """A list of `CiipUser` objects."""
  nodes: [CiipUser]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CiipUser` you could get from the connection."""
  totalCount: Int!
}

"""
A `CiipUser` edge in the connection, with data from `EmissionCategoryGas`.
"""
type CiipUserCiipUsersByEmissionCategoryGasDeletedByAndUpdatedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """Reads and enables pagination through a set of `EmissionCategoryGas`."""
  emissionCategoryGasesByUpdatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: EmissionCategoryGasCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: EmissionCategoryGasFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `EmissionCategoryGas`."""
    orderBy: [EmissionCategoryGasesOrderBy!] = [PRIMARY_KEY_ASC]
  ): EmissionCategoryGasesConnection!

  """The `CiipUser` at the end of the edge."""
  node: CiipUser
}

"""
A connection to a list of `CiipUser` values, with data from `EmissionCategoryGas`.
"""
type CiipUserCiipUsersByEmissionCategoryGasUpdatedByAndCreatedByManyToManyConnection {
  """
  A list of edges which contains the `CiipUser`, info from the `EmissionCategoryGas`, and the cursor to aid in pagination.
  """
  edges: [CiipUserCiipUsersByEmissionCategoryGasUpdatedByAndCreatedByManyToManyEdge!]!

  """A list of `CiipUser` objects."""
  nodes: [CiipUser]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CiipUser` you could get from the connection."""
  totalCount: Int!
}

"""
A `CiipUser` edge in the connection, with data from `EmissionCategoryGas`.
"""
type CiipUserCiipUsersByEmissionCategoryGasUpdatedByAndCreatedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """Reads and enables pagination through a set of `EmissionCategoryGas`."""
  emissionCategoryGasesByCreatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: EmissionCategoryGasCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: EmissionCategoryGasFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `EmissionCategoryGas`."""
    orderBy: [EmissionCategoryGasesOrderBy!] = [PRIMARY_KEY_ASC]
  ): EmissionCategoryGasesConnection!

  """The `CiipUser` at the end of the edge."""
  node: CiipUser
}

"""
A connection to a list of `CiipUser` values, with data from `EmissionCategoryGas`.
"""
type CiipUserCiipUsersByEmissionCategoryGasUpdatedByAndDeletedByManyToManyConnection {
  """
  A list of edges which contains the `CiipUser`, info from the `EmissionCategoryGas`, and the cursor to aid in pagination.
  """
  edges: [CiipUserCiipUsersByEmissionCategoryGasUpdatedByAndDeletedByManyToManyEdge!]!

  """A list of `CiipUser` objects."""
  nodes: [CiipUser]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CiipUser` you could get from the connection."""
  totalCount: Int!
}

"""
A `CiipUser` edge in the connection, with data from `EmissionCategoryGas`.
"""
type CiipUserCiipUsersByEmissionCategoryGasUpdatedByAndDeletedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """Reads and enables pagination through a set of `EmissionCategoryGas`."""
  emissionCategoryGasesByDeletedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: EmissionCategoryGasCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: EmissionCategoryGasFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `EmissionCategoryGas`."""
    orderBy: [EmissionCategoryGasesOrderBy!] = [PRIMARY_KEY_ASC]
  ): EmissionCategoryGasesConnection!

  """The `CiipUser` at the end of the edge."""
  node: CiipUser
}

"""
A connection to a list of `CiipUser` values, with data from `EmissionCategory`.
"""
type CiipUserCiipUsersByEmissionCategoryUpdatedByAndCreatedByManyToManyConnection {
  """
  A list of edges which contains the `CiipUser`, info from the `EmissionCategory`, and the cursor to aid in pagination.
  """
  edges: [CiipUserCiipUsersByEmissionCategoryUpdatedByAndCreatedByManyToManyEdge!]!

  """A list of `CiipUser` objects."""
  nodes: [CiipUser]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CiipUser` you could get from the connection."""
  totalCount: Int!
}

"""
A `CiipUser` edge in the connection, with data from `EmissionCategory`.
"""
type CiipUserCiipUsersByEmissionCategoryUpdatedByAndCreatedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """Reads and enables pagination through a set of `EmissionCategory`."""
  emissionCategoriesByCreatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: EmissionCategoryCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: EmissionCategoryFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `EmissionCategory`."""
    orderBy: [EmissionCategoriesOrderBy!] = [PRIMARY_KEY_ASC]
  ): EmissionCategoriesConnection!

  """The `CiipUser` at the end of the edge."""
  node: CiipUser
}

"""
A connection to a list of `CiipUser` values, with data from `EmissionCategory`.
"""
type CiipUserCiipUsersByEmissionCategoryUpdatedByAndDeletedByManyToManyConnection {
  """
  A list of edges which contains the `CiipUser`, info from the `EmissionCategory`, and the cursor to aid in pagination.
  """
  edges: [CiipUserCiipUsersByEmissionCategoryUpdatedByAndDeletedByManyToManyEdge!]!

  """A list of `CiipUser` objects."""
  nodes: [CiipUser]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CiipUser` you could get from the connection."""
  totalCount: Int!
}

"""
A `CiipUser` edge in the connection, with data from `EmissionCategory`.
"""
type CiipUserCiipUsersByEmissionCategoryUpdatedByAndDeletedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """Reads and enables pagination through a set of `EmissionCategory`."""
  emissionCategoriesByDeletedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: EmissionCategoryCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: EmissionCategoryFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `EmissionCategory`."""
    orderBy: [EmissionCategoriesOrderBy!] = [PRIMARY_KEY_ASC]
  ): EmissionCategoriesConnection!

  """The `CiipUser` at the end of the edge."""
  node: CiipUser
}

"""
A connection to a list of `CiipUser` values, with data from `FormJson`.
"""
type CiipUserCiipUsersByFormJsonCreatedByAndDeletedByManyToManyConnection {
  """
  A list of edges which contains the `CiipUser`, info from the `FormJson`, and the cursor to aid in pagination.
  """
  edges: [CiipUserCiipUsersByFormJsonCreatedByAndDeletedByManyToManyEdge!]!

  """A list of `CiipUser` objects."""
  nodes: [CiipUser]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CiipUser` you could get from the connection."""
  totalCount: Int!
}

"""A `CiipUser` edge in the connection, with data from `FormJson`."""
type CiipUserCiipUsersByFormJsonCreatedByAndDeletedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """Reads and enables pagination through a set of `FormJson`."""
  formJsonsByDeletedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: FormJsonCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: FormJsonFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `FormJson`."""
    orderBy: [FormJsonsOrderBy!] = [PRIMARY_KEY_ASC]
  ): FormJsonsConnection!

  """The `CiipUser` at the end of the edge."""
  node: CiipUser
}

"""
A connection to a list of `CiipUser` values, with data from `FormJson`.
"""
type CiipUserCiipUsersByFormJsonCreatedByAndUpdatedByManyToManyConnection {
  """
  A list of edges which contains the `CiipUser`, info from the `FormJson`, and the cursor to aid in pagination.
  """
  edges: [CiipUserCiipUsersByFormJsonCreatedByAndUpdatedByManyToManyEdge!]!

  """A list of `CiipUser` objects."""
  nodes: [CiipUser]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CiipUser` you could get from the connection."""
  totalCount: Int!
}

"""A `CiipUser` edge in the connection, with data from `FormJson`."""
type CiipUserCiipUsersByFormJsonCreatedByAndUpdatedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """Reads and enables pagination through a set of `FormJson`."""
  formJsonsByUpdatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: FormJsonCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: FormJsonFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `FormJson`."""
    orderBy: [FormJsonsOrderBy!] = [PRIMARY_KEY_ASC]
  ): FormJsonsConnection!

  """The `CiipUser` at the end of the edge."""
  node: CiipUser
}

"""
A connection to a list of `CiipUser` values, with data from `FormJson`.
"""
type CiipUserCiipUsersByFormJsonDeletedByAndCreatedByManyToManyConnection {
  """
  A list of edges which contains the `CiipUser`, info from the `FormJson`, and the cursor to aid in pagination.
  """
  edges: [CiipUserCiipUsersByFormJsonDeletedByAndCreatedByManyToManyEdge!]!

  """A list of `CiipUser` objects."""
  nodes: [CiipUser]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CiipUser` you could get from the connection."""
  totalCount: Int!
}

"""A `CiipUser` edge in the connection, with data from `FormJson`."""
type CiipUserCiipUsersByFormJsonDeletedByAndCreatedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """Reads and enables pagination through a set of `FormJson`."""
  formJsonsByCreatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: FormJsonCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: FormJsonFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `FormJson`."""
    orderBy: [FormJsonsOrderBy!] = [PRIMARY_KEY_ASC]
  ): FormJsonsConnection!

  """The `CiipUser` at the end of the edge."""
  node: CiipUser
}

"""
A connection to a list of `CiipUser` values, with data from `FormJson`.
"""
type CiipUserCiipUsersByFormJsonDeletedByAndUpdatedByManyToManyConnection {
  """
  A list of edges which contains the `CiipUser`, info from the `FormJson`, and the cursor to aid in pagination.
  """
  edges: [CiipUserCiipUsersByFormJsonDeletedByAndUpdatedByManyToManyEdge!]!

  """A list of `CiipUser` objects."""
  nodes: [CiipUser]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CiipUser` you could get from the connection."""
  totalCount: Int!
}

"""A `CiipUser` edge in the connection, with data from `FormJson`."""
type CiipUserCiipUsersByFormJsonDeletedByAndUpdatedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """Reads and enables pagination through a set of `FormJson`."""
  formJsonsByUpdatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: FormJsonCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: FormJsonFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `FormJson`."""
    orderBy: [FormJsonsOrderBy!] = [PRIMARY_KEY_ASC]
  ): FormJsonsConnection!

  """The `CiipUser` at the end of the edge."""
  node: CiipUser
}

"""
A connection to a list of `CiipUser` values, with data from `FormJson`.
"""
type CiipUserCiipUsersByFormJsonUpdatedByAndCreatedByManyToManyConnection {
  """
  A list of edges which contains the `CiipUser`, info from the `FormJson`, and the cursor to aid in pagination.
  """
  edges: [CiipUserCiipUsersByFormJsonUpdatedByAndCreatedByManyToManyEdge!]!

  """A list of `CiipUser` objects."""
  nodes: [CiipUser]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CiipUser` you could get from the connection."""
  totalCount: Int!
}

"""A `CiipUser` edge in the connection, with data from `FormJson`."""
type CiipUserCiipUsersByFormJsonUpdatedByAndCreatedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """Reads and enables pagination through a set of `FormJson`."""
  formJsonsByCreatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: FormJsonCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: FormJsonFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `FormJson`."""
    orderBy: [FormJsonsOrderBy!] = [PRIMARY_KEY_ASC]
  ): FormJsonsConnection!

  """The `CiipUser` at the end of the edge."""
  node: CiipUser
}

"""
A connection to a list of `CiipUser` values, with data from `FormJson`.
"""
type CiipUserCiipUsersByFormJsonUpdatedByAndDeletedByManyToManyConnection {
  """
  A list of edges which contains the `CiipUser`, info from the `FormJson`, and the cursor to aid in pagination.
  """
  edges: [CiipUserCiipUsersByFormJsonUpdatedByAndDeletedByManyToManyEdge!]!

  """A list of `CiipUser` objects."""
  nodes: [CiipUser]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CiipUser` you could get from the connection."""
  totalCount: Int!
}

"""A `CiipUser` edge in the connection, with data from `FormJson`."""
type CiipUserCiipUsersByFormJsonUpdatedByAndDeletedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """Reads and enables pagination through a set of `FormJson`."""
  formJsonsByDeletedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: FormJsonCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: FormJsonFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `FormJson`."""
    orderBy: [FormJsonsOrderBy!] = [PRIMARY_KEY_ASC]
  ): FormJsonsConnection!

  """The `CiipUser` at the end of the edge."""
  node: CiipUser
}

"""
A connection to a list of `CiipUser` values, with data from `FormResult`.
"""
type CiipUserCiipUsersByFormResultCreatedByAndDeletedByManyToManyConnection {
  """
  A list of edges which contains the `CiipUser`, info from the `FormResult`, and the cursor to aid in pagination.
  """
  edges: [CiipUserCiipUsersByFormResultCreatedByAndDeletedByManyToManyEdge!]!

  """A list of `CiipUser` objects."""
  nodes: [CiipUser]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CiipUser` you could get from the connection."""
  totalCount: Int!
}

"""A `CiipUser` edge in the connection, with data from `FormResult`."""
type CiipUserCiipUsersByFormResultCreatedByAndDeletedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """Reads and enables pagination through a set of `FormResult`."""
  formResultsByDeletedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: FormResultCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: FormResultFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `FormResult`."""
    orderBy: [FormResultsOrderBy!] = [PRIMARY_KEY_ASC]
  ): FormResultsConnection!

  """The `CiipUser` at the end of the edge."""
  node: CiipUser
}

"""
A connection to a list of `CiipUser` values, with data from `FormResult`.
"""
type CiipUserCiipUsersByFormResultCreatedByAndUpdatedByManyToManyConnection {
  """
  A list of edges which contains the `CiipUser`, info from the `FormResult`, and the cursor to aid in pagination.
  """
  edges: [CiipUserCiipUsersByFormResultCreatedByAndUpdatedByManyToManyEdge!]!

  """A list of `CiipUser` objects."""
  nodes: [CiipUser]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CiipUser` you could get from the connection."""
  totalCount: Int!
}

"""A `CiipUser` edge in the connection, with data from `FormResult`."""
type CiipUserCiipUsersByFormResultCreatedByAndUpdatedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """Reads and enables pagination through a set of `FormResult`."""
  formResultsByUpdatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: FormResultCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: FormResultFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `FormResult`."""
    orderBy: [FormResultsOrderBy!] = [PRIMARY_KEY_ASC]
  ): FormResultsConnection!

  """The `CiipUser` at the end of the edge."""
  node: CiipUser
}

"""
A connection to a list of `CiipUser` values, with data from `FormResult`.
"""
type CiipUserCiipUsersByFormResultDeletedByAndCreatedByManyToManyConnection {
  """
  A list of edges which contains the `CiipUser`, info from the `FormResult`, and the cursor to aid in pagination.
  """
  edges: [CiipUserCiipUsersByFormResultDeletedByAndCreatedByManyToManyEdge!]!

  """A list of `CiipUser` objects."""
  nodes: [CiipUser]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CiipUser` you could get from the connection."""
  totalCount: Int!
}

"""A `CiipUser` edge in the connection, with data from `FormResult`."""
type CiipUserCiipUsersByFormResultDeletedByAndCreatedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """Reads and enables pagination through a set of `FormResult`."""
  formResultsByCreatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: FormResultCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: FormResultFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `FormResult`."""
    orderBy: [FormResultsOrderBy!] = [PRIMARY_KEY_ASC]
  ): FormResultsConnection!

  """The `CiipUser` at the end of the edge."""
  node: CiipUser
}

"""
A connection to a list of `CiipUser` values, with data from `FormResult`.
"""
type CiipUserCiipUsersByFormResultDeletedByAndUpdatedByManyToManyConnection {
  """
  A list of edges which contains the `CiipUser`, info from the `FormResult`, and the cursor to aid in pagination.
  """
  edges: [CiipUserCiipUsersByFormResultDeletedByAndUpdatedByManyToManyEdge!]!

  """A list of `CiipUser` objects."""
  nodes: [CiipUser]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CiipUser` you could get from the connection."""
  totalCount: Int!
}

"""A `CiipUser` edge in the connection, with data from `FormResult`."""
type CiipUserCiipUsersByFormResultDeletedByAndUpdatedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """Reads and enables pagination through a set of `FormResult`."""
  formResultsByUpdatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: FormResultCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: FormResultFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `FormResult`."""
    orderBy: [FormResultsOrderBy!] = [PRIMARY_KEY_ASC]
  ): FormResultsConnection!

  """The `CiipUser` at the end of the edge."""
  node: CiipUser
}

"""
A connection to a list of `CiipUser` values, with data from `FormResultStatus`.
"""
type CiipUserCiipUsersByFormResultStatusCreatedByAndDeletedByManyToManyConnection {
  """
  A list of edges which contains the `CiipUser`, info from the `FormResultStatus`, and the cursor to aid in pagination.
  """
  edges: [CiipUserCiipUsersByFormResultStatusCreatedByAndDeletedByManyToManyEdge!]!

  """A list of `CiipUser` objects."""
  nodes: [CiipUser]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CiipUser` you could get from the connection."""
  totalCount: Int!
}

"""
A `CiipUser` edge in the connection, with data from `FormResultStatus`.
"""
type CiipUserCiipUsersByFormResultStatusCreatedByAndDeletedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """Reads and enables pagination through a set of `FormResultStatus`."""
  formResultStatusesByDeletedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: FormResultStatusCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: FormResultStatusFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `FormResultStatus`."""
    orderBy: [FormResultStatusesOrderBy!] = [PRIMARY_KEY_ASC]
  ): FormResultStatusesConnection!

  """The `CiipUser` at the end of the edge."""
  node: CiipUser
}

"""
A connection to a list of `CiipUser` values, with data from `FormResultStatus`.
"""
type CiipUserCiipUsersByFormResultStatusCreatedByAndUpdatedByManyToManyConnection {
  """
  A list of edges which contains the `CiipUser`, info from the `FormResultStatus`, and the cursor to aid in pagination.
  """
  edges: [CiipUserCiipUsersByFormResultStatusCreatedByAndUpdatedByManyToManyEdge!]!

  """A list of `CiipUser` objects."""
  nodes: [CiipUser]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CiipUser` you could get from the connection."""
  totalCount: Int!
}

"""
A `CiipUser` edge in the connection, with data from `FormResultStatus`.
"""
type CiipUserCiipUsersByFormResultStatusCreatedByAndUpdatedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """Reads and enables pagination through a set of `FormResultStatus`."""
  formResultStatusesByUpdatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: FormResultStatusCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: FormResultStatusFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `FormResultStatus`."""
    orderBy: [FormResultStatusesOrderBy!] = [PRIMARY_KEY_ASC]
  ): FormResultStatusesConnection!

  """The `CiipUser` at the end of the edge."""
  node: CiipUser
}

"""
A connection to a list of `CiipUser` values, with data from `FormResultStatus`.
"""
type CiipUserCiipUsersByFormResultStatusDeletedByAndCreatedByManyToManyConnection {
  """
  A list of edges which contains the `CiipUser`, info from the `FormResultStatus`, and the cursor to aid in pagination.
  """
  edges: [CiipUserCiipUsersByFormResultStatusDeletedByAndCreatedByManyToManyEdge!]!

  """A list of `CiipUser` objects."""
  nodes: [CiipUser]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CiipUser` you could get from the connection."""
  totalCount: Int!
}

"""
A `CiipUser` edge in the connection, with data from `FormResultStatus`.
"""
type CiipUserCiipUsersByFormResultStatusDeletedByAndCreatedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """Reads and enables pagination through a set of `FormResultStatus`."""
  formResultStatusesByCreatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: FormResultStatusCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: FormResultStatusFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `FormResultStatus`."""
    orderBy: [FormResultStatusesOrderBy!] = [PRIMARY_KEY_ASC]
  ): FormResultStatusesConnection!

  """The `CiipUser` at the end of the edge."""
  node: CiipUser
}

"""
A connection to a list of `CiipUser` values, with data from `FormResultStatus`.
"""
type CiipUserCiipUsersByFormResultStatusDeletedByAndUpdatedByManyToManyConnection {
  """
  A list of edges which contains the `CiipUser`, info from the `FormResultStatus`, and the cursor to aid in pagination.
  """
  edges: [CiipUserCiipUsersByFormResultStatusDeletedByAndUpdatedByManyToManyEdge!]!

  """A list of `CiipUser` objects."""
  nodes: [CiipUser]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CiipUser` you could get from the connection."""
  totalCount: Int!
}

"""
A `CiipUser` edge in the connection, with data from `FormResultStatus`.
"""
type CiipUserCiipUsersByFormResultStatusDeletedByAndUpdatedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """Reads and enables pagination through a set of `FormResultStatus`."""
  formResultStatusesByUpdatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: FormResultStatusCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: FormResultStatusFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `FormResultStatus`."""
    orderBy: [FormResultStatusesOrderBy!] = [PRIMARY_KEY_ASC]
  ): FormResultStatusesConnection!

  """The `CiipUser` at the end of the edge."""
  node: CiipUser
}

"""
A connection to a list of `CiipUser` values, with data from `FormResultStatus`.
"""
type CiipUserCiipUsersByFormResultStatusUpdatedByAndCreatedByManyToManyConnection {
  """
  A list of edges which contains the `CiipUser`, info from the `FormResultStatus`, and the cursor to aid in pagination.
  """
  edges: [CiipUserCiipUsersByFormResultStatusUpdatedByAndCreatedByManyToManyEdge!]!

  """A list of `CiipUser` objects."""
  nodes: [CiipUser]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CiipUser` you could get from the connection."""
  totalCount: Int!
}

"""
A `CiipUser` edge in the connection, with data from `FormResultStatus`.
"""
type CiipUserCiipUsersByFormResultStatusUpdatedByAndCreatedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """Reads and enables pagination through a set of `FormResultStatus`."""
  formResultStatusesByCreatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: FormResultStatusCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: FormResultStatusFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `FormResultStatus`."""
    orderBy: [FormResultStatusesOrderBy!] = [PRIMARY_KEY_ASC]
  ): FormResultStatusesConnection!

  """The `CiipUser` at the end of the edge."""
  node: CiipUser
}

"""
A connection to a list of `CiipUser` values, with data from `FormResultStatus`.
"""
type CiipUserCiipUsersByFormResultStatusUpdatedByAndDeletedByManyToManyConnection {
  """
  A list of edges which contains the `CiipUser`, info from the `FormResultStatus`, and the cursor to aid in pagination.
  """
  edges: [CiipUserCiipUsersByFormResultStatusUpdatedByAndDeletedByManyToManyEdge!]!

  """A list of `CiipUser` objects."""
  nodes: [CiipUser]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CiipUser` you could get from the connection."""
  totalCount: Int!
}

"""
A `CiipUser` edge in the connection, with data from `FormResultStatus`.
"""
type CiipUserCiipUsersByFormResultStatusUpdatedByAndDeletedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """Reads and enables pagination through a set of `FormResultStatus`."""
  formResultStatusesByDeletedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: FormResultStatusCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: FormResultStatusFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `FormResultStatus`."""
    orderBy: [FormResultStatusesOrderBy!] = [PRIMARY_KEY_ASC]
  ): FormResultStatusesConnection!

  """The `CiipUser` at the end of the edge."""
  node: CiipUser
}

"""
A connection to a list of `CiipUser` values, with data from `FormResult`.
"""
type CiipUserCiipUsersByFormResultUpdatedByAndCreatedByManyToManyConnection {
  """
  A list of edges which contains the `CiipUser`, info from the `FormResult`, and the cursor to aid in pagination.
  """
  edges: [CiipUserCiipUsersByFormResultUpdatedByAndCreatedByManyToManyEdge!]!

  """A list of `CiipUser` objects."""
  nodes: [CiipUser]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CiipUser` you could get from the connection."""
  totalCount: Int!
}

"""A `CiipUser` edge in the connection, with data from `FormResult`."""
type CiipUserCiipUsersByFormResultUpdatedByAndCreatedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """Reads and enables pagination through a set of `FormResult`."""
  formResultsByCreatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: FormResultCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: FormResultFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `FormResult`."""
    orderBy: [FormResultsOrderBy!] = [PRIMARY_KEY_ASC]
  ): FormResultsConnection!

  """The `CiipUser` at the end of the edge."""
  node: CiipUser
}

"""
A connection to a list of `CiipUser` values, with data from `FormResult`.
"""
type CiipUserCiipUsersByFormResultUpdatedByAndDeletedByManyToManyConnection {
  """
  A list of edges which contains the `CiipUser`, info from the `FormResult`, and the cursor to aid in pagination.
  """
  edges: [CiipUserCiipUsersByFormResultUpdatedByAndDeletedByManyToManyEdge!]!

  """A list of `CiipUser` objects."""
  nodes: [CiipUser]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CiipUser` you could get from the connection."""
  totalCount: Int!
}

"""A `CiipUser` edge in the connection, with data from `FormResult`."""
type CiipUserCiipUsersByFormResultUpdatedByAndDeletedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """Reads and enables pagination through a set of `FormResult`."""
  formResultsByDeletedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: FormResultCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: FormResultFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `FormResult`."""
    orderBy: [FormResultsOrderBy!] = [PRIMARY_KEY_ASC]
  ): FormResultsConnection!

  """The `CiipUser` at the end of the edge."""
  node: CiipUser
}

"""A connection to a list of `CiipUser` values, with data from `Fuel`."""
type CiipUserCiipUsersByFuelCreatedByAndDeletedByManyToManyConnection {
  """
  A list of edges which contains the `CiipUser`, info from the `Fuel`, and the cursor to aid in pagination.
  """
  edges: [CiipUserCiipUsersByFuelCreatedByAndDeletedByManyToManyEdge!]!

  """A list of `CiipUser` objects."""
  nodes: [CiipUser]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CiipUser` you could get from the connection."""
  totalCount: Int!
}

"""A `CiipUser` edge in the connection, with data from `Fuel`."""
type CiipUserCiipUsersByFuelCreatedByAndDeletedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """Reads and enables pagination through a set of `Fuel`."""
  fuelsByDeletedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: FuelCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: FuelFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Fuel`."""
    orderBy: [FuelsOrderBy!] = [PRIMARY_KEY_ASC]
  ): FuelsConnection!

  """The `CiipUser` at the end of the edge."""
  node: CiipUser
}

"""A connection to a list of `CiipUser` values, with data from `Fuel`."""
type CiipUserCiipUsersByFuelCreatedByAndUpdatedByManyToManyConnection {
  """
  A list of edges which contains the `CiipUser`, info from the `Fuel`, and the cursor to aid in pagination.
  """
  edges: [CiipUserCiipUsersByFuelCreatedByAndUpdatedByManyToManyEdge!]!

  """A list of `CiipUser` objects."""
  nodes: [CiipUser]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CiipUser` you could get from the connection."""
  totalCount: Int!
}

"""A `CiipUser` edge in the connection, with data from `Fuel`."""
type CiipUserCiipUsersByFuelCreatedByAndUpdatedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """Reads and enables pagination through a set of `Fuel`."""
  fuelsByUpdatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: FuelCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: FuelFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Fuel`."""
    orderBy: [FuelsOrderBy!] = [PRIMARY_KEY_ASC]
  ): FuelsConnection!

  """The `CiipUser` at the end of the edge."""
  node: CiipUser
}

"""A connection to a list of `CiipUser` values, with data from `Fuel`."""
type CiipUserCiipUsersByFuelDeletedByAndCreatedByManyToManyConnection {
  """
  A list of edges which contains the `CiipUser`, info from the `Fuel`, and the cursor to aid in pagination.
  """
  edges: [CiipUserCiipUsersByFuelDeletedByAndCreatedByManyToManyEdge!]!

  """A list of `CiipUser` objects."""
  nodes: [CiipUser]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CiipUser` you could get from the connection."""
  totalCount: Int!
}

"""A `CiipUser` edge in the connection, with data from `Fuel`."""
type CiipUserCiipUsersByFuelDeletedByAndCreatedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """Reads and enables pagination through a set of `Fuel`."""
  fuelsByCreatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: FuelCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: FuelFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Fuel`."""
    orderBy: [FuelsOrderBy!] = [PRIMARY_KEY_ASC]
  ): FuelsConnection!

  """The `CiipUser` at the end of the edge."""
  node: CiipUser
}

"""A connection to a list of `CiipUser` values, with data from `Fuel`."""
type CiipUserCiipUsersByFuelDeletedByAndUpdatedByManyToManyConnection {
  """
  A list of edges which contains the `CiipUser`, info from the `Fuel`, and the cursor to aid in pagination.
  """
  edges: [CiipUserCiipUsersByFuelDeletedByAndUpdatedByManyToManyEdge!]!

  """A list of `CiipUser` objects."""
  nodes: [CiipUser]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CiipUser` you could get from the connection."""
  totalCount: Int!
}

"""A `CiipUser` edge in the connection, with data from `Fuel`."""
type CiipUserCiipUsersByFuelDeletedByAndUpdatedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """Reads and enables pagination through a set of `Fuel`."""
  fuelsByUpdatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: FuelCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: FuelFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Fuel`."""
    orderBy: [FuelsOrderBy!] = [PRIMARY_KEY_ASC]
  ): FuelsConnection!

  """The `CiipUser` at the end of the edge."""
  node: CiipUser
}

"""A connection to a list of `CiipUser` values, with data from `Fuel`."""
type CiipUserCiipUsersByFuelUpdatedByAndCreatedByManyToManyConnection {
  """
  A list of edges which contains the `CiipUser`, info from the `Fuel`, and the cursor to aid in pagination.
  """
  edges: [CiipUserCiipUsersByFuelUpdatedByAndCreatedByManyToManyEdge!]!

  """A list of `CiipUser` objects."""
  nodes: [CiipUser]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CiipUser` you could get from the connection."""
  totalCount: Int!
}

"""A `CiipUser` edge in the connection, with data from `Fuel`."""
type CiipUserCiipUsersByFuelUpdatedByAndCreatedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """Reads and enables pagination through a set of `Fuel`."""
  fuelsByCreatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: FuelCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: FuelFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Fuel`."""
    orderBy: [FuelsOrderBy!] = [PRIMARY_KEY_ASC]
  ): FuelsConnection!

  """The `CiipUser` at the end of the edge."""
  node: CiipUser
}

"""A connection to a list of `CiipUser` values, with data from `Fuel`."""
type CiipUserCiipUsersByFuelUpdatedByAndDeletedByManyToManyConnection {
  """
  A list of edges which contains the `CiipUser`, info from the `Fuel`, and the cursor to aid in pagination.
  """
  edges: [CiipUserCiipUsersByFuelUpdatedByAndDeletedByManyToManyEdge!]!

  """A list of `CiipUser` objects."""
  nodes: [CiipUser]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CiipUser` you could get from the connection."""
  totalCount: Int!
}

"""A `CiipUser` edge in the connection, with data from `Fuel`."""
type CiipUserCiipUsersByFuelUpdatedByAndDeletedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """Reads and enables pagination through a set of `Fuel`."""
  fuelsByDeletedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: FuelCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: FuelFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Fuel`."""
    orderBy: [FuelsOrderBy!] = [PRIMARY_KEY_ASC]
  ): FuelsConnection!

  """The `CiipUser` at the end of the edge."""
  node: CiipUser
}

"""A connection to a list of `CiipUser` values, with data from `Gas`."""
type CiipUserCiipUsersByGasCreatedByAndDeletedByManyToManyConnection {
  """
  A list of edges which contains the `CiipUser`, info from the `Gas`, and the cursor to aid in pagination.
  """
  edges: [CiipUserCiipUsersByGasCreatedByAndDeletedByManyToManyEdge!]!

  """A list of `CiipUser` objects."""
  nodes: [CiipUser]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CiipUser` you could get from the connection."""
  totalCount: Int!
}

"""A `CiipUser` edge in the connection, with data from `Gas`."""
type CiipUserCiipUsersByGasCreatedByAndDeletedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """Reads and enables pagination through a set of `Gas`."""
  gasesByDeletedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: GasCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: GasFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Gas`."""
    orderBy: [GasesOrderBy!] = [PRIMARY_KEY_ASC]
  ): GasesConnection!

  """The `CiipUser` at the end of the edge."""
  node: CiipUser
}

"""A connection to a list of `CiipUser` values, with data from `Gas`."""
type CiipUserCiipUsersByGasCreatedByAndUpdatedByManyToManyConnection {
  """
  A list of edges which contains the `CiipUser`, info from the `Gas`, and the cursor to aid in pagination.
  """
  edges: [CiipUserCiipUsersByGasCreatedByAndUpdatedByManyToManyEdge!]!

  """A list of `CiipUser` objects."""
  nodes: [CiipUser]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CiipUser` you could get from the connection."""
  totalCount: Int!
}

"""A `CiipUser` edge in the connection, with data from `Gas`."""
type CiipUserCiipUsersByGasCreatedByAndUpdatedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """Reads and enables pagination through a set of `Gas`."""
  gasesByUpdatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: GasCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: GasFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Gas`."""
    orderBy: [GasesOrderBy!] = [PRIMARY_KEY_ASC]
  ): GasesConnection!

  """The `CiipUser` at the end of the edge."""
  node: CiipUser
}

"""A connection to a list of `CiipUser` values, with data from `Gas`."""
type CiipUserCiipUsersByGasDeletedByAndCreatedByManyToManyConnection {
  """
  A list of edges which contains the `CiipUser`, info from the `Gas`, and the cursor to aid in pagination.
  """
  edges: [CiipUserCiipUsersByGasDeletedByAndCreatedByManyToManyEdge!]!

  """A list of `CiipUser` objects."""
  nodes: [CiipUser]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CiipUser` you could get from the connection."""
  totalCount: Int!
}

"""A `CiipUser` edge in the connection, with data from `Gas`."""
type CiipUserCiipUsersByGasDeletedByAndCreatedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """Reads and enables pagination through a set of `Gas`."""
  gasesByCreatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: GasCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: GasFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Gas`."""
    orderBy: [GasesOrderBy!] = [PRIMARY_KEY_ASC]
  ): GasesConnection!

  """The `CiipUser` at the end of the edge."""
  node: CiipUser
}

"""A connection to a list of `CiipUser` values, with data from `Gas`."""
type CiipUserCiipUsersByGasDeletedByAndUpdatedByManyToManyConnection {
  """
  A list of edges which contains the `CiipUser`, info from the `Gas`, and the cursor to aid in pagination.
  """
  edges: [CiipUserCiipUsersByGasDeletedByAndUpdatedByManyToManyEdge!]!

  """A list of `CiipUser` objects."""
  nodes: [CiipUser]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CiipUser` you could get from the connection."""
  totalCount: Int!
}

"""A `CiipUser` edge in the connection, with data from `Gas`."""
type CiipUserCiipUsersByGasDeletedByAndUpdatedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """Reads and enables pagination through a set of `Gas`."""
  gasesByUpdatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: GasCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: GasFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Gas`."""
    orderBy: [GasesOrderBy!] = [PRIMARY_KEY_ASC]
  ): GasesConnection!

  """The `CiipUser` at the end of the edge."""
  node: CiipUser
}

"""A connection to a list of `CiipUser` values, with data from `Gas`."""
type CiipUserCiipUsersByGasUpdatedByAndCreatedByManyToManyConnection {
  """
  A list of edges which contains the `CiipUser`, info from the `Gas`, and the cursor to aid in pagination.
  """
  edges: [CiipUserCiipUsersByGasUpdatedByAndCreatedByManyToManyEdge!]!

  """A list of `CiipUser` objects."""
  nodes: [CiipUser]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CiipUser` you could get from the connection."""
  totalCount: Int!
}

"""A `CiipUser` edge in the connection, with data from `Gas`."""
type CiipUserCiipUsersByGasUpdatedByAndCreatedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """Reads and enables pagination through a set of `Gas`."""
  gasesByCreatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: GasCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: GasFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Gas`."""
    orderBy: [GasesOrderBy!] = [PRIMARY_KEY_ASC]
  ): GasesConnection!

  """The `CiipUser` at the end of the edge."""
  node: CiipUser
}

"""A connection to a list of `CiipUser` values, with data from `Gas`."""
type CiipUserCiipUsersByGasUpdatedByAndDeletedByManyToManyConnection {
  """
  A list of edges which contains the `CiipUser`, info from the `Gas`, and the cursor to aid in pagination.
  """
  edges: [CiipUserCiipUsersByGasUpdatedByAndDeletedByManyToManyEdge!]!

  """A list of `CiipUser` objects."""
  nodes: [CiipUser]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CiipUser` you could get from the connection."""
  totalCount: Int!
}

"""A `CiipUser` edge in the connection, with data from `Gas`."""
type CiipUserCiipUsersByGasUpdatedByAndDeletedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """Reads and enables pagination through a set of `Gas`."""
  gasesByDeletedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: GasCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: GasFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Gas`."""
    orderBy: [GasesOrderBy!] = [PRIMARY_KEY_ASC]
  ): GasesConnection!

  """The `CiipUser` at the end of the edge."""
  node: CiipUser
}

"""
A connection to a list of `CiipUser` values, with data from `LinkedProduct`.
"""
type CiipUserCiipUsersByLinkedProductCreatedByAndDeletedByManyToManyConnection {
  """
  A list of edges which contains the `CiipUser`, info from the `LinkedProduct`, and the cursor to aid in pagination.
  """
  edges: [CiipUserCiipUsersByLinkedProductCreatedByAndDeletedByManyToManyEdge!]!

  """A list of `CiipUser` objects."""
  nodes: [CiipUser]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CiipUser` you could get from the connection."""
  totalCount: Int!
}

"""A `CiipUser` edge in the connection, with data from `LinkedProduct`."""
type CiipUserCiipUsersByLinkedProductCreatedByAndDeletedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """Reads and enables pagination through a set of `LinkedProduct`."""
  linkedProductsByDeletedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: LinkedProductCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: LinkedProductFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `LinkedProduct`."""
    orderBy: [LinkedProductsOrderBy!] = [PRIMARY_KEY_ASC]
  ): LinkedProductsConnection!

  """The `CiipUser` at the end of the edge."""
  node: CiipUser
}

"""
A connection to a list of `CiipUser` values, with data from `LinkedProduct`.
"""
type CiipUserCiipUsersByLinkedProductCreatedByAndUpdatedByManyToManyConnection {
  """
  A list of edges which contains the `CiipUser`, info from the `LinkedProduct`, and the cursor to aid in pagination.
  """
  edges: [CiipUserCiipUsersByLinkedProductCreatedByAndUpdatedByManyToManyEdge!]!

  """A list of `CiipUser` objects."""
  nodes: [CiipUser]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CiipUser` you could get from the connection."""
  totalCount: Int!
}

"""A `CiipUser` edge in the connection, with data from `LinkedProduct`."""
type CiipUserCiipUsersByLinkedProductCreatedByAndUpdatedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """Reads and enables pagination through a set of `LinkedProduct`."""
  linkedProductsByUpdatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: LinkedProductCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: LinkedProductFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `LinkedProduct`."""
    orderBy: [LinkedProductsOrderBy!] = [PRIMARY_KEY_ASC]
  ): LinkedProductsConnection!

  """The `CiipUser` at the end of the edge."""
  node: CiipUser
}

"""
A connection to a list of `CiipUser` values, with data from `LinkedProduct`.
"""
type CiipUserCiipUsersByLinkedProductDeletedByAndCreatedByManyToManyConnection {
  """
  A list of edges which contains the `CiipUser`, info from the `LinkedProduct`, and the cursor to aid in pagination.
  """
  edges: [CiipUserCiipUsersByLinkedProductDeletedByAndCreatedByManyToManyEdge!]!

  """A list of `CiipUser` objects."""
  nodes: [CiipUser]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CiipUser` you could get from the connection."""
  totalCount: Int!
}

"""A `CiipUser` edge in the connection, with data from `LinkedProduct`."""
type CiipUserCiipUsersByLinkedProductDeletedByAndCreatedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """Reads and enables pagination through a set of `LinkedProduct`."""
  linkedProductsByCreatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: LinkedProductCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: LinkedProductFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `LinkedProduct`."""
    orderBy: [LinkedProductsOrderBy!] = [PRIMARY_KEY_ASC]
  ): LinkedProductsConnection!

  """The `CiipUser` at the end of the edge."""
  node: CiipUser
}

"""
A connection to a list of `CiipUser` values, with data from `LinkedProduct`.
"""
type CiipUserCiipUsersByLinkedProductDeletedByAndUpdatedByManyToManyConnection {
  """
  A list of edges which contains the `CiipUser`, info from the `LinkedProduct`, and the cursor to aid in pagination.
  """
  edges: [CiipUserCiipUsersByLinkedProductDeletedByAndUpdatedByManyToManyEdge!]!

  """A list of `CiipUser` objects."""
  nodes: [CiipUser]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CiipUser` you could get from the connection."""
  totalCount: Int!
}

"""A `CiipUser` edge in the connection, with data from `LinkedProduct`."""
type CiipUserCiipUsersByLinkedProductDeletedByAndUpdatedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """Reads and enables pagination through a set of `LinkedProduct`."""
  linkedProductsByUpdatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: LinkedProductCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: LinkedProductFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `LinkedProduct`."""
    orderBy: [LinkedProductsOrderBy!] = [PRIMARY_KEY_ASC]
  ): LinkedProductsConnection!

  """The `CiipUser` at the end of the edge."""
  node: CiipUser
}

"""
A connection to a list of `CiipUser` values, with data from `LinkedProduct`.
"""
type CiipUserCiipUsersByLinkedProductUpdatedByAndCreatedByManyToManyConnection {
  """
  A list of edges which contains the `CiipUser`, info from the `LinkedProduct`, and the cursor to aid in pagination.
  """
  edges: [CiipUserCiipUsersByLinkedProductUpdatedByAndCreatedByManyToManyEdge!]!

  """A list of `CiipUser` objects."""
  nodes: [CiipUser]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CiipUser` you could get from the connection."""
  totalCount: Int!
}

"""A `CiipUser` edge in the connection, with data from `LinkedProduct`."""
type CiipUserCiipUsersByLinkedProductUpdatedByAndCreatedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """Reads and enables pagination through a set of `LinkedProduct`."""
  linkedProductsByCreatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: LinkedProductCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: LinkedProductFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `LinkedProduct`."""
    orderBy: [LinkedProductsOrderBy!] = [PRIMARY_KEY_ASC]
  ): LinkedProductsConnection!

  """The `CiipUser` at the end of the edge."""
  node: CiipUser
}

"""
A connection to a list of `CiipUser` values, with data from `LinkedProduct`.
"""
type CiipUserCiipUsersByLinkedProductUpdatedByAndDeletedByManyToManyConnection {
  """
  A list of edges which contains the `CiipUser`, info from the `LinkedProduct`, and the cursor to aid in pagination.
  """
  edges: [CiipUserCiipUsersByLinkedProductUpdatedByAndDeletedByManyToManyEdge!]!

  """A list of `CiipUser` objects."""
  nodes: [CiipUser]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CiipUser` you could get from the connection."""
  totalCount: Int!
}

"""A `CiipUser` edge in the connection, with data from `LinkedProduct`."""
type CiipUserCiipUsersByLinkedProductUpdatedByAndDeletedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """Reads and enables pagination through a set of `LinkedProduct`."""
  linkedProductsByDeletedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: LinkedProductCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: LinkedProductFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `LinkedProduct`."""
    orderBy: [LinkedProductsOrderBy!] = [PRIMARY_KEY_ASC]
  ): LinkedProductsConnection!

  """The `CiipUser` at the end of the edge."""
  node: CiipUser
}

"""A connection to a list of `CiipUser` values, with data from `Product`."""
type CiipUserCiipUsersByProductCreatedByAndDeletedByManyToManyConnection {
  """
  A list of edges which contains the `CiipUser`, info from the `Product`, and the cursor to aid in pagination.
  """
  edges: [CiipUserCiipUsersByProductCreatedByAndDeletedByManyToManyEdge!]!

  """A list of `CiipUser` objects."""
  nodes: [CiipUser]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CiipUser` you could get from the connection."""
  totalCount: Int!
}

"""A `CiipUser` edge in the connection, with data from `Product`."""
type CiipUserCiipUsersByProductCreatedByAndDeletedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CiipUser` at the end of the edge."""
  node: CiipUser

  """Reads and enables pagination through a set of `Product`."""
  productsByDeletedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProductCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ProductFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Product`."""
    orderBy: [ProductsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ProductsConnection!
}

"""A connection to a list of `CiipUser` values, with data from `Product`."""
type CiipUserCiipUsersByProductCreatedByAndUpdatedByManyToManyConnection {
  """
  A list of edges which contains the `CiipUser`, info from the `Product`, and the cursor to aid in pagination.
  """
  edges: [CiipUserCiipUsersByProductCreatedByAndUpdatedByManyToManyEdge!]!

  """A list of `CiipUser` objects."""
  nodes: [CiipUser]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CiipUser` you could get from the connection."""
  totalCount: Int!
}

"""A `CiipUser` edge in the connection, with data from `Product`."""
type CiipUserCiipUsersByProductCreatedByAndUpdatedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CiipUser` at the end of the edge."""
  node: CiipUser

  """Reads and enables pagination through a set of `Product`."""
  productsByUpdatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProductCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ProductFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Product`."""
    orderBy: [ProductsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ProductsConnection!
}

"""A connection to a list of `CiipUser` values, with data from `Product`."""
type CiipUserCiipUsersByProductDeletedByAndCreatedByManyToManyConnection {
  """
  A list of edges which contains the `CiipUser`, info from the `Product`, and the cursor to aid in pagination.
  """
  edges: [CiipUserCiipUsersByProductDeletedByAndCreatedByManyToManyEdge!]!

  """A list of `CiipUser` objects."""
  nodes: [CiipUser]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CiipUser` you could get from the connection."""
  totalCount: Int!
}

"""A `CiipUser` edge in the connection, with data from `Product`."""
type CiipUserCiipUsersByProductDeletedByAndCreatedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CiipUser` at the end of the edge."""
  node: CiipUser

  """Reads and enables pagination through a set of `Product`."""
  productsByCreatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProductCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ProductFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Product`."""
    orderBy: [ProductsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ProductsConnection!
}

"""A connection to a list of `CiipUser` values, with data from `Product`."""
type CiipUserCiipUsersByProductDeletedByAndUpdatedByManyToManyConnection {
  """
  A list of edges which contains the `CiipUser`, info from the `Product`, and the cursor to aid in pagination.
  """
  edges: [CiipUserCiipUsersByProductDeletedByAndUpdatedByManyToManyEdge!]!

  """A list of `CiipUser` objects."""
  nodes: [CiipUser]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CiipUser` you could get from the connection."""
  totalCount: Int!
}

"""A `CiipUser` edge in the connection, with data from `Product`."""
type CiipUserCiipUsersByProductDeletedByAndUpdatedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CiipUser` at the end of the edge."""
  node: CiipUser

  """Reads and enables pagination through a set of `Product`."""
  productsByUpdatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProductCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ProductFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Product`."""
    orderBy: [ProductsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ProductsConnection!
}

"""A connection to a list of `CiipUser` values, with data from `Product`."""
type CiipUserCiipUsersByProductUpdatedByAndCreatedByManyToManyConnection {
  """
  A list of edges which contains the `CiipUser`, info from the `Product`, and the cursor to aid in pagination.
  """
  edges: [CiipUserCiipUsersByProductUpdatedByAndCreatedByManyToManyEdge!]!

  """A list of `CiipUser` objects."""
  nodes: [CiipUser]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CiipUser` you could get from the connection."""
  totalCount: Int!
}

"""A `CiipUser` edge in the connection, with data from `Product`."""
type CiipUserCiipUsersByProductUpdatedByAndCreatedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CiipUser` at the end of the edge."""
  node: CiipUser

  """Reads and enables pagination through a set of `Product`."""
  productsByCreatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProductCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ProductFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Product`."""
    orderBy: [ProductsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ProductsConnection!
}

"""A connection to a list of `CiipUser` values, with data from `Product`."""
type CiipUserCiipUsersByProductUpdatedByAndDeletedByManyToManyConnection {
  """
  A list of edges which contains the `CiipUser`, info from the `Product`, and the cursor to aid in pagination.
  """
  edges: [CiipUserCiipUsersByProductUpdatedByAndDeletedByManyToManyEdge!]!

  """A list of `CiipUser` objects."""
  nodes: [CiipUser]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CiipUser` you could get from the connection."""
  totalCount: Int!
}

"""A `CiipUser` edge in the connection, with data from `Product`."""
type CiipUserCiipUsersByProductUpdatedByAndDeletedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CiipUser` at the end of the edge."""
  node: CiipUser

  """Reads and enables pagination through a set of `Product`."""
  productsByDeletedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProductCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ProductFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Product`."""
    orderBy: [ProductsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ProductsConnection!
}

"""
A connection to a list of `CiipUser` values, with data from `ReviewComment`.
"""
type CiipUserCiipUsersByReviewCommentCreatedByAndDeletedByManyToManyConnection {
  """
  A list of edges which contains the `CiipUser`, info from the `ReviewComment`, and the cursor to aid in pagination.
  """
  edges: [CiipUserCiipUsersByReviewCommentCreatedByAndDeletedByManyToManyEdge!]!

  """A list of `CiipUser` objects."""
  nodes: [CiipUser]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CiipUser` you could get from the connection."""
  totalCount: Int!
}

"""A `CiipUser` edge in the connection, with data from `ReviewComment`."""
type CiipUserCiipUsersByReviewCommentCreatedByAndDeletedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CiipUser` at the end of the edge."""
  node: CiipUser

  """Reads and enables pagination through a set of `ReviewComment`."""
  reviewCommentsByDeletedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ReviewCommentCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ReviewCommentFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `ReviewComment`."""
    orderBy: [ReviewCommentsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ReviewCommentsConnection!
}

"""
A connection to a list of `CiipUser` values, with data from `ReviewComment`.
"""
type CiipUserCiipUsersByReviewCommentCreatedByAndUpdatedByManyToManyConnection {
  """
  A list of edges which contains the `CiipUser`, info from the `ReviewComment`, and the cursor to aid in pagination.
  """
  edges: [CiipUserCiipUsersByReviewCommentCreatedByAndUpdatedByManyToManyEdge!]!

  """A list of `CiipUser` objects."""
  nodes: [CiipUser]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CiipUser` you could get from the connection."""
  totalCount: Int!
}

"""A `CiipUser` edge in the connection, with data from `ReviewComment`."""
type CiipUserCiipUsersByReviewCommentCreatedByAndUpdatedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CiipUser` at the end of the edge."""
  node: CiipUser

  """Reads and enables pagination through a set of `ReviewComment`."""
  reviewCommentsByUpdatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ReviewCommentCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ReviewCommentFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `ReviewComment`."""
    orderBy: [ReviewCommentsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ReviewCommentsConnection!
}

"""
A connection to a list of `CiipUser` values, with data from `ReviewComment`.
"""
type CiipUserCiipUsersByReviewCommentDeletedByAndCreatedByManyToManyConnection {
  """
  A list of edges which contains the `CiipUser`, info from the `ReviewComment`, and the cursor to aid in pagination.
  """
  edges: [CiipUserCiipUsersByReviewCommentDeletedByAndCreatedByManyToManyEdge!]!

  """A list of `CiipUser` objects."""
  nodes: [CiipUser]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CiipUser` you could get from the connection."""
  totalCount: Int!
}

"""A `CiipUser` edge in the connection, with data from `ReviewComment`."""
type CiipUserCiipUsersByReviewCommentDeletedByAndCreatedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CiipUser` at the end of the edge."""
  node: CiipUser

  """Reads and enables pagination through a set of `ReviewComment`."""
  reviewCommentsByCreatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ReviewCommentCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ReviewCommentFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `ReviewComment`."""
    orderBy: [ReviewCommentsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ReviewCommentsConnection!
}

"""
A connection to a list of `CiipUser` values, with data from `ReviewComment`.
"""
type CiipUserCiipUsersByReviewCommentDeletedByAndUpdatedByManyToManyConnection {
  """
  A list of edges which contains the `CiipUser`, info from the `ReviewComment`, and the cursor to aid in pagination.
  """
  edges: [CiipUserCiipUsersByReviewCommentDeletedByAndUpdatedByManyToManyEdge!]!

  """A list of `CiipUser` objects."""
  nodes: [CiipUser]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CiipUser` you could get from the connection."""
  totalCount: Int!
}

"""A `CiipUser` edge in the connection, with data from `ReviewComment`."""
type CiipUserCiipUsersByReviewCommentDeletedByAndUpdatedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CiipUser` at the end of the edge."""
  node: CiipUser

  """Reads and enables pagination through a set of `ReviewComment`."""
  reviewCommentsByUpdatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ReviewCommentCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ReviewCommentFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `ReviewComment`."""
    orderBy: [ReviewCommentsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ReviewCommentsConnection!
}

"""
A connection to a list of `CiipUser` values, with data from `ReviewComment`.
"""
type CiipUserCiipUsersByReviewCommentUpdatedByAndCreatedByManyToManyConnection {
  """
  A list of edges which contains the `CiipUser`, info from the `ReviewComment`, and the cursor to aid in pagination.
  """
  edges: [CiipUserCiipUsersByReviewCommentUpdatedByAndCreatedByManyToManyEdge!]!

  """A list of `CiipUser` objects."""
  nodes: [CiipUser]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CiipUser` you could get from the connection."""
  totalCount: Int!
}

"""A `CiipUser` edge in the connection, with data from `ReviewComment`."""
type CiipUserCiipUsersByReviewCommentUpdatedByAndCreatedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CiipUser` at the end of the edge."""
  node: CiipUser

  """Reads and enables pagination through a set of `ReviewComment`."""
  reviewCommentsByCreatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ReviewCommentCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ReviewCommentFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `ReviewComment`."""
    orderBy: [ReviewCommentsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ReviewCommentsConnection!
}

"""
A connection to a list of `CiipUser` values, with data from `ReviewComment`.
"""
type CiipUserCiipUsersByReviewCommentUpdatedByAndDeletedByManyToManyConnection {
  """
  A list of edges which contains the `CiipUser`, info from the `ReviewComment`, and the cursor to aid in pagination.
  """
  edges: [CiipUserCiipUsersByReviewCommentUpdatedByAndDeletedByManyToManyEdge!]!

  """A list of `CiipUser` objects."""
  nodes: [CiipUser]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CiipUser` you could get from the connection."""
  totalCount: Int!
}

"""A `CiipUser` edge in the connection, with data from `ReviewComment`."""
type CiipUserCiipUsersByReviewCommentUpdatedByAndDeletedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CiipUser` at the end of the edge."""
  node: CiipUser

  """Reads and enables pagination through a set of `ReviewComment`."""
  reviewCommentsByDeletedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ReviewCommentCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ReviewCommentFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `ReviewComment`."""
    orderBy: [ReviewCommentsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ReviewCommentsConnection!
}

"""
A condition to be used against `CiipUser` object types. All fields are tested
for equality and combined with a logical ‘and.’
"""
input CiipUserCondition {
  """Checks for equality with the object’s `createdAt` field."""
  createdAt: Datetime

  """Checks for equality with the object’s `createdBy` field."""
  createdBy: Int

  """Checks for equality with the object’s `deletedAt` field."""
  deletedAt: Datetime

  """Checks for equality with the object’s `deletedBy` field."""
  deletedBy: Int

  """Checks for equality with the object’s `emailAddress` field."""
  emailAddress: String

  """Checks for equality with the object’s `firstName` field."""
  firstName: String

  """Checks for equality with the object’s `lastName` field."""
  lastName: String

  """Checks for equality with the object’s `occupation` field."""
  occupation: String

  """Checks for equality with the object’s `phoneNumber` field."""
  phoneNumber: String

  """Checks for equality with the object’s `rowId` field."""
  rowId: Int

  """Checks for equality with the object’s `updatedAt` field."""
  updatedAt: Datetime

  """Checks for equality with the object’s `updatedBy` field."""
  updatedBy: Int

  """Checks for equality with the object’s `uuid` field."""
  uuid: UUID
}

"""
A connection to a list of `EmissionCategory` values, with data from `EmissionCategoryGas`.
"""
type CiipUserEmissionCategoriesByEmissionCategoryGasCreatedByAndEmissionCategoryIdManyToManyConnection {
  """
  A list of edges which contains the `EmissionCategory`, info from the
  `EmissionCategoryGas`, and the cursor to aid in pagination.
  """
  edges: [CiipUserEmissionCategoriesByEmissionCategoryGasCreatedByAndEmissionCategoryIdManyToManyEdge!]!

  """A list of `EmissionCategory` objects."""
  nodes: [EmissionCategory]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `EmissionCategory` you could get from the connection.
  """
  totalCount: Int!
}

"""
A `EmissionCategory` edge in the connection, with data from `EmissionCategoryGas`.
"""
type CiipUserEmissionCategoriesByEmissionCategoryGasCreatedByAndEmissionCategoryIdManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """Reads and enables pagination through a set of `EmissionCategoryGas`."""
  emissionCategoryGasesByEmissionCategoryId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: EmissionCategoryGasCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: EmissionCategoryGasFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `EmissionCategoryGas`."""
    orderBy: [EmissionCategoryGasesOrderBy!] = [PRIMARY_KEY_ASC]
  ): EmissionCategoryGasesConnection!

  """The `EmissionCategory` at the end of the edge."""
  node: EmissionCategory
}

"""
A connection to a list of `EmissionCategory` values, with data from `EmissionCategoryGas`.
"""
type CiipUserEmissionCategoriesByEmissionCategoryGasDeletedByAndEmissionCategoryIdManyToManyConnection {
  """
  A list of edges which contains the `EmissionCategory`, info from the
  `EmissionCategoryGas`, and the cursor to aid in pagination.
  """
  edges: [CiipUserEmissionCategoriesByEmissionCategoryGasDeletedByAndEmissionCategoryIdManyToManyEdge!]!

  """A list of `EmissionCategory` objects."""
  nodes: [EmissionCategory]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `EmissionCategory` you could get from the connection.
  """
  totalCount: Int!
}

"""
A `EmissionCategory` edge in the connection, with data from `EmissionCategoryGas`.
"""
type CiipUserEmissionCategoriesByEmissionCategoryGasDeletedByAndEmissionCategoryIdManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """Reads and enables pagination through a set of `EmissionCategoryGas`."""
  emissionCategoryGasesByEmissionCategoryId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: EmissionCategoryGasCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: EmissionCategoryGasFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `EmissionCategoryGas`."""
    orderBy: [EmissionCategoryGasesOrderBy!] = [PRIMARY_KEY_ASC]
  ): EmissionCategoryGasesConnection!

  """The `EmissionCategory` at the end of the edge."""
  node: EmissionCategory
}

"""
A connection to a list of `EmissionCategory` values, with data from `EmissionCategoryGas`.
"""
type CiipUserEmissionCategoriesByEmissionCategoryGasUpdatedByAndEmissionCategoryIdManyToManyConnection {
  """
  A list of edges which contains the `EmissionCategory`, info from the
  `EmissionCategoryGas`, and the cursor to aid in pagination.
  """
  edges: [CiipUserEmissionCategoriesByEmissionCategoryGasUpdatedByAndEmissionCategoryIdManyToManyEdge!]!

  """A list of `EmissionCategory` objects."""
  nodes: [EmissionCategory]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `EmissionCategory` you could get from the connection.
  """
  totalCount: Int!
}

"""
A `EmissionCategory` edge in the connection, with data from `EmissionCategoryGas`.
"""
type CiipUserEmissionCategoriesByEmissionCategoryGasUpdatedByAndEmissionCategoryIdManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """Reads and enables pagination through a set of `EmissionCategoryGas`."""
  emissionCategoryGasesByEmissionCategoryId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: EmissionCategoryGasCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: EmissionCategoryGasFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `EmissionCategoryGas`."""
    orderBy: [EmissionCategoryGasesOrderBy!] = [PRIMARY_KEY_ASC]
  ): EmissionCategoryGasesConnection!

  """The `EmissionCategory` at the end of the edge."""
  node: EmissionCategory
}

"""
A filter to be used against `CiipUser` object types. All fields are combined with a logical ‘and.’
"""
input CiipUserFilter {
  """Checks for all expressions in this list."""
  and: [CiipUserFilter!]

  """Filter by the object’s `applicationRevisionsByCreatedBy` relation."""
  applicationRevisionsByCreatedBy: CiipUserToManyApplicationRevisionFilter

  """Some related `applicationRevisionsByCreatedBy` exist."""
  applicationRevisionsByCreatedByExist: Boolean

  """Filter by the object’s `applicationRevisionsByDeletedBy` relation."""
  applicationRevisionsByDeletedBy: CiipUserToManyApplicationRevisionFilter

  """Some related `applicationRevisionsByDeletedBy` exist."""
  applicationRevisionsByDeletedByExist: Boolean

  """Filter by the object’s `applicationRevisionsByUpdatedBy` relation."""
  applicationRevisionsByUpdatedBy: CiipUserToManyApplicationRevisionFilter

  """Some related `applicationRevisionsByUpdatedBy` exist."""
  applicationRevisionsByUpdatedByExist: Boolean

  """
  Filter by the object’s `applicationRevisionStatusesByCreatedBy` relation.
  """
  applicationRevisionStatusesByCreatedBy: CiipUserToManyApplicationRevisionStatusFilter

  """Some related `applicationRevisionStatusesByCreatedBy` exist."""
  applicationRevisionStatusesByCreatedByExist: Boolean

  """
  Filter by the object’s `applicationRevisionStatusesByDeletedBy` relation.
  """
  applicationRevisionStatusesByDeletedBy: CiipUserToManyApplicationRevisionStatusFilter

  """Some related `applicationRevisionStatusesByDeletedBy` exist."""
  applicationRevisionStatusesByDeletedByExist: Boolean

  """
  Filter by the object’s `applicationRevisionStatusesByUpdatedBy` relation.
  """
  applicationRevisionStatusesByUpdatedBy: CiipUserToManyApplicationRevisionStatusFilter

  """Some related `applicationRevisionStatusesByUpdatedBy` exist."""
  applicationRevisionStatusesByUpdatedByExist: Boolean

  """Filter by the object’s `benchmarksByCreatedBy` relation."""
  benchmarksByCreatedBy: CiipUserToManyBenchmarkFilter

  """Some related `benchmarksByCreatedBy` exist."""
  benchmarksByCreatedByExist: Boolean

  """Filter by the object’s `benchmarksByDeletedBy` relation."""
  benchmarksByDeletedBy: CiipUserToManyBenchmarkFilter

  """Some related `benchmarksByDeletedBy` exist."""
  benchmarksByDeletedByExist: Boolean

  """Filter by the object’s `benchmarksByUpdatedBy` relation."""
  benchmarksByUpdatedBy: CiipUserToManyBenchmarkFilter

  """Some related `benchmarksByUpdatedBy` exist."""
  benchmarksByUpdatedByExist: Boolean

  """Filter by the object’s `certificationUrlsByCertifiedBy` relation."""
  certificationUrlsByCertifiedBy: CiipUserToManyCertificationUrlFilter

  """Some related `certificationUrlsByCertifiedBy` exist."""
  certificationUrlsByCertifiedByExist: Boolean

  """Filter by the object’s `certificationUrlsByCreatedBy` relation."""
  certificationUrlsByCreatedBy: CiipUserToManyCertificationUrlFilter

  """Some related `certificationUrlsByCreatedBy` exist."""
  certificationUrlsByCreatedByExist: Boolean

  """Filter by the object’s `certificationUrlsByDeletedBy` relation."""
  certificationUrlsByDeletedBy: CiipUserToManyCertificationUrlFilter

  """Some related `certificationUrlsByDeletedBy` exist."""
  certificationUrlsByDeletedByExist: Boolean

  """Filter by the object’s `certificationUrlsByUpdatedBy` relation."""
  certificationUrlsByUpdatedBy: CiipUserToManyCertificationUrlFilter

  """Some related `certificationUrlsByUpdatedBy` exist."""
  certificationUrlsByUpdatedByExist: Boolean

  """Filter by the object’s `ciipUserByCreatedBy` relation."""
  ciipUserByCreatedBy: CiipUserFilter

  """A related `ciipUserByCreatedBy` exists."""
  ciipUserByCreatedByExists: Boolean

  """Filter by the object’s `ciipUserByDeletedBy` relation."""
  ciipUserByDeletedBy: CiipUserFilter

  """A related `ciipUserByDeletedBy` exists."""
  ciipUserByDeletedByExists: Boolean

  """Filter by the object’s `ciipUserByUpdatedBy` relation."""
  ciipUserByUpdatedBy: CiipUserFilter

  """A related `ciipUserByUpdatedBy` exists."""
  ciipUserByUpdatedByExists: Boolean

  """Filter by the object’s `ciipUserOrganisationsByUserId` relation."""
  ciipUserOrganisationsByUserId: CiipUserToManyCiipUserOrganisationFilter

  """Some related `ciipUserOrganisationsByUserId` exist."""
  ciipUserOrganisationsByUserIdExist: Boolean

  """Filter by the object’s `ciipUsersByCreatedBy` relation."""
  ciipUsersByCreatedBy: CiipUserToManyCiipUserFilter

  """Some related `ciipUsersByCreatedBy` exist."""
  ciipUsersByCreatedByExist: Boolean

  """Filter by the object’s `ciipUsersByDeletedBy` relation."""
  ciipUsersByDeletedBy: CiipUserToManyCiipUserFilter

  """Some related `ciipUsersByDeletedBy` exist."""
  ciipUsersByDeletedByExist: Boolean

  """Filter by the object’s `ciipUsersByUpdatedBy` relation."""
  ciipUsersByUpdatedBy: CiipUserToManyCiipUserFilter

  """Some related `ciipUsersByUpdatedBy` exist."""
  ciipUsersByUpdatedByExist: Boolean

  """Filter by the object’s `createdAt` field."""
  createdAt: DatetimeFilter

  """Filter by the object’s `createdBy` field."""
  createdBy: IntFilter

  """Filter by the object’s `deletedAt` field."""
  deletedAt: DatetimeFilter

  """Filter by the object’s `deletedBy` field."""
  deletedBy: IntFilter

  """Filter by the object’s `emailAddress` field."""
  emailAddress: StringFilter

  """Filter by the object’s `emissionCategoriesByCreatedBy` relation."""
  emissionCategoriesByCreatedBy: CiipUserToManyEmissionCategoryFilter

  """Some related `emissionCategoriesByCreatedBy` exist."""
  emissionCategoriesByCreatedByExist: Boolean

  """Filter by the object’s `emissionCategoriesByDeletedBy` relation."""
  emissionCategoriesByDeletedBy: CiipUserToManyEmissionCategoryFilter

  """Some related `emissionCategoriesByDeletedBy` exist."""
  emissionCategoriesByDeletedByExist: Boolean

  """Filter by the object’s `emissionCategoriesByUpdatedBy` relation."""
  emissionCategoriesByUpdatedBy: CiipUserToManyEmissionCategoryFilter

  """Some related `emissionCategoriesByUpdatedBy` exist."""
  emissionCategoriesByUpdatedByExist: Boolean

  """Filter by the object’s `emissionCategoryGasesByCreatedBy` relation."""
  emissionCategoryGasesByCreatedBy: CiipUserToManyEmissionCategoryGasFilter

  """Some related `emissionCategoryGasesByCreatedBy` exist."""
  emissionCategoryGasesByCreatedByExist: Boolean

  """Filter by the object’s `emissionCategoryGasesByDeletedBy` relation."""
  emissionCategoryGasesByDeletedBy: CiipUserToManyEmissionCategoryGasFilter

  """Some related `emissionCategoryGasesByDeletedBy` exist."""
  emissionCategoryGasesByDeletedByExist: Boolean

  """Filter by the object’s `emissionCategoryGasesByUpdatedBy` relation."""
  emissionCategoryGasesByUpdatedBy: CiipUserToManyEmissionCategoryGasFilter

  """Some related `emissionCategoryGasesByUpdatedBy` exist."""
  emissionCategoryGasesByUpdatedByExist: Boolean

  """Filter by the object’s `firstName` field."""
  firstName: StringFilter

  """Filter by the object’s `formJsonsByCreatedBy` relation."""
  formJsonsByCreatedBy: CiipUserToManyFormJsonFilter

  """Some related `formJsonsByCreatedBy` exist."""
  formJsonsByCreatedByExist: Boolean

  """Filter by the object’s `formJsonsByDeletedBy` relation."""
  formJsonsByDeletedBy: CiipUserToManyFormJsonFilter

  """Some related `formJsonsByDeletedBy` exist."""
  formJsonsByDeletedByExist: Boolean

  """Filter by the object’s `formJsonsByUpdatedBy` relation."""
  formJsonsByUpdatedBy: CiipUserToManyFormJsonFilter

  """Some related `formJsonsByUpdatedBy` exist."""
  formJsonsByUpdatedByExist: Boolean

  """Filter by the object’s `formResultsByCreatedBy` relation."""
  formResultsByCreatedBy: CiipUserToManyFormResultFilter

  """Some related `formResultsByCreatedBy` exist."""
  formResultsByCreatedByExist: Boolean

  """Filter by the object’s `formResultsByDeletedBy` relation."""
  formResultsByDeletedBy: CiipUserToManyFormResultFilter

  """Some related `formResultsByDeletedBy` exist."""
  formResultsByDeletedByExist: Boolean

  """Filter by the object’s `formResultsByUpdatedBy` relation."""
  formResultsByUpdatedBy: CiipUserToManyFormResultFilter

  """Some related `formResultsByUpdatedBy` exist."""
  formResultsByUpdatedByExist: Boolean

  """Filter by the object’s `formResultStatusesByCreatedBy` relation."""
  formResultStatusesByCreatedBy: CiipUserToManyFormResultStatusFilter

  """Some related `formResultStatusesByCreatedBy` exist."""
  formResultStatusesByCreatedByExist: Boolean

  """Filter by the object’s `formResultStatusesByDeletedBy` relation."""
  formResultStatusesByDeletedBy: CiipUserToManyFormResultStatusFilter

  """Some related `formResultStatusesByDeletedBy` exist."""
  formResultStatusesByDeletedByExist: Boolean

  """Filter by the object’s `formResultStatusesByUpdatedBy` relation."""
  formResultStatusesByUpdatedBy: CiipUserToManyFormResultStatusFilter

  """Some related `formResultStatusesByUpdatedBy` exist."""
  formResultStatusesByUpdatedByExist: Boolean

  """Filter by the object’s `fuelsByCreatedBy` relation."""
  fuelsByCreatedBy: CiipUserToManyFuelFilter

  """Some related `fuelsByCreatedBy` exist."""
  fuelsByCreatedByExist: Boolean

  """Filter by the object’s `fuelsByDeletedBy` relation."""
  fuelsByDeletedBy: CiipUserToManyFuelFilter

  """Some related `fuelsByDeletedBy` exist."""
  fuelsByDeletedByExist: Boolean

  """Filter by the object’s `fuelsByUpdatedBy` relation."""
  fuelsByUpdatedBy: CiipUserToManyFuelFilter

  """Some related `fuelsByUpdatedBy` exist."""
  fuelsByUpdatedByExist: Boolean

  """Filter by the object’s `gasesByCreatedBy` relation."""
  gasesByCreatedBy: CiipUserToManyGasFilter

  """Some related `gasesByCreatedBy` exist."""
  gasesByCreatedByExist: Boolean

  """Filter by the object’s `gasesByDeletedBy` relation."""
  gasesByDeletedBy: CiipUserToManyGasFilter

  """Some related `gasesByDeletedBy` exist."""
  gasesByDeletedByExist: Boolean

  """Filter by the object’s `gasesByUpdatedBy` relation."""
  gasesByUpdatedBy: CiipUserToManyGasFilter

  """Some related `gasesByUpdatedBy` exist."""
  gasesByUpdatedByExist: Boolean

  """Filter by the object’s `hasCertificationRequests` field."""
  hasCertificationRequests: BooleanFilter

  """Filter by the object’s `jwtTokensBySub` relation."""
  jwtTokensBySub: CiipUserToManyJwtTokenFilter

  """Some related `jwtTokensBySub` exist."""
  jwtTokensBySubExist: Boolean

  """Filter by the object’s `lastName` field."""
  lastName: StringFilter

  """Filter by the object’s `linkedProductsByCreatedBy` relation."""
  linkedProductsByCreatedBy: CiipUserToManyLinkedProductFilter

  """Some related `linkedProductsByCreatedBy` exist."""
  linkedProductsByCreatedByExist: Boolean

  """Filter by the object’s `linkedProductsByDeletedBy` relation."""
  linkedProductsByDeletedBy: CiipUserToManyLinkedProductFilter

  """Some related `linkedProductsByDeletedBy` exist."""
  linkedProductsByDeletedByExist: Boolean

  """Filter by the object’s `linkedProductsByUpdatedBy` relation."""
  linkedProductsByUpdatedBy: CiipUserToManyLinkedProductFilter

  """Some related `linkedProductsByUpdatedBy` exist."""
  linkedProductsByUpdatedByExist: Boolean

  """Negates the expression."""
  not: CiipUserFilter

  """Filter by the object’s `occupation` field."""
  occupation: StringFilter

  """Checks for any expressions in this list."""
  or: [CiipUserFilter!]

  """Filter by the object’s `phoneNumber` field."""
  phoneNumber: StringFilter

  """Filter by the object’s `productsByCreatedBy` relation."""
  productsByCreatedBy: CiipUserToManyProductFilter

  """Some related `productsByCreatedBy` exist."""
  productsByCreatedByExist: Boolean

  """Filter by the object’s `productsByDeletedBy` relation."""
  productsByDeletedBy: CiipUserToManyProductFilter

  """Some related `productsByDeletedBy` exist."""
  productsByDeletedByExist: Boolean

  """Filter by the object’s `productsByUpdatedBy` relation."""
  productsByUpdatedBy: CiipUserToManyProductFilter

  """Some related `productsByUpdatedBy` exist."""
  productsByUpdatedByExist: Boolean

  """Filter by the object’s `reviewCommentsByCreatedBy` relation."""
  reviewCommentsByCreatedBy: CiipUserToManyReviewCommentFilter

  """Some related `reviewCommentsByCreatedBy` exist."""
  reviewCommentsByCreatedByExist: Boolean

  """Filter by the object’s `reviewCommentsByDeletedBy` relation."""
  reviewCommentsByDeletedBy: CiipUserToManyReviewCommentFilter

  """Some related `reviewCommentsByDeletedBy` exist."""
  reviewCommentsByDeletedByExist: Boolean

  """Filter by the object’s `reviewCommentsByUpdatedBy` relation."""
  reviewCommentsByUpdatedBy: CiipUserToManyReviewCommentFilter

  """Some related `reviewCommentsByUpdatedBy` exist."""
  reviewCommentsByUpdatedByExist: Boolean

  """Filter by the object’s `rowId` field."""
  rowId: IntFilter

  """Filter by the object’s `updatedAt` field."""
  updatedAt: DatetimeFilter

  """Filter by the object’s `updatedBy` field."""
  updatedBy: IntFilter

  """Filter by the object’s `uuid` field."""
  uuid: UUIDFilter
}

"""
A connection to a list of `FormJson` values, with data from `FormResult`.
"""
type CiipUserFormJsonsByFormResultCreatedByAndFormIdManyToManyConnection {
  """
  A list of edges which contains the `FormJson`, info from the `FormResult`, and the cursor to aid in pagination.
  """
  edges: [CiipUserFormJsonsByFormResultCreatedByAndFormIdManyToManyEdge!]!

  """A list of `FormJson` objects."""
  nodes: [FormJson]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `FormJson` you could get from the connection."""
  totalCount: Int!
}

"""A `FormJson` edge in the connection, with data from `FormResult`."""
type CiipUserFormJsonsByFormResultCreatedByAndFormIdManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """Reads and enables pagination through a set of `FormResult`."""
  formResultsByFormId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: FormResultCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: FormResultFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `FormResult`."""
    orderBy: [FormResultsOrderBy!] = [PRIMARY_KEY_ASC]
  ): FormResultsConnection!

  """The `FormJson` at the end of the edge."""
  node: FormJson
}

"""
A connection to a list of `FormJson` values, with data from `FormResult`.
"""
type CiipUserFormJsonsByFormResultDeletedByAndFormIdManyToManyConnection {
  """
  A list of edges which contains the `FormJson`, info from the `FormResult`, and the cursor to aid in pagination.
  """
  edges: [CiipUserFormJsonsByFormResultDeletedByAndFormIdManyToManyEdge!]!

  """A list of `FormJson` objects."""
  nodes: [FormJson]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `FormJson` you could get from the connection."""
  totalCount: Int!
}

"""A `FormJson` edge in the connection, with data from `FormResult`."""
type CiipUserFormJsonsByFormResultDeletedByAndFormIdManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """Reads and enables pagination through a set of `FormResult`."""
  formResultsByFormId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: FormResultCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: FormResultFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `FormResult`."""
    orderBy: [FormResultsOrderBy!] = [PRIMARY_KEY_ASC]
  ): FormResultsConnection!

  """The `FormJson` at the end of the edge."""
  node: FormJson
}

"""
A connection to a list of `FormJson` values, with data from `FormResult`.
"""
type CiipUserFormJsonsByFormResultUpdatedByAndFormIdManyToManyConnection {
  """
  A list of edges which contains the `FormJson`, info from the `FormResult`, and the cursor to aid in pagination.
  """
  edges: [CiipUserFormJsonsByFormResultUpdatedByAndFormIdManyToManyEdge!]!

  """A list of `FormJson` objects."""
  nodes: [FormJson]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `FormJson` you could get from the connection."""
  totalCount: Int!
}

"""A `FormJson` edge in the connection, with data from `FormResult`."""
type CiipUserFormJsonsByFormResultUpdatedByAndFormIdManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """Reads and enables pagination through a set of `FormResult`."""
  formResultsByFormId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: FormResultCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: FormResultFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `FormResult`."""
    orderBy: [FormResultsOrderBy!] = [PRIMARY_KEY_ASC]
  ): FormResultsConnection!

  """The `FormJson` at the end of the edge."""
  node: FormJson
}

"""
A connection to a list of `FormJson` values, with data from `ReviewComment`.
"""
type CiipUserFormJsonsByReviewCommentCreatedByAndFormIdManyToManyConnection {
  """
  A list of edges which contains the `FormJson`, info from the `ReviewComment`, and the cursor to aid in pagination.
  """
  edges: [CiipUserFormJsonsByReviewCommentCreatedByAndFormIdManyToManyEdge!]!

  """A list of `FormJson` objects."""
  nodes: [FormJson]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `FormJson` you could get from the connection."""
  totalCount: Int!
}

"""A `FormJson` edge in the connection, with data from `ReviewComment`."""
type CiipUserFormJsonsByReviewCommentCreatedByAndFormIdManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `FormJson` at the end of the edge."""
  node: FormJson

  """Reads and enables pagination through a set of `ReviewComment`."""
  reviewCommentsByFormId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ReviewCommentCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ReviewCommentFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `ReviewComment`."""
    orderBy: [ReviewCommentsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ReviewCommentsConnection!
}

"""
A connection to a list of `FormJson` values, with data from `ReviewComment`.
"""
type CiipUserFormJsonsByReviewCommentDeletedByAndFormIdManyToManyConnection {
  """
  A list of edges which contains the `FormJson`, info from the `ReviewComment`, and the cursor to aid in pagination.
  """
  edges: [CiipUserFormJsonsByReviewCommentDeletedByAndFormIdManyToManyEdge!]!

  """A list of `FormJson` objects."""
  nodes: [FormJson]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `FormJson` you could get from the connection."""
  totalCount: Int!
}

"""A `FormJson` edge in the connection, with data from `ReviewComment`."""
type CiipUserFormJsonsByReviewCommentDeletedByAndFormIdManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `FormJson` at the end of the edge."""
  node: FormJson

  """Reads and enables pagination through a set of `ReviewComment`."""
  reviewCommentsByFormId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ReviewCommentCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ReviewCommentFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `ReviewComment`."""
    orderBy: [ReviewCommentsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ReviewCommentsConnection!
}

"""
A connection to a list of `FormJson` values, with data from `ReviewComment`.
"""
type CiipUserFormJsonsByReviewCommentUpdatedByAndFormIdManyToManyConnection {
  """
  A list of edges which contains the `FormJson`, info from the `ReviewComment`, and the cursor to aid in pagination.
  """
  edges: [CiipUserFormJsonsByReviewCommentUpdatedByAndFormIdManyToManyEdge!]!

  """A list of `FormJson` objects."""
  nodes: [FormJson]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `FormJson` you could get from the connection."""
  totalCount: Int!
}

"""A `FormJson` edge in the connection, with data from `ReviewComment`."""
type CiipUserFormJsonsByReviewCommentUpdatedByAndFormIdManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `FormJson` at the end of the edge."""
  node: FormJson

  """Reads and enables pagination through a set of `ReviewComment`."""
  reviewCommentsByFormId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ReviewCommentCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ReviewCommentFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `ReviewComment`."""
    orderBy: [ReviewCommentsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ReviewCommentsConnection!
}

"""
A connection to a list of `Gas` values, with data from `EmissionCategoryGas`.
"""
type CiipUserGasesByEmissionCategoryGasCreatedByAndGasIdManyToManyConnection {
  """
  A list of edges which contains the `Gas`, info from the `EmissionCategoryGas`, and the cursor to aid in pagination.
  """
  edges: [CiipUserGasesByEmissionCategoryGasCreatedByAndGasIdManyToManyEdge!]!

  """A list of `Gas` objects."""
  nodes: [Gas]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Gas` you could get from the connection."""
  totalCount: Int!
}

"""A `Gas` edge in the connection, with data from `EmissionCategoryGas`."""
type CiipUserGasesByEmissionCategoryGasCreatedByAndGasIdManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """Reads and enables pagination through a set of `EmissionCategoryGas`."""
  emissionCategoryGasesByGasId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: EmissionCategoryGasCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: EmissionCategoryGasFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `EmissionCategoryGas`."""
    orderBy: [EmissionCategoryGasesOrderBy!] = [PRIMARY_KEY_ASC]
  ): EmissionCategoryGasesConnection!

  """The `Gas` at the end of the edge."""
  node: Gas
}

"""
A connection to a list of `Gas` values, with data from `EmissionCategoryGas`.
"""
type CiipUserGasesByEmissionCategoryGasDeletedByAndGasIdManyToManyConnection {
  """
  A list of edges which contains the `Gas`, info from the `EmissionCategoryGas`, and the cursor to aid in pagination.
  """
  edges: [CiipUserGasesByEmissionCategoryGasDeletedByAndGasIdManyToManyEdge!]!

  """A list of `Gas` objects."""
  nodes: [Gas]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Gas` you could get from the connection."""
  totalCount: Int!
}

"""A `Gas` edge in the connection, with data from `EmissionCategoryGas`."""
type CiipUserGasesByEmissionCategoryGasDeletedByAndGasIdManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """Reads and enables pagination through a set of `EmissionCategoryGas`."""
  emissionCategoryGasesByGasId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: EmissionCategoryGasCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: EmissionCategoryGasFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `EmissionCategoryGas`."""
    orderBy: [EmissionCategoryGasesOrderBy!] = [PRIMARY_KEY_ASC]
  ): EmissionCategoryGasesConnection!

  """The `Gas` at the end of the edge."""
  node: Gas
}

"""
A connection to a list of `Gas` values, with data from `EmissionCategoryGas`.
"""
type CiipUserGasesByEmissionCategoryGasUpdatedByAndGasIdManyToManyConnection {
  """
  A list of edges which contains the `Gas`, info from the `EmissionCategoryGas`, and the cursor to aid in pagination.
  """
  edges: [CiipUserGasesByEmissionCategoryGasUpdatedByAndGasIdManyToManyEdge!]!

  """A list of `Gas` objects."""
  nodes: [Gas]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Gas` you could get from the connection."""
  totalCount: Int!
}

"""A `Gas` edge in the connection, with data from `EmissionCategoryGas`."""
type CiipUserGasesByEmissionCategoryGasUpdatedByAndGasIdManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """Reads and enables pagination through a set of `EmissionCategoryGas`."""
  emissionCategoryGasesByGasId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: EmissionCategoryGasCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: EmissionCategoryGasFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `EmissionCategoryGas`."""
    orderBy: [EmissionCategoryGasesOrderBy!] = [PRIMARY_KEY_ASC]
  ): EmissionCategoryGasesConnection!

  """The `Gas` at the end of the edge."""
  node: Gas
}

"""An input for mutations affecting `CiipUser`"""
input CiipUserInput {
  """The date the user was updated"""
  createdAt: Datetime

  """The person who updated the user"""
  createdBy: Int

  """The date the user was deleted"""
  deletedAt: Datetime

  """The person who deleted the user"""
  deletedBy: Int

  """User's email address"""
  emailAddress: String

  """User's first name"""
  firstName: String

  """User's last name"""
  lastName: String

  """User's occupation"""
  occupation: String

  """User's phone number"""
  phoneNumber: String

  """The date the user was updated"""
  updatedAt: Datetime

  """The person who updated the user"""
  updatedBy: Int

  """Universally Unique ID for the user used for auth"""
  uuid: UUID!
}

"""
Table containing the access rights for a user to report on behalf of an organisation
"""
type CiipUserOrganisation implements Node {
  """
  Reads a single `CiipUser` that is related to this `CiipUserOrganisation`.
  """
  ciipUserByUserId: CiipUser

  """
  This function is a wrapper to return email_address from the ciip_user object as a scalar
  """
  emailAddress: String

  """
  This function is a wrapper to return first_name from the ciip_user object as a scalar
  """
  firstName: String

  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  id: ID!

  """
  This function is a wrapper to return last_name from the ciip_user object as a scalar
  """
  lastName: String

  """
  This function is a wrapper to return operator_name from the organisation object as a scalar
  """
  operatorName: String

  """
  Reads a single `Organisation` that is related to this `CiipUserOrganisation`.
  """
  organisationByOrganisationId: Organisation

  """foreign key that references the organisation table"""
  organisationId: Int!

  """ciip_user_organisation primary key"""
  rowId: Int!

  """the status of the request to report on behalf of an organisation"""
  status: CiipUserOrganisationStatus

  """foreign key that references the user table"""
  userId: Int!
}

"""
A condition to be used against `CiipUserOrganisation` object types. All fields
are tested for equality and combined with a logical ‘and.’
"""
input CiipUserOrganisationCondition {
  """Checks for equality with the object’s `organisationId` field."""
  organisationId: Int

  """Checks for equality with the object’s `rowId` field."""
  rowId: Int

  """Checks for equality with the object’s `status` field."""
  status: CiipUserOrganisationStatus

  """Checks for equality with the object’s `userId` field."""
  userId: Int
}

"""
A filter to be used against `CiipUserOrganisation` object types. All fields are combined with a logical ‘and.’
"""
input CiipUserOrganisationFilter {
  """Checks for all expressions in this list."""
  and: [CiipUserOrganisationFilter!]

  """Filter by the object’s `ciipUserByUserId` relation."""
  ciipUserByUserId: CiipUserFilter

  """Filter by the object’s `emailAddress` field."""
  emailAddress: StringFilter

  """Filter by the object’s `firstName` field."""
  firstName: StringFilter

  """Filter by the object’s `lastName` field."""
  lastName: StringFilter

  """Negates the expression."""
  not: CiipUserOrganisationFilter

  """Filter by the object’s `operatorName` field."""
  operatorName: StringFilter

  """Checks for any expressions in this list."""
  or: [CiipUserOrganisationFilter!]

  """Filter by the object’s `organisationByOrganisationId` relation."""
  organisationByOrganisationId: OrganisationFilter

  """Filter by the object’s `organisationId` field."""
  organisationId: IntFilter

  """Filter by the object’s `rowId` field."""
  rowId: IntFilter

  """Filter by the object’s `status` field."""
  status: CiipUserOrganisationStatusFilter

  """Filter by the object’s `userId` field."""
  userId: IntFilter
}

"""An input for mutations affecting `CiipUserOrganisation`"""
input CiipUserOrganisationInput {
  """foreign key that references the organisation table"""
  organisationId: Int!

  """the status of the request to report on behalf of an organisation"""
  status: CiipUserOrganisationStatus

  """foreign key that references the user table"""
  userId: Int!
}

"""
Represents an update to a `CiipUserOrganisation`. Fields that are set will be updated.
"""
input CiipUserOrganisationPatch {
  """foreign key that references the organisation table"""
  organisationId: Int

  """the status of the request to report on behalf of an organisation"""
  status: CiipUserOrganisationStatus

  """foreign key that references the user table"""
  userId: Int
}

"""
A connection to a list of `Organisation` values, with data from `CiipUserOrganisation`.
"""
type CiipUserOrganisationsByCiipUserOrganisationUserIdAndOrganisationIdManyToManyConnection {
  """
  A list of edges which contains the `Organisation`, info from the
  `CiipUserOrganisation`, and the cursor to aid in pagination.
  """
  edges: [CiipUserOrganisationsByCiipUserOrganisationUserIdAndOrganisationIdManyToManyEdge!]!

  """A list of `Organisation` objects."""
  nodes: [Organisation]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Organisation` you could get from the connection."""
  totalCount: Int!
}

"""
A `Organisation` edge in the connection, with data from `CiipUserOrganisation`.
"""
type CiipUserOrganisationsByCiipUserOrganisationUserIdAndOrganisationIdManyToManyEdge {
  """Reads and enables pagination through a set of `CiipUserOrganisation`."""
  ciipUserOrganisationsByOrganisationId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CiipUserOrganisationCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CiipUserOrganisationFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CiipUserOrganisation`."""
    orderBy: [CiipUserOrganisationsOrderBy!] = [PRIMARY_KEY_ASC]
  ): CiipUserOrganisationsConnection!

  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Organisation` at the end of the edge."""
  node: Organisation
}

"""A connection to a list of `CiipUserOrganisation` values."""
type CiipUserOrganisationsConnection {
  """
  A list of edges which contains the `CiipUserOrganisation` and cursor to aid in pagination.
  """
  edges: [CiipUserOrganisationsEdge!]!

  """A list of `CiipUserOrganisation` objects."""
  nodes: [CiipUserOrganisation]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `CiipUserOrganisation` you could get from the connection.
  """
  totalCount: Int!
}

"""A `CiipUserOrganisation` edge in the connection."""
type CiipUserOrganisationsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CiipUserOrganisation` at the end of the edge."""
  node: CiipUserOrganisation
}

"""Methods to use when ordering `CiipUserOrganisation`."""
enum CiipUserOrganisationsOrderBy {
  EMAIL_ADDRESS_ASC
  EMAIL_ADDRESS_DESC
  FIRST_NAME_ASC
  FIRST_NAME_DESC
  ID_ASC
  ID_DESC
  LAST_NAME_ASC
  LAST_NAME_DESC
  NATURAL
  OPERATOR_NAME_ASC
  OPERATOR_NAME_DESC
  ORGANISATION_ID_ASC
  ORGANISATION_ID_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  STATUS_ASC
  STATUS_DESC
  USER_ID_ASC
  USER_ID_DESC
}

enum CiipUserOrganisationStatus {
  APPROVED
  PENDING
  REJECTED
}

"""
A filter to be used against CiipUserOrganisationStatus fields. All fields are combined with a logical ‘and.’
"""
input CiipUserOrganisationStatusFilter {
  """
  Not equal to the specified value, treating null like an ordinary value.
  """
  distinctFrom: CiipUserOrganisationStatus

  """Equal to the specified value."""
  equalTo: CiipUserOrganisationStatus

  """Greater than the specified value."""
  greaterThan: CiipUserOrganisationStatus

  """Greater than or equal to the specified value."""
  greaterThanOrEqualTo: CiipUserOrganisationStatus

  """Included in the specified list."""
  in: [CiipUserOrganisationStatus!]

  """
  Is null (if `true` is specified) or is not null (if `false` is specified).
  """
  isNull: Boolean

  """Less than the specified value."""
  lessThan: CiipUserOrganisationStatus

  """Less than or equal to the specified value."""
  lessThanOrEqualTo: CiipUserOrganisationStatus

  """Equal to the specified value, treating null like an ordinary value."""
  notDistinctFrom: CiipUserOrganisationStatus

  """Not equal to the specified value."""
  notEqualTo: CiipUserOrganisationStatus

  """Not included in the specified list."""
  notIn: [CiipUserOrganisationStatus!]
}

"""
Represents an update to a `CiipUser`. Fields that are set will be updated.
"""
input CiipUserPatch {
  """The date the user was updated"""
  createdAt: Datetime

  """The person who updated the user"""
  createdBy: Int

  """The date the user was deleted"""
  deletedAt: Datetime

  """The person who deleted the user"""
  deletedBy: Int

  """User's email address"""
  emailAddress: String

  """User's first name"""
  firstName: String

  """User's last name"""
  lastName: String

  """User's occupation"""
  occupation: String

  """User's phone number"""
  phoneNumber: String

  """The date the user was updated"""
  updatedAt: Datetime

  """The person who updated the user"""
  updatedBy: Int

  """Universally Unique ID for the user used for auth"""
  uuid: UUID
}

"""
A connection to a list of `Product` values, with data from `Benchmark`.
"""
type CiipUserProductsByBenchmarkCreatedByAndProductIdManyToManyConnection {
  """
  A list of edges which contains the `Product`, info from the `Benchmark`, and the cursor to aid in pagination.
  """
  edges: [CiipUserProductsByBenchmarkCreatedByAndProductIdManyToManyEdge!]!

  """A list of `Product` objects."""
  nodes: [Product]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Product` you could get from the connection."""
  totalCount: Int!
}

"""A `Product` edge in the connection, with data from `Benchmark`."""
type CiipUserProductsByBenchmarkCreatedByAndProductIdManyToManyEdge {
  """Reads and enables pagination through a set of `Benchmark`."""
  benchmarksByProductId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: BenchmarkCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: BenchmarkFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Benchmark`."""
    orderBy: [BenchmarksOrderBy!] = [PRIMARY_KEY_ASC]
  ): BenchmarksConnection!

  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Product` at the end of the edge."""
  node: Product
}

"""
A connection to a list of `Product` values, with data from `Benchmark`.
"""
type CiipUserProductsByBenchmarkDeletedByAndProductIdManyToManyConnection {
  """
  A list of edges which contains the `Product`, info from the `Benchmark`, and the cursor to aid in pagination.
  """
  edges: [CiipUserProductsByBenchmarkDeletedByAndProductIdManyToManyEdge!]!

  """A list of `Product` objects."""
  nodes: [Product]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Product` you could get from the connection."""
  totalCount: Int!
}

"""A `Product` edge in the connection, with data from `Benchmark`."""
type CiipUserProductsByBenchmarkDeletedByAndProductIdManyToManyEdge {
  """Reads and enables pagination through a set of `Benchmark`."""
  benchmarksByProductId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: BenchmarkCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: BenchmarkFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Benchmark`."""
    orderBy: [BenchmarksOrderBy!] = [PRIMARY_KEY_ASC]
  ): BenchmarksConnection!

  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Product` at the end of the edge."""
  node: Product
}

"""
A connection to a list of `Product` values, with data from `Benchmark`.
"""
type CiipUserProductsByBenchmarkUpdatedByAndProductIdManyToManyConnection {
  """
  A list of edges which contains the `Product`, info from the `Benchmark`, and the cursor to aid in pagination.
  """
  edges: [CiipUserProductsByBenchmarkUpdatedByAndProductIdManyToManyEdge!]!

  """A list of `Product` objects."""
  nodes: [Product]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Product` you could get from the connection."""
  totalCount: Int!
}

"""A `Product` edge in the connection, with data from `Benchmark`."""
type CiipUserProductsByBenchmarkUpdatedByAndProductIdManyToManyEdge {
  """Reads and enables pagination through a set of `Benchmark`."""
  benchmarksByProductId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: BenchmarkCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: BenchmarkFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Benchmark`."""
    orderBy: [BenchmarksOrderBy!] = [PRIMARY_KEY_ASC]
  ): BenchmarksConnection!

  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Product` at the end of the edge."""
  node: Product
}

"""
A connection to a list of `Product` values, with data from `LinkedProduct`.
"""
type CiipUserProductsByLinkedProductCreatedByAndLinkedProductIdManyToManyConnection {
  """
  A list of edges which contains the `Product`, info from the `LinkedProduct`, and the cursor to aid in pagination.
  """
  edges: [CiipUserProductsByLinkedProductCreatedByAndLinkedProductIdManyToManyEdge!]!

  """A list of `Product` objects."""
  nodes: [Product]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Product` you could get from the connection."""
  totalCount: Int!
}

"""A `Product` edge in the connection, with data from `LinkedProduct`."""
type CiipUserProductsByLinkedProductCreatedByAndLinkedProductIdManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """Reads and enables pagination through a set of `LinkedProduct`."""
  linkedProductsByLinkedProductId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: LinkedProductCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: LinkedProductFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `LinkedProduct`."""
    orderBy: [LinkedProductsOrderBy!] = [PRIMARY_KEY_ASC]
  ): LinkedProductsConnection!

  """The `Product` at the end of the edge."""
  node: Product
}

"""
A connection to a list of `Product` values, with data from `LinkedProduct`.
"""
type CiipUserProductsByLinkedProductCreatedByAndProductIdManyToManyConnection {
  """
  A list of edges which contains the `Product`, info from the `LinkedProduct`, and the cursor to aid in pagination.
  """
  edges: [CiipUserProductsByLinkedProductCreatedByAndProductIdManyToManyEdge!]!

  """A list of `Product` objects."""
  nodes: [Product]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Product` you could get from the connection."""
  totalCount: Int!
}

"""A `Product` edge in the connection, with data from `LinkedProduct`."""
type CiipUserProductsByLinkedProductCreatedByAndProductIdManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """Reads and enables pagination through a set of `LinkedProduct`."""
  linkedProductsByProductId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: LinkedProductCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: LinkedProductFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `LinkedProduct`."""
    orderBy: [LinkedProductsOrderBy!] = [PRIMARY_KEY_ASC]
  ): LinkedProductsConnection!

  """The `Product` at the end of the edge."""
  node: Product
}

"""
A connection to a list of `Product` values, with data from `LinkedProduct`.
"""
type CiipUserProductsByLinkedProductDeletedByAndLinkedProductIdManyToManyConnection {
  """
  A list of edges which contains the `Product`, info from the `LinkedProduct`, and the cursor to aid in pagination.
  """
  edges: [CiipUserProductsByLinkedProductDeletedByAndLinkedProductIdManyToManyEdge!]!

  """A list of `Product` objects."""
  nodes: [Product]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Product` you could get from the connection."""
  totalCount: Int!
}

"""A `Product` edge in the connection, with data from `LinkedProduct`."""
type CiipUserProductsByLinkedProductDeletedByAndLinkedProductIdManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """Reads and enables pagination through a set of `LinkedProduct`."""
  linkedProductsByLinkedProductId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: LinkedProductCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: LinkedProductFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `LinkedProduct`."""
    orderBy: [LinkedProductsOrderBy!] = [PRIMARY_KEY_ASC]
  ): LinkedProductsConnection!

  """The `Product` at the end of the edge."""
  node: Product
}

"""
A connection to a list of `Product` values, with data from `LinkedProduct`.
"""
type CiipUserProductsByLinkedProductDeletedByAndProductIdManyToManyConnection {
  """
  A list of edges which contains the `Product`, info from the `LinkedProduct`, and the cursor to aid in pagination.
  """
  edges: [CiipUserProductsByLinkedProductDeletedByAndProductIdManyToManyEdge!]!

  """A list of `Product` objects."""
  nodes: [Product]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Product` you could get from the connection."""
  totalCount: Int!
}

"""A `Product` edge in the connection, with data from `LinkedProduct`."""
type CiipUserProductsByLinkedProductDeletedByAndProductIdManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """Reads and enables pagination through a set of `LinkedProduct`."""
  linkedProductsByProductId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: LinkedProductCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: LinkedProductFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `LinkedProduct`."""
    orderBy: [LinkedProductsOrderBy!] = [PRIMARY_KEY_ASC]
  ): LinkedProductsConnection!

  """The `Product` at the end of the edge."""
  node: Product
}

"""
A connection to a list of `Product` values, with data from `LinkedProduct`.
"""
type CiipUserProductsByLinkedProductUpdatedByAndLinkedProductIdManyToManyConnection {
  """
  A list of edges which contains the `Product`, info from the `LinkedProduct`, and the cursor to aid in pagination.
  """
  edges: [CiipUserProductsByLinkedProductUpdatedByAndLinkedProductIdManyToManyEdge!]!

  """A list of `Product` objects."""
  nodes: [Product]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Product` you could get from the connection."""
  totalCount: Int!
}

"""A `Product` edge in the connection, with data from `LinkedProduct`."""
type CiipUserProductsByLinkedProductUpdatedByAndLinkedProductIdManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """Reads and enables pagination through a set of `LinkedProduct`."""
  linkedProductsByLinkedProductId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: LinkedProductCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: LinkedProductFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `LinkedProduct`."""
    orderBy: [LinkedProductsOrderBy!] = [PRIMARY_KEY_ASC]
  ): LinkedProductsConnection!

  """The `Product` at the end of the edge."""
  node: Product
}

"""
A connection to a list of `Product` values, with data from `LinkedProduct`.
"""
type CiipUserProductsByLinkedProductUpdatedByAndProductIdManyToManyConnection {
  """
  A list of edges which contains the `Product`, info from the `LinkedProduct`, and the cursor to aid in pagination.
  """
  edges: [CiipUserProductsByLinkedProductUpdatedByAndProductIdManyToManyEdge!]!

  """A list of `Product` objects."""
  nodes: [Product]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Product` you could get from the connection."""
  totalCount: Int!
}

"""A `Product` edge in the connection, with data from `LinkedProduct`."""
type CiipUserProductsByLinkedProductUpdatedByAndProductIdManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """Reads and enables pagination through a set of `LinkedProduct`."""
  linkedProductsByProductId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: LinkedProductCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: LinkedProductFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `LinkedProduct`."""
    orderBy: [LinkedProductsOrderBy!] = [PRIMARY_KEY_ASC]
  ): LinkedProductsConnection!

  """The `Product` at the end of the edge."""
  node: Product
}

"""
A connection to a list of `ReportingYear` values, with data from `Benchmark`.
"""
type CiipUserReportingYearsByBenchmarkCreatedByAndEndReportingYearManyToManyConnection {
  """
  A list of edges which contains the `ReportingYear`, info from the `Benchmark`, and the cursor to aid in pagination.
  """
  edges: [CiipUserReportingYearsByBenchmarkCreatedByAndEndReportingYearManyToManyEdge!]!

  """A list of `ReportingYear` objects."""
  nodes: [ReportingYear]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `ReportingYear` you could get from the connection."""
  totalCount: Int!
}

"""A `ReportingYear` edge in the connection, with data from `Benchmark`."""
type CiipUserReportingYearsByBenchmarkCreatedByAndEndReportingYearManyToManyEdge {
  """Reads and enables pagination through a set of `Benchmark`."""
  benchmarksByEndReportingYear(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: BenchmarkCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: BenchmarkFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Benchmark`."""
    orderBy: [BenchmarksOrderBy!] = [PRIMARY_KEY_ASC]
  ): BenchmarksConnection!

  """A cursor for use in pagination."""
  cursor: Cursor

  """The `ReportingYear` at the end of the edge."""
  node: ReportingYear
}

"""
A connection to a list of `ReportingYear` values, with data from `Benchmark`.
"""
type CiipUserReportingYearsByBenchmarkCreatedByAndStartReportingYearManyToManyConnection {
  """
  A list of edges which contains the `ReportingYear`, info from the `Benchmark`, and the cursor to aid in pagination.
  """
  edges: [CiipUserReportingYearsByBenchmarkCreatedByAndStartReportingYearManyToManyEdge!]!

  """A list of `ReportingYear` objects."""
  nodes: [ReportingYear]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `ReportingYear` you could get from the connection."""
  totalCount: Int!
}

"""A `ReportingYear` edge in the connection, with data from `Benchmark`."""
type CiipUserReportingYearsByBenchmarkCreatedByAndStartReportingYearManyToManyEdge {
  """Reads and enables pagination through a set of `Benchmark`."""
  benchmarksByStartReportingYear(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: BenchmarkCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: BenchmarkFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Benchmark`."""
    orderBy: [BenchmarksOrderBy!] = [PRIMARY_KEY_ASC]
  ): BenchmarksConnection!

  """A cursor for use in pagination."""
  cursor: Cursor

  """The `ReportingYear` at the end of the edge."""
  node: ReportingYear
}

"""
A connection to a list of `ReportingYear` values, with data from `Benchmark`.
"""
type CiipUserReportingYearsByBenchmarkDeletedByAndEndReportingYearManyToManyConnection {
  """
  A list of edges which contains the `ReportingYear`, info from the `Benchmark`, and the cursor to aid in pagination.
  """
  edges: [CiipUserReportingYearsByBenchmarkDeletedByAndEndReportingYearManyToManyEdge!]!

  """A list of `ReportingYear` objects."""
  nodes: [ReportingYear]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `ReportingYear` you could get from the connection."""
  totalCount: Int!
}

"""A `ReportingYear` edge in the connection, with data from `Benchmark`."""
type CiipUserReportingYearsByBenchmarkDeletedByAndEndReportingYearManyToManyEdge {
  """Reads and enables pagination through a set of `Benchmark`."""
  benchmarksByEndReportingYear(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: BenchmarkCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: BenchmarkFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Benchmark`."""
    orderBy: [BenchmarksOrderBy!] = [PRIMARY_KEY_ASC]
  ): BenchmarksConnection!

  """A cursor for use in pagination."""
  cursor: Cursor

  """The `ReportingYear` at the end of the edge."""
  node: ReportingYear
}

"""
A connection to a list of `ReportingYear` values, with data from `Benchmark`.
"""
type CiipUserReportingYearsByBenchmarkDeletedByAndStartReportingYearManyToManyConnection {
  """
  A list of edges which contains the `ReportingYear`, info from the `Benchmark`, and the cursor to aid in pagination.
  """
  edges: [CiipUserReportingYearsByBenchmarkDeletedByAndStartReportingYearManyToManyEdge!]!

  """A list of `ReportingYear` objects."""
  nodes: [ReportingYear]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `ReportingYear` you could get from the connection."""
  totalCount: Int!
}

"""A `ReportingYear` edge in the connection, with data from `Benchmark`."""
type CiipUserReportingYearsByBenchmarkDeletedByAndStartReportingYearManyToManyEdge {
  """Reads and enables pagination through a set of `Benchmark`."""
  benchmarksByStartReportingYear(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: BenchmarkCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: BenchmarkFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Benchmark`."""
    orderBy: [BenchmarksOrderBy!] = [PRIMARY_KEY_ASC]
  ): BenchmarksConnection!

  """A cursor for use in pagination."""
  cursor: Cursor

  """The `ReportingYear` at the end of the edge."""
  node: ReportingYear
}

"""
A connection to a list of `ReportingYear` values, with data from `Benchmark`.
"""
type CiipUserReportingYearsByBenchmarkUpdatedByAndEndReportingYearManyToManyConnection {
  """
  A list of edges which contains the `ReportingYear`, info from the `Benchmark`, and the cursor to aid in pagination.
  """
  edges: [CiipUserReportingYearsByBenchmarkUpdatedByAndEndReportingYearManyToManyEdge!]!

  """A list of `ReportingYear` objects."""
  nodes: [ReportingYear]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `ReportingYear` you could get from the connection."""
  totalCount: Int!
}

"""A `ReportingYear` edge in the connection, with data from `Benchmark`."""
type CiipUserReportingYearsByBenchmarkUpdatedByAndEndReportingYearManyToManyEdge {
  """Reads and enables pagination through a set of `Benchmark`."""
  benchmarksByEndReportingYear(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: BenchmarkCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: BenchmarkFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Benchmark`."""
    orderBy: [BenchmarksOrderBy!] = [PRIMARY_KEY_ASC]
  ): BenchmarksConnection!

  """A cursor for use in pagination."""
  cursor: Cursor

  """The `ReportingYear` at the end of the edge."""
  node: ReportingYear
}

"""
A connection to a list of `ReportingYear` values, with data from `Benchmark`.
"""
type CiipUserReportingYearsByBenchmarkUpdatedByAndStartReportingYearManyToManyConnection {
  """
  A list of edges which contains the `ReportingYear`, info from the `Benchmark`, and the cursor to aid in pagination.
  """
  edges: [CiipUserReportingYearsByBenchmarkUpdatedByAndStartReportingYearManyToManyEdge!]!

  """A list of `ReportingYear` objects."""
  nodes: [ReportingYear]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `ReportingYear` you could get from the connection."""
  totalCount: Int!
}

"""A `ReportingYear` edge in the connection, with data from `Benchmark`."""
type CiipUserReportingYearsByBenchmarkUpdatedByAndStartReportingYearManyToManyEdge {
  """Reads and enables pagination through a set of `Benchmark`."""
  benchmarksByStartReportingYear(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: BenchmarkCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: BenchmarkFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Benchmark`."""
    orderBy: [BenchmarksOrderBy!] = [PRIMARY_KEY_ASC]
  ): BenchmarksConnection!

  """A cursor for use in pagination."""
  cursor: Cursor

  """The `ReportingYear` at the end of the edge."""
  node: ReportingYear
}

"""A connection to a list of `CiipUser` values."""
type CiipUsersConnection {
  """
  A list of edges which contains the `CiipUser` and cursor to aid in pagination.
  """
  edges: [CiipUsersEdge!]!

  """A list of `CiipUser` objects."""
  nodes: [CiipUser]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CiipUser` you could get from the connection."""
  totalCount: Int!
}

"""A `CiipUser` edge in the connection."""
type CiipUsersEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CiipUser` at the end of the edge."""
  node: CiipUser
}

"""Methods to use when ordering `CiipUser`."""
enum CiipUsersOrderBy {
  CREATED_AT_ASC
  CREATED_AT_DESC
  CREATED_BY_ASC
  CREATED_BY_DESC
  DELETED_AT_ASC
  DELETED_AT_DESC
  DELETED_BY_ASC
  DELETED_BY_DESC
  EMAIL_ADDRESS_ASC
  EMAIL_ADDRESS_DESC
  FIRST_NAME_ASC
  FIRST_NAME_DESC
  ID_ASC
  ID_DESC
  LAST_NAME_ASC
  LAST_NAME_DESC
  NATURAL
  OCCUPATION_ASC
  OCCUPATION_DESC
  PHONE_NUMBER_ASC
  PHONE_NUMBER_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  UPDATED_AT_ASC
  UPDATED_AT_DESC
  UPDATED_BY_ASC
  UPDATED_BY_DESC
  UUID_ASC
  UUID_DESC
}

"""
A filter to be used against many `ApplicationRevision` object types. All fields are combined with a logical ‘and.’
"""
input CiipUserToManyApplicationRevisionFilter {
  """
  Every related `ApplicationRevision` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: ApplicationRevisionFilter

  """
  No related `ApplicationRevision` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: ApplicationRevisionFilter

  """
  Some related `ApplicationRevision` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: ApplicationRevisionFilter
}

"""
A filter to be used against many `ApplicationRevisionStatus` object types. All fields are combined with a logical ‘and.’
"""
input CiipUserToManyApplicationRevisionStatusFilter {
  """
  Every related `ApplicationRevisionStatus` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: ApplicationRevisionStatusFilter

  """
  No related `ApplicationRevisionStatus` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: ApplicationRevisionStatusFilter

  """
  Some related `ApplicationRevisionStatus` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: ApplicationRevisionStatusFilter
}

"""
A filter to be used against many `Benchmark` object types. All fields are combined with a logical ‘and.’
"""
input CiipUserToManyBenchmarkFilter {
  """
  Every related `Benchmark` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: BenchmarkFilter

  """
  No related `Benchmark` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: BenchmarkFilter

  """
  Some related `Benchmark` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: BenchmarkFilter
}

"""
A filter to be used against many `CertificationUrl` object types. All fields are combined with a logical ‘and.’
"""
input CiipUserToManyCertificationUrlFilter {
  """
  Every related `CertificationUrl` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: CertificationUrlFilter

  """
  No related `CertificationUrl` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: CertificationUrlFilter

  """
  Some related `CertificationUrl` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: CertificationUrlFilter
}

"""
A filter to be used against many `CiipUser` object types. All fields are combined with a logical ‘and.’
"""
input CiipUserToManyCiipUserFilter {
  """
  Every related `CiipUser` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: CiipUserFilter

  """
  No related `CiipUser` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: CiipUserFilter

  """
  Some related `CiipUser` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: CiipUserFilter
}

"""
A filter to be used against many `CiipUserOrganisation` object types. All fields are combined with a logical ‘and.’
"""
input CiipUserToManyCiipUserOrganisationFilter {
  """
  Every related `CiipUserOrganisation` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: CiipUserOrganisationFilter

  """
  No related `CiipUserOrganisation` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: CiipUserOrganisationFilter

  """
  Some related `CiipUserOrganisation` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: CiipUserOrganisationFilter
}

"""
A filter to be used against many `EmissionCategory` object types. All fields are combined with a logical ‘and.’
"""
input CiipUserToManyEmissionCategoryFilter {
  """
  Every related `EmissionCategory` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: EmissionCategoryFilter

  """
  No related `EmissionCategory` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: EmissionCategoryFilter

  """
  Some related `EmissionCategory` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: EmissionCategoryFilter
}

"""
A filter to be used against many `EmissionCategoryGas` object types. All fields are combined with a logical ‘and.’
"""
input CiipUserToManyEmissionCategoryGasFilter {
  """
  Every related `EmissionCategoryGas` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: EmissionCategoryGasFilter

  """
  No related `EmissionCategoryGas` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: EmissionCategoryGasFilter

  """
  Some related `EmissionCategoryGas` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: EmissionCategoryGasFilter
}

"""
A filter to be used against many `FormJson` object types. All fields are combined with a logical ‘and.’
"""
input CiipUserToManyFormJsonFilter {
  """
  Every related `FormJson` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: FormJsonFilter

  """
  No related `FormJson` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: FormJsonFilter

  """
  Some related `FormJson` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: FormJsonFilter
}

"""
A filter to be used against many `FormResult` object types. All fields are combined with a logical ‘and.’
"""
input CiipUserToManyFormResultFilter {
  """
  Every related `FormResult` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: FormResultFilter

  """
  No related `FormResult` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: FormResultFilter

  """
  Some related `FormResult` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: FormResultFilter
}

"""
A filter to be used against many `FormResultStatus` object types. All fields are combined with a logical ‘and.’
"""
input CiipUserToManyFormResultStatusFilter {
  """
  Every related `FormResultStatus` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: FormResultStatusFilter

  """
  No related `FormResultStatus` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: FormResultStatusFilter

  """
  Some related `FormResultStatus` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: FormResultStatusFilter
}

"""
A filter to be used against many `Fuel` object types. All fields are combined with a logical ‘and.’
"""
input CiipUserToManyFuelFilter {
  """
  Every related `Fuel` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: FuelFilter

  """
  No related `Fuel` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: FuelFilter

  """
  Some related `Fuel` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: FuelFilter
}

"""
A filter to be used against many `Gas` object types. All fields are combined with a logical ‘and.’
"""
input CiipUserToManyGasFilter {
  """
  Every related `Gas` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: GasFilter

  """
  No related `Gas` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: GasFilter

  """
  Some related `Gas` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: GasFilter
}

"""
A filter to be used against many `JwtToken` object types. All fields are combined with a logical ‘and.’
"""
input CiipUserToManyJwtTokenFilter {
  """
  Every related `JwtToken` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: JwtTokenFilter

  """
  No related `JwtToken` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: JwtTokenFilter

  """
  Some related `JwtToken` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: JwtTokenFilter
}

"""
A filter to be used against many `LinkedProduct` object types. All fields are combined with a logical ‘and.’
"""
input CiipUserToManyLinkedProductFilter {
  """
  Every related `LinkedProduct` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: LinkedProductFilter

  """
  No related `LinkedProduct` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: LinkedProductFilter

  """
  Some related `LinkedProduct` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: LinkedProductFilter
}

"""
A filter to be used against many `Product` object types. All fields are combined with a logical ‘and.’
"""
input CiipUserToManyProductFilter {
  """
  Every related `Product` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: ProductFilter

  """
  No related `Product` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: ProductFilter

  """
  Some related `Product` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: ProductFilter
}

"""
A filter to be used against many `ReviewComment` object types. All fields are combined with a logical ‘and.’
"""
input CiipUserToManyReviewCommentFilter {
  """
  Every related `ReviewComment` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: ReviewCommentFilter

  """
  No related `ReviewComment` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: ReviewCommentFilter

  """
  Some related `ReviewComment` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: ReviewCommentFilter
}

"""All input for the create `Application` mutation."""
input CreateApplicationInput {
  """The `Application` to be created by this mutation."""
  application: ApplicationInput!

  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
}

"""All input for the `createApplicationMutationChain` mutation."""
input CreateApplicationMutationChainInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  facilityIdInput: Int!
}

"""The output of our `createApplicationMutationChain` mutation."""
type CreateApplicationMutationChainPayload {
  application: Application

  """An edge for our `Application`. May be used by Relay 1."""
  applicationEdge(
    """The method to use when ordering `Application`."""
    orderBy: [ApplicationsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ApplicationsEdge

  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """Reads a single `Facility` that is related to this `Application`."""
  facilityByFacilityId: Facility

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `ReportingYear` that is related to this `Application`."""
  reportingYearByReportingYear: ReportingYear
}

"""The output of our create `Application` mutation."""
type CreateApplicationPayload {
  """The `Application` that was created by this mutation."""
  application: Application

  """An edge for our `Application`. May be used by Relay 1."""
  applicationEdge(
    """The method to use when ordering `Application`."""
    orderBy: [ApplicationsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ApplicationsEdge

  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """Reads a single `Facility` that is related to this `Application`."""
  facilityByFacilityId: Facility

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `ReportingYear` that is related to this `Application`."""
  reportingYearByReportingYear: ReportingYear
}

"""All input for the create `ApplicationRevision` mutation."""
input CreateApplicationRevisionInput {
  """The `ApplicationRevision` to be created by this mutation."""
  applicationRevision: ApplicationRevisionInput!

  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
}

"""All input for the `createApplicationRevisionMutationChain` mutation."""
input CreateApplicationRevisionMutationChainInput {
  applicationIdInput: Int!

  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  lastRevisionIdInput: Int!
}

"""The output of our `createApplicationRevisionMutationChain` mutation."""
type CreateApplicationRevisionMutationChainPayload {
  """
  Reads a single `Application` that is related to this `ApplicationRevision`.
  """
  applicationByApplicationId: Application
  applicationRevision: ApplicationRevision

  """An edge for our `ApplicationRevision`. May be used by Relay 1."""
  applicationRevisionEdge(
    """The method to use when ordering `ApplicationRevision`."""
    orderBy: [ApplicationRevisionsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ApplicationRevisionsEdge

  """
  Reads a single `CiipUser` that is related to this `ApplicationRevision`.
  """
  ciipUserByCreatedBy: CiipUser

  """
  Reads a single `CiipUser` that is related to this `ApplicationRevision`.
  """
  ciipUserByDeletedBy: CiipUser

  """
  Reads a single `CiipUser` that is related to this `ApplicationRevision`.
  """
  ciipUserByUpdatedBy: CiipUser

  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""The output of our create `ApplicationRevision` mutation."""
type CreateApplicationRevisionPayload {
  """
  Reads a single `Application` that is related to this `ApplicationRevision`.
  """
  applicationByApplicationId: Application

  """The `ApplicationRevision` that was created by this mutation."""
  applicationRevision: ApplicationRevision

  """An edge for our `ApplicationRevision`. May be used by Relay 1."""
  applicationRevisionEdge(
    """The method to use when ordering `ApplicationRevision`."""
    orderBy: [ApplicationRevisionsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ApplicationRevisionsEdge

  """
  Reads a single `CiipUser` that is related to this `ApplicationRevision`.
  """
  ciipUserByCreatedBy: CiipUser

  """
  Reads a single `CiipUser` that is related to this `ApplicationRevision`.
  """
  ciipUserByDeletedBy: CiipUser

  """
  Reads a single `CiipUser` that is related to this `ApplicationRevision`.
  """
  ciipUserByUpdatedBy: CiipUser

  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the create `ApplicationRevisionStatus` mutation."""
input CreateApplicationRevisionStatusInput {
  """The `ApplicationRevisionStatus` to be created by this mutation."""
  applicationRevisionStatus: ApplicationRevisionStatusInput!

  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
}

"""The output of our create `ApplicationRevisionStatus` mutation."""
type CreateApplicationRevisionStatusPayload {
  """
  Reads a single `ApplicationRevision` that is related to this `ApplicationRevisionStatus`.
  """
  applicationRevisionByApplicationIdAndVersionNumber: ApplicationRevision

  """The `ApplicationRevisionStatus` that was created by this mutation."""
  applicationRevisionStatus: ApplicationRevisionStatus

  """An edge for our `ApplicationRevisionStatus`. May be used by Relay 1."""
  applicationRevisionStatusEdge(
    """The method to use when ordering `ApplicationRevisionStatus`."""
    orderBy: [ApplicationRevisionStatusesOrderBy!] = [PRIMARY_KEY_ASC]
  ): ApplicationRevisionStatusesEdge

  """
  Reads a single `CiipUser` that is related to this `ApplicationRevisionStatus`.
  """
  ciipUserByCreatedBy: CiipUser

  """
  Reads a single `CiipUser` that is related to this `ApplicationRevisionStatus`.
  """
  ciipUserByDeletedBy: CiipUser

  """
  Reads a single `CiipUser` that is related to this `ApplicationRevisionStatus`.
  """
  ciipUserByUpdatedBy: CiipUser

  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the create `Benchmark` mutation."""
input CreateBenchmarkInput {
  """The `Benchmark` to be created by this mutation."""
  benchmark: BenchmarkInput!

  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
}

"""The output of our create `Benchmark` mutation."""
type CreateBenchmarkPayload {
  """The `Benchmark` that was created by this mutation."""
  benchmark: Benchmark

  """An edge for our `Benchmark`. May be used by Relay 1."""
  benchmarkEdge(
    """The method to use when ordering `Benchmark`."""
    orderBy: [BenchmarksOrderBy!] = [PRIMARY_KEY_ASC]
  ): BenchmarksEdge

  """Reads a single `CiipUser` that is related to this `Benchmark`."""
  ciipUserByCreatedBy: CiipUser

  """Reads a single `CiipUser` that is related to this `Benchmark`."""
  ciipUserByDeletedBy: CiipUser

  """Reads a single `CiipUser` that is related to this `Benchmark`."""
  ciipUserByUpdatedBy: CiipUser

  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """Reads a single `Product` that is related to this `Benchmark`."""
  productByProductId: Product

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `ReportingYear` that is related to this `Benchmark`."""
  reportingYearByEndReportingYear: ReportingYear

  """Reads a single `ReportingYear` that is related to this `Benchmark`."""
  reportingYearByStartReportingYear: ReportingYear
}

"""All input for the create `CertificationUrl` mutation."""
input CreateCertificationUrlInput {
  """The `CertificationUrl` to be created by this mutation."""
  certificationUrl: CertificationUrlInput!

  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
}

"""The output of our create `CertificationUrl` mutation."""
type CreateCertificationUrlPayload {
  """
  Reads a single `Application` that is related to this `CertificationUrl`.
  """
  applicationByApplicationId: Application

  """
  Reads a single `ApplicationRevision` that is related to this `CertificationUrl`.
  """
  applicationRevisionByApplicationIdAndVersionNumber: ApplicationRevision

  """The `CertificationUrl` that was created by this mutation."""
  certificationUrl: CertificationUrl

  """An edge for our `CertificationUrl`. May be used by Relay 1."""
  certificationUrlEdge(
    """The method to use when ordering `CertificationUrl`."""
    orderBy: [CertificationUrlsOrderBy!] = [PRIMARY_KEY_ASC]
  ): CertificationUrlsEdge

  """Reads a single `CiipUser` that is related to this `CertificationUrl`."""
  ciipUserByCertifiedBy: CiipUser

  """Reads a single `CiipUser` that is related to this `CertificationUrl`."""
  ciipUserByCreatedBy: CiipUser

  """Reads a single `CiipUser` that is related to this `CertificationUrl`."""
  ciipUserByDeletedBy: CiipUser

  """Reads a single `CiipUser` that is related to this `CertificationUrl`."""
  ciipUserByUpdatedBy: CiipUser

  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the create `CiipApplicationWizard` mutation."""
input CreateCiipApplicationWizardInput {
  """The `CiipApplicationWizard` to be created by this mutation."""
  ciipApplicationWizard: CiipApplicationWizardInput!

  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
}

"""The output of our create `CiipApplicationWizard` mutation."""
type CreateCiipApplicationWizardPayload {
  """The `CiipApplicationWizard` that was created by this mutation."""
  ciipApplicationWizard: CiipApplicationWizard

  """An edge for our `CiipApplicationWizard`. May be used by Relay 1."""
  ciipApplicationWizardEdge(
    """The method to use when ordering `CiipApplicationWizard`."""
    orderBy: [CiipApplicationWizardsOrderBy!] = [PRIMARY_KEY_ASC]
  ): CiipApplicationWizardsEdge

  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Reads a single `FormJson` that is related to this `CiipApplicationWizard`.
  """
  formJsonByFormId: FormJson

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the create `CiipUser` mutation."""
input CreateCiipUserInput {
  """The `CiipUser` to be created by this mutation."""
  ciipUser: CiipUserInput!

  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
}

"""All input for the create `CiipUserOrganisation` mutation."""
input CreateCiipUserOrganisationInput {
  """The `CiipUserOrganisation` to be created by this mutation."""
  ciipUserOrganisation: CiipUserOrganisationInput!

  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
}

"""The output of our create `CiipUserOrganisation` mutation."""
type CreateCiipUserOrganisationPayload {
  """
  Reads a single `CiipUser` that is related to this `CiipUserOrganisation`.
  """
  ciipUserByUserId: CiipUser

  """The `CiipUserOrganisation` that was created by this mutation."""
  ciipUserOrganisation: CiipUserOrganisation

  """An edge for our `CiipUserOrganisation`. May be used by Relay 1."""
  ciipUserOrganisationEdge(
    """The method to use when ordering `CiipUserOrganisation`."""
    orderBy: [CiipUserOrganisationsOrderBy!] = [PRIMARY_KEY_ASC]
  ): CiipUserOrganisationsEdge

  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Reads a single `Organisation` that is related to this `CiipUserOrganisation`.
  """
  organisationByOrganisationId: Organisation

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""The output of our create `CiipUser` mutation."""
type CreateCiipUserPayload {
  """The `CiipUser` that was created by this mutation."""
  ciipUser: CiipUser

  """Reads a single `CiipUser` that is related to this `CiipUser`."""
  ciipUserByCreatedBy: CiipUser

  """Reads a single `CiipUser` that is related to this `CiipUser`."""
  ciipUserByDeletedBy: CiipUser

  """Reads a single `CiipUser` that is related to this `CiipUser`."""
  ciipUserByUpdatedBy: CiipUser

  """An edge for our `CiipUser`. May be used by Relay 1."""
  ciipUserEdge(
    """The method to use when ordering `CiipUser`."""
    orderBy: [CiipUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): CiipUsersEdge

  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the create `EmissionCategoryGas` mutation."""
input CreateEmissionCategoryGasInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `EmissionCategoryGas` to be created by this mutation."""
  emissionCategoryGas: EmissionCategoryGasInput!
}

"""The output of our create `EmissionCategoryGas` mutation."""
type CreateEmissionCategoryGasPayload {
  """
  Reads a single `CiipUser` that is related to this `EmissionCategoryGas`.
  """
  ciipUserByCreatedBy: CiipUser

  """
  Reads a single `CiipUser` that is related to this `EmissionCategoryGas`.
  """
  ciipUserByDeletedBy: CiipUser

  """
  Reads a single `CiipUser` that is related to this `EmissionCategoryGas`.
  """
  ciipUserByUpdatedBy: CiipUser

  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Reads a single `EmissionCategory` that is related to this `EmissionCategoryGas`.
  """
  emissionCategoryByEmissionCategoryId: EmissionCategory

  """The `EmissionCategoryGas` that was created by this mutation."""
  emissionCategoryGas: EmissionCategoryGas

  """An edge for our `EmissionCategoryGas`. May be used by Relay 1."""
  emissionCategoryGasEdge(
    """The method to use when ordering `EmissionCategoryGas`."""
    orderBy: [EmissionCategoryGasesOrderBy!] = [PRIMARY_KEY_ASC]
  ): EmissionCategoryGasesEdge

  """Reads a single `Gas` that is related to this `EmissionCategoryGas`."""
  gasByGasId: Gas

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the create `EmissionCategory` mutation."""
input CreateEmissionCategoryInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `EmissionCategory` to be created by this mutation."""
  emissionCategory: EmissionCategoryInput!
}

"""The output of our create `EmissionCategory` mutation."""
type CreateEmissionCategoryPayload {
  """Reads a single `CiipUser` that is related to this `EmissionCategory`."""
  ciipUserByCreatedBy: CiipUser

  """Reads a single `CiipUser` that is related to this `EmissionCategory`."""
  ciipUserByDeletedBy: CiipUser

  """Reads a single `CiipUser` that is related to this `EmissionCategory`."""
  ciipUserByUpdatedBy: CiipUser

  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `EmissionCategory` that was created by this mutation."""
  emissionCategory: EmissionCategory

  """An edge for our `EmissionCategory`. May be used by Relay 1."""
  emissionCategoryEdge(
    """The method to use when ordering `EmissionCategory`."""
    orderBy: [EmissionCategoriesOrderBy!] = [PRIMARY_KEY_ASC]
  ): EmissionCategoriesEdge

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the create `Facility` mutation."""
input CreateFacilityInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `Facility` to be created by this mutation."""
  facility: FacilityInput!
}

"""The output of our create `Facility` mutation."""
type CreateFacilityPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Facility` that was created by this mutation."""
  facility: Facility

  """An edge for our `Facility`. May be used by Relay 1."""
  facilityEdge(
    """The method to use when ordering `Facility`."""
    orderBy: [FacilitiesOrderBy!] = [PRIMARY_KEY_ASC]
  ): FacilitiesEdge

  """Reads a single `Organisation` that is related to this `Facility`."""
  organisationByOrganisationId: Organisation

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the create `FormJson` mutation."""
input CreateFormJsonInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `FormJson` to be created by this mutation."""
  formJson: FormJsonInput!
}

"""The output of our create `FormJson` mutation."""
type CreateFormJsonPayload {
  """Reads a single `CiipUser` that is related to this `FormJson`."""
  ciipUserByCreatedBy: CiipUser

  """Reads a single `CiipUser` that is related to this `FormJson`."""
  ciipUserByDeletedBy: CiipUser

  """Reads a single `CiipUser` that is related to this `FormJson`."""
  ciipUserByUpdatedBy: CiipUser

  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `FormJson` that was created by this mutation."""
  formJson: FormJson

  """An edge for our `FormJson`. May be used by Relay 1."""
  formJsonEdge(
    """The method to use when ordering `FormJson`."""
    orderBy: [FormJsonsOrderBy!] = [PRIMARY_KEY_ASC]
  ): FormJsonsEdge

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the create `FormResult` mutation."""
input CreateFormResultInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `FormResult` to be created by this mutation."""
  formResult: FormResultInput!
}

"""The output of our create `FormResult` mutation."""
type CreateFormResultPayload {
  """Reads a single `Application` that is related to this `FormResult`."""
  applicationByApplicationId: Application

  """
  Reads a single `ApplicationRevision` that is related to this `FormResult`.
  """
  applicationRevisionByApplicationIdAndVersionNumber: ApplicationRevision

  """Reads a single `CiipUser` that is related to this `FormResult`."""
  ciipUserByCreatedBy: CiipUser

  """Reads a single `CiipUser` that is related to this `FormResult`."""
  ciipUserByDeletedBy: CiipUser

  """Reads a single `CiipUser` that is related to this `FormResult`."""
  ciipUserByUpdatedBy: CiipUser

  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """Reads a single `FormJson` that is related to this `FormResult`."""
  formJsonByFormId: FormJson

  """The `FormResult` that was created by this mutation."""
  formResult: FormResult

  """An edge for our `FormResult`. May be used by Relay 1."""
  formResultEdge(
    """The method to use when ordering `FormResult`."""
    orderBy: [FormResultsOrderBy!] = [PRIMARY_KEY_ASC]
  ): FormResultsEdge

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the create `FormResultStatus` mutation."""
input CreateFormResultStatusInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `FormResultStatus` to be created by this mutation."""
  formResultStatus: FormResultStatusInput!
}

"""The output of our create `FormResultStatus` mutation."""
type CreateFormResultStatusPayload {
  """
  Reads a single `Application` that is related to this `FormResultStatus`.
  """
  applicationByApplicationId: Application

  """Reads a single `CiipUser` that is related to this `FormResultStatus`."""
  ciipUserByCreatedBy: CiipUser

  """Reads a single `CiipUser` that is related to this `FormResultStatus`."""
  ciipUserByDeletedBy: CiipUser

  """Reads a single `CiipUser` that is related to this `FormResultStatus`."""
  ciipUserByUpdatedBy: CiipUser

  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `FormResultStatus` that was created by this mutation."""
  formResultStatus: FormResultStatus

  """An edge for our `FormResultStatus`. May be used by Relay 1."""
  formResultStatusEdge(
    """The method to use when ordering `FormResultStatus`."""
    orderBy: [FormResultStatusesOrderBy!] = [PRIMARY_KEY_ASC]
  ): FormResultStatusesEdge

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the create `Fuel` mutation."""
input CreateFuelInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `Fuel` to be created by this mutation."""
  fuel: FuelInput!
}

"""The output of our create `Fuel` mutation."""
type CreateFuelPayload {
  """Reads a single `CiipUser` that is related to this `Fuel`."""
  ciipUserByCreatedBy: CiipUser

  """Reads a single `CiipUser` that is related to this `Fuel`."""
  ciipUserByDeletedBy: CiipUser

  """Reads a single `CiipUser` that is related to this `Fuel`."""
  ciipUserByUpdatedBy: CiipUser

  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Fuel` that was created by this mutation."""
  fuel: Fuel

  """An edge for our `Fuel`. May be used by Relay 1."""
  fuelEdge(
    """The method to use when ordering `Fuel`."""
    orderBy: [FuelsOrderBy!] = [PRIMARY_KEY_ASC]
  ): FuelsEdge

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the create `Gas` mutation."""
input CreateGasInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `Gas` to be created by this mutation."""
  gas: GasInput!
}

"""The output of our create `Gas` mutation."""
type CreateGasPayload {
  """Reads a single `CiipUser` that is related to this `Gas`."""
  ciipUserByCreatedBy: CiipUser

  """Reads a single `CiipUser` that is related to this `Gas`."""
  ciipUserByDeletedBy: CiipUser

  """Reads a single `CiipUser` that is related to this `Gas`."""
  ciipUserByUpdatedBy: CiipUser

  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Gas` that was created by this mutation."""
  gas: Gas

  """An edge for our `Gas`. May be used by Relay 1."""
  gasEdge(
    """The method to use when ordering `Gas`."""
    orderBy: [GasesOrderBy!] = [PRIMARY_KEY_ASC]
  ): GasesEdge

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the create `LinkedProduct` mutation."""
input CreateLinkedProductInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `LinkedProduct` to be created by this mutation."""
  linkedProduct: LinkedProductInput!
}

"""The output of our create `LinkedProduct` mutation."""
type CreateLinkedProductPayload {
  """Reads a single `CiipUser` that is related to this `LinkedProduct`."""
  ciipUserByCreatedBy: CiipUser

  """Reads a single `CiipUser` that is related to this `LinkedProduct`."""
  ciipUserByDeletedBy: CiipUser

  """Reads a single `CiipUser` that is related to this `LinkedProduct`."""
  ciipUserByUpdatedBy: CiipUser

  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `LinkedProduct` that was created by this mutation."""
  linkedProduct: LinkedProduct

  """An edge for our `LinkedProduct`. May be used by Relay 1."""
  linkedProductEdge(
    """The method to use when ordering `LinkedProduct`."""
    orderBy: [LinkedProductsOrderBy!] = [PRIMARY_KEY_ASC]
  ): LinkedProductsEdge

  """Reads a single `Product` that is related to this `LinkedProduct`."""
  productByLinkedProductId: Product

  """Reads a single `Product` that is related to this `LinkedProduct`."""
  productByProductId: Product

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the create `Organisation` mutation."""
input CreateOrganisationInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `Organisation` to be created by this mutation."""
  organisation: OrganisationInput!
}

"""The output of our create `Organisation` mutation."""
type CreateOrganisationPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Organisation` that was created by this mutation."""
  organisation: Organisation

  """An edge for our `Organisation`. May be used by Relay 1."""
  organisationEdge(
    """The method to use when ordering `Organisation`."""
    orderBy: [OrganisationsOrderBy!] = [PRIMARY_KEY_ASC]
  ): OrganisationsEdge

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the create `Product` mutation."""
input CreateProductInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `Product` to be created by this mutation."""
  product: ProductInput!
}

"""The output of our create `Product` mutation."""
type CreateProductPayload {
  """Reads a single `CiipUser` that is related to this `Product`."""
  ciipUserByCreatedBy: CiipUser

  """Reads a single `CiipUser` that is related to this `Product`."""
  ciipUserByDeletedBy: CiipUser

  """Reads a single `CiipUser` that is related to this `Product`."""
  ciipUserByUpdatedBy: CiipUser

  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Product` that was created by this mutation."""
  product: Product

  """An edge for our `Product`. May be used by Relay 1."""
  productEdge(
    """The method to use when ordering `Product`."""
    orderBy: [ProductsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ProductsEdge

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the create `ReportingYear` mutation."""
input CreateReportingYearInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `ReportingYear` to be created by this mutation."""
  reportingYear: ReportingYearInput!
}

"""The output of our create `ReportingYear` mutation."""
type CreateReportingYearPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """The `ReportingYear` that was created by this mutation."""
  reportingYear: ReportingYear

  """An edge for our `ReportingYear`. May be used by Relay 1."""
  reportingYearEdge(
    """The method to use when ordering `ReportingYear`."""
    orderBy: [ReportingYearsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ReportingYearsEdge
}

"""All input for the create `ReviewComment` mutation."""
input CreateReviewCommentInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `ReviewComment` to be created by this mutation."""
  reviewComment: ReviewCommentInput!
}

"""All input for the `createReviewCommentMutationChain` mutation."""
input CreateReviewCommentMutationChainInput {
  applicationIdInput: Int

  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  commentTypeInput: ReviewCommentType
  descriptionInput: String
  formIdInput: Int
}

"""The output of our `createReviewCommentMutationChain` mutation."""
type CreateReviewCommentMutationChainPayload {
  """Reads a single `Application` that is related to this `ReviewComment`."""
  applicationByApplicationId: Application

  """Reads a single `CiipUser` that is related to this `ReviewComment`."""
  ciipUserByCreatedBy: CiipUser

  """Reads a single `CiipUser` that is related to this `ReviewComment`."""
  ciipUserByDeletedBy: CiipUser

  """Reads a single `CiipUser` that is related to this `ReviewComment`."""
  ciipUserByUpdatedBy: CiipUser

  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """Reads a single `FormJson` that is related to this `ReviewComment`."""
  formJsonByFormId: FormJson

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
  reviewComment: ReviewComment

  """An edge for our `ReviewComment`. May be used by Relay 1."""
  reviewCommentEdge(
    """The method to use when ordering `ReviewComment`."""
    orderBy: [ReviewCommentsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ReviewCommentsEdge
}

"""The output of our create `ReviewComment` mutation."""
type CreateReviewCommentPayload {
  """Reads a single `Application` that is related to this `ReviewComment`."""
  applicationByApplicationId: Application

  """Reads a single `CiipUser` that is related to this `ReviewComment`."""
  ciipUserByCreatedBy: CiipUser

  """Reads a single `CiipUser` that is related to this `ReviewComment`."""
  ciipUserByDeletedBy: CiipUser

  """Reads a single `CiipUser` that is related to this `ReviewComment`."""
  ciipUserByUpdatedBy: CiipUser

  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """Reads a single `FormJson` that is related to this `ReviewComment`."""
  formJsonByFormId: FormJson

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """The `ReviewComment` that was created by this mutation."""
  reviewComment: ReviewComment

  """An edge for our `ReviewComment`. May be used by Relay 1."""
  reviewCommentEdge(
    """The method to use when ordering `ReviewComment`."""
    orderBy: [ReviewCommentsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ReviewCommentsEdge
}

"""A location in a connection that can be used for resuming pagination."""
scalar Cursor

"""The day, does not include a time."""
scalar Date

"""
A filter to be used against Date fields. All fields are combined with a logical ‘and.’
"""
input DateFilter {
  """
  Not equal to the specified value, treating null like an ordinary value.
  """
  distinctFrom: Date

  """Equal to the specified value."""
  equalTo: Date

  """Greater than the specified value."""
  greaterThan: Date

  """Greater than or equal to the specified value."""
  greaterThanOrEqualTo: Date

  """Included in the specified list."""
  in: [Date!]

  """
  Is null (if `true` is specified) or is not null (if `false` is specified).
  """
  isNull: Boolean

  """Less than the specified value."""
  lessThan: Date

  """Less than or equal to the specified value."""
  lessThanOrEqualTo: Date

  """Equal to the specified value, treating null like an ordinary value."""
  notDistinctFrom: Date

  """Not equal to the specified value."""
  notEqualTo: Date

  """Not included in the specified list."""
  notIn: [Date!]
}

"""
A point in time as described by the [ISO
8601](https://en.wikipedia.org/wiki/ISO_8601) standard. May or may not include a timezone.
"""
scalar Datetime

"""
A filter to be used against Datetime fields. All fields are combined with a logical ‘and.’
"""
input DatetimeFilter {
  """
  Not equal to the specified value, treating null like an ordinary value.
  """
  distinctFrom: Datetime

  """Equal to the specified value."""
  equalTo: Datetime

  """Greater than the specified value."""
  greaterThan: Datetime

  """Greater than or equal to the specified value."""
  greaterThanOrEqualTo: Datetime

  """Included in the specified list."""
  in: [Datetime!]

  """
  Is null (if `true` is specified) or is not null (if `false` is specified).
  """
  isNull: Boolean

  """Less than the specified value."""
  lessThan: Datetime

  """Less than or equal to the specified value."""
  lessThanOrEqualTo: Datetime

  """Equal to the specified value, treating null like an ordinary value."""
  notDistinctFrom: Datetime

  """Not equal to the specified value."""
  notEqualTo: Datetime

  """Not included in the specified list."""
  notIn: [Datetime!]
}

"""All input for the `deleteApplicationByRowId` mutation."""
input DeleteApplicationByRowIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The application id used for reference and join"""
  rowId: Int!
}

"""All input for the `deleteApplication` mutation."""
input DeleteApplicationInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Application` to be deleted.
  """
  id: ID!
}

"""The output of our delete `Application` mutation."""
type DeleteApplicationPayload {
  """The `Application` that was deleted by this mutation."""
  application: Application

  """An edge for our `Application`. May be used by Relay 1."""
  applicationEdge(
    """The method to use when ordering `Application`."""
    orderBy: [ApplicationsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ApplicationsEdge

  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  deletedApplicationId: ID

  """Reads a single `Facility` that is related to this `Application`."""
  facilityByFacilityId: Facility

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `ReportingYear` that is related to this `Application`."""
  reportingYearByReportingYear: ReportingYear
}

"""
All input for the `deleteApplicationRevisionByApplicationIdAndVersionNumber` mutation.
"""
input DeleteApplicationRevisionByApplicationIdAndVersionNumberInput {
  """
  The foreign key to the ciip application, also part of the composite primary key with version number
  """
  applicationId: Int!

  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The version number of the revision, also part of the composite primary key with application_id
  """
  versionNumber: Int!
}

"""All input for the `deleteApplicationRevision` mutation."""
input DeleteApplicationRevisionInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `ApplicationRevision` to be deleted.
  """
  id: ID!
}

"""The output of our delete `ApplicationRevision` mutation."""
type DeleteApplicationRevisionPayload {
  """
  Reads a single `Application` that is related to this `ApplicationRevision`.
  """
  applicationByApplicationId: Application

  """The `ApplicationRevision` that was deleted by this mutation."""
  applicationRevision: ApplicationRevision

  """An edge for our `ApplicationRevision`. May be used by Relay 1."""
  applicationRevisionEdge(
    """The method to use when ordering `ApplicationRevision`."""
    orderBy: [ApplicationRevisionsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ApplicationRevisionsEdge

  """
  Reads a single `CiipUser` that is related to this `ApplicationRevision`.
  """
  ciipUserByCreatedBy: CiipUser

  """
  Reads a single `CiipUser` that is related to this `ApplicationRevision`.
  """
  ciipUserByDeletedBy: CiipUser

  """
  Reads a single `CiipUser` that is related to this `ApplicationRevision`.
  """
  ciipUserByUpdatedBy: CiipUser

  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  deletedApplicationRevisionId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `deleteApplicationRevisionStatusByRowId` mutation."""
input DeleteApplicationRevisionStatusByRowIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The id used for reference and join"""
  rowId: Int!
}

"""All input for the `deleteApplicationRevisionStatus` mutation."""
input DeleteApplicationRevisionStatusInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `ApplicationRevisionStatus` to be deleted.
  """
  id: ID!
}

"""The output of our delete `ApplicationRevisionStatus` mutation."""
type DeleteApplicationRevisionStatusPayload {
  """
  Reads a single `ApplicationRevision` that is related to this `ApplicationRevisionStatus`.
  """
  applicationRevisionByApplicationIdAndVersionNumber: ApplicationRevision

  """The `ApplicationRevisionStatus` that was deleted by this mutation."""
  applicationRevisionStatus: ApplicationRevisionStatus

  """An edge for our `ApplicationRevisionStatus`. May be used by Relay 1."""
  applicationRevisionStatusEdge(
    """The method to use when ordering `ApplicationRevisionStatus`."""
    orderBy: [ApplicationRevisionStatusesOrderBy!] = [PRIMARY_KEY_ASC]
  ): ApplicationRevisionStatusesEdge

  """
  Reads a single `CiipUser` that is related to this `ApplicationRevisionStatus`.
  """
  ciipUserByCreatedBy: CiipUser

  """
  Reads a single `CiipUser` that is related to this `ApplicationRevisionStatus`.
  """
  ciipUserByDeletedBy: CiipUser

  """
  Reads a single `CiipUser` that is related to this `ApplicationRevisionStatus`.
  """
  ciipUserByUpdatedBy: CiipUser

  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  deletedApplicationRevisionStatusId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `deleteBenchmarkByRowId` mutation."""
input DeleteBenchmarkByRowIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """Unique ID for the benchmark"""
  rowId: Int!
}

"""All input for the `deleteBenchmark` mutation."""
input DeleteBenchmarkInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Benchmark` to be deleted.
  """
  id: ID!
}

"""The output of our delete `Benchmark` mutation."""
type DeleteBenchmarkPayload {
  """The `Benchmark` that was deleted by this mutation."""
  benchmark: Benchmark

  """An edge for our `Benchmark`. May be used by Relay 1."""
  benchmarkEdge(
    """The method to use when ordering `Benchmark`."""
    orderBy: [BenchmarksOrderBy!] = [PRIMARY_KEY_ASC]
  ): BenchmarksEdge

  """Reads a single `CiipUser` that is related to this `Benchmark`."""
  ciipUserByCreatedBy: CiipUser

  """Reads a single `CiipUser` that is related to this `Benchmark`."""
  ciipUserByDeletedBy: CiipUser

  """Reads a single `CiipUser` that is related to this `Benchmark`."""
  ciipUserByUpdatedBy: CiipUser

  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  deletedBenchmarkId: ID

  """Reads a single `Product` that is related to this `Benchmark`."""
  productByProductId: Product

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `ReportingYear` that is related to this `Benchmark`."""
  reportingYearByEndReportingYear: ReportingYear

  """Reads a single `ReportingYear` that is related to this `Benchmark`."""
  reportingYearByStartReportingYear: ReportingYear
}

"""All input for the `deleteCertificationUrlByRowId` mutation."""
input DeleteCertificationUrlByRowIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """Unique ID for the certification_url"""
  rowId: String!
}

"""All input for the `deleteCertificationUrl` mutation."""
input DeleteCertificationUrlInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `CertificationUrl` to be deleted.
  """
  id: ID!
}

"""The output of our delete `CertificationUrl` mutation."""
type DeleteCertificationUrlPayload {
  """
  Reads a single `Application` that is related to this `CertificationUrl`.
  """
  applicationByApplicationId: Application

  """
  Reads a single `ApplicationRevision` that is related to this `CertificationUrl`.
  """
  applicationRevisionByApplicationIdAndVersionNumber: ApplicationRevision

  """The `CertificationUrl` that was deleted by this mutation."""
  certificationUrl: CertificationUrl

  """An edge for our `CertificationUrl`. May be used by Relay 1."""
  certificationUrlEdge(
    """The method to use when ordering `CertificationUrl`."""
    orderBy: [CertificationUrlsOrderBy!] = [PRIMARY_KEY_ASC]
  ): CertificationUrlsEdge

  """Reads a single `CiipUser` that is related to this `CertificationUrl`."""
  ciipUserByCertifiedBy: CiipUser

  """Reads a single `CiipUser` that is related to this `CertificationUrl`."""
  ciipUserByCreatedBy: CiipUser

  """Reads a single `CiipUser` that is related to this `CertificationUrl`."""
  ciipUserByDeletedBy: CiipUser

  """Reads a single `CiipUser` that is related to this `CertificationUrl`."""
  ciipUserByUpdatedBy: CiipUser

  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  deletedCertificationUrlId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `deleteCiipApplicationWizardByFormId` mutation."""
input DeleteCiipApplicationWizardByFormIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The id of the form"""
  formId: Int!
}

"""All input for the `deleteCiipApplicationWizard` mutation."""
input DeleteCiipApplicationWizardInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `CiipApplicationWizard` to be deleted.
  """
  id: ID!
}

"""The output of our delete `CiipApplicationWizard` mutation."""
type DeleteCiipApplicationWizardPayload {
  """The `CiipApplicationWizard` that was deleted by this mutation."""
  ciipApplicationWizard: CiipApplicationWizard

  """An edge for our `CiipApplicationWizard`. May be used by Relay 1."""
  ciipApplicationWizardEdge(
    """The method to use when ordering `CiipApplicationWizard`."""
    orderBy: [CiipApplicationWizardsOrderBy!] = [PRIMARY_KEY_ASC]
  ): CiipApplicationWizardsEdge

  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  deletedCiipApplicationWizardId: ID

  """
  Reads a single `FormJson` that is related to this `CiipApplicationWizard`.
  """
  formJsonByFormId: FormJson

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `deleteCiipUserByRowId` mutation."""
input DeleteCiipUserByRowIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """Unique ID for the user"""
  rowId: Int!
}

"""All input for the `deleteCiipUser` mutation."""
input DeleteCiipUserInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `CiipUser` to be deleted.
  """
  id: ID!
}

"""All input for the `deleteCiipUserOrganisationByRowId` mutation."""
input DeleteCiipUserOrganisationByRowIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """ciip_user_organisation primary key"""
  rowId: Int!
}

"""All input for the `deleteCiipUserOrganisation` mutation."""
input DeleteCiipUserOrganisationInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `CiipUserOrganisation` to be deleted.
  """
  id: ID!
}

"""The output of our delete `CiipUserOrganisation` mutation."""
type DeleteCiipUserOrganisationPayload {
  """
  Reads a single `CiipUser` that is related to this `CiipUserOrganisation`.
  """
  ciipUserByUserId: CiipUser

  """The `CiipUserOrganisation` that was deleted by this mutation."""
  ciipUserOrganisation: CiipUserOrganisation

  """An edge for our `CiipUserOrganisation`. May be used by Relay 1."""
  ciipUserOrganisationEdge(
    """The method to use when ordering `CiipUserOrganisation`."""
    orderBy: [CiipUserOrganisationsOrderBy!] = [PRIMARY_KEY_ASC]
  ): CiipUserOrganisationsEdge

  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  deletedCiipUserOrganisationId: ID

  """
  Reads a single `Organisation` that is related to this `CiipUserOrganisation`.
  """
  organisationByOrganisationId: Organisation

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""The output of our delete `CiipUser` mutation."""
type DeleteCiipUserPayload {
  """The `CiipUser` that was deleted by this mutation."""
  ciipUser: CiipUser

  """Reads a single `CiipUser` that is related to this `CiipUser`."""
  ciipUserByCreatedBy: CiipUser

  """Reads a single `CiipUser` that is related to this `CiipUser`."""
  ciipUserByDeletedBy: CiipUser

  """Reads a single `CiipUser` that is related to this `CiipUser`."""
  ciipUserByUpdatedBy: CiipUser

  """An edge for our `CiipUser`. May be used by Relay 1."""
  ciipUserEdge(
    """The method to use when ordering `CiipUser`."""
    orderBy: [CiipUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): CiipUsersEdge

  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  deletedCiipUserId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `deleteEmissionCategoryByRowId` mutation."""
input DeleteEmissionCategoryByRowIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """Unique ID for the emission_category"""
  rowId: Int!
}

"""All input for the `deleteEmissionCategoryGasByRowId` mutation."""
input DeleteEmissionCategoryGasByRowIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """Unique ID for the emission_category_gas"""
  rowId: Int!
}

"""All input for the `deleteEmissionCategoryGas` mutation."""
input DeleteEmissionCategoryGasInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `EmissionCategoryGas` to be deleted.
  """
  id: ID!
}

"""The output of our delete `EmissionCategoryGas` mutation."""
type DeleteEmissionCategoryGasPayload {
  """
  Reads a single `CiipUser` that is related to this `EmissionCategoryGas`.
  """
  ciipUserByCreatedBy: CiipUser

  """
  Reads a single `CiipUser` that is related to this `EmissionCategoryGas`.
  """
  ciipUserByDeletedBy: CiipUser

  """
  Reads a single `CiipUser` that is related to this `EmissionCategoryGas`.
  """
  ciipUserByUpdatedBy: CiipUser

  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  deletedEmissionCategoryGasId: ID

  """
  Reads a single `EmissionCategory` that is related to this `EmissionCategoryGas`.
  """
  emissionCategoryByEmissionCategoryId: EmissionCategory

  """The `EmissionCategoryGas` that was deleted by this mutation."""
  emissionCategoryGas: EmissionCategoryGas

  """An edge for our `EmissionCategoryGas`. May be used by Relay 1."""
  emissionCategoryGasEdge(
    """The method to use when ordering `EmissionCategoryGas`."""
    orderBy: [EmissionCategoryGasesOrderBy!] = [PRIMARY_KEY_ASC]
  ): EmissionCategoryGasesEdge

  """Reads a single `Gas` that is related to this `EmissionCategoryGas`."""
  gasByGasId: Gas

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `deleteEmissionCategory` mutation."""
input DeleteEmissionCategoryInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `EmissionCategory` to be deleted.
  """
  id: ID!
}

"""The output of our delete `EmissionCategory` mutation."""
type DeleteEmissionCategoryPayload {
  """Reads a single `CiipUser` that is related to this `EmissionCategory`."""
  ciipUserByCreatedBy: CiipUser

  """Reads a single `CiipUser` that is related to this `EmissionCategory`."""
  ciipUserByDeletedBy: CiipUser

  """Reads a single `CiipUser` that is related to this `EmissionCategory`."""
  ciipUserByUpdatedBy: CiipUser

  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  deletedEmissionCategoryId: ID

  """The `EmissionCategory` that was deleted by this mutation."""
  emissionCategory: EmissionCategory

  """An edge for our `EmissionCategory`. May be used by Relay 1."""
  emissionCategoryEdge(
    """The method to use when ordering `EmissionCategory`."""
    orderBy: [EmissionCategoriesOrderBy!] = [PRIMARY_KEY_ASC]
  ): EmissionCategoriesEdge

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `deleteFacilityByRowId` mutation."""
input DeleteFacilityByRowIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """unique id for the facility"""
  rowId: Int!
}

"""All input for the `deleteFacility` mutation."""
input DeleteFacilityInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Facility` to be deleted.
  """
  id: ID!
}

"""The output of our delete `Facility` mutation."""
type DeleteFacilityPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  deletedFacilityId: ID

  """The `Facility` that was deleted by this mutation."""
  facility: Facility

  """An edge for our `Facility`. May be used by Relay 1."""
  facilityEdge(
    """The method to use when ordering `Facility`."""
    orderBy: [FacilitiesOrderBy!] = [PRIMARY_KEY_ASC]
  ): FacilitiesEdge

  """Reads a single `Organisation` that is related to this `Facility`."""
  organisationByOrganisationId: Organisation

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `deleteFormJsonByRowId` mutation."""
input DeleteFormJsonByRowIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """Unique ID for the form"""
  rowId: Int!
}

"""All input for the `deleteFormJson` mutation."""
input DeleteFormJsonInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `FormJson` to be deleted.
  """
  id: ID!
}

"""The output of our delete `FormJson` mutation."""
type DeleteFormJsonPayload {
  """Reads a single `CiipUser` that is related to this `FormJson`."""
  ciipUserByCreatedBy: CiipUser

  """Reads a single `CiipUser` that is related to this `FormJson`."""
  ciipUserByDeletedBy: CiipUser

  """Reads a single `CiipUser` that is related to this `FormJson`."""
  ciipUserByUpdatedBy: CiipUser

  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  deletedFormJsonId: ID

  """The `FormJson` that was deleted by this mutation."""
  formJson: FormJson

  """An edge for our `FormJson`. May be used by Relay 1."""
  formJsonEdge(
    """The method to use when ordering `FormJson`."""
    orderBy: [FormJsonsOrderBy!] = [PRIMARY_KEY_ASC]
  ): FormJsonsEdge

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""
All input for the `deleteFormResultByFormIdAndApplicationIdAndVersionNumber` mutation.
"""
input DeleteFormResultByFormIdAndApplicationIdAndVersionNumberInput {
  """The Unique ID of the Application"""
  applicationId: Int!

  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The Unique ID of the form"""
  formId: Int!

  """The application version this form result is attached to"""
  versionNumber: Int!
}

"""All input for the `deleteFormResultByRowId` mutation."""
input DeleteFormResultByRowIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """Unique ID for the form"""
  rowId: Int!
}

"""All input for the `deleteFormResult` mutation."""
input DeleteFormResultInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `FormResult` to be deleted.
  """
  id: ID!
}

"""The output of our delete `FormResult` mutation."""
type DeleteFormResultPayload {
  """Reads a single `Application` that is related to this `FormResult`."""
  applicationByApplicationId: Application

  """
  Reads a single `ApplicationRevision` that is related to this `FormResult`.
  """
  applicationRevisionByApplicationIdAndVersionNumber: ApplicationRevision

  """Reads a single `CiipUser` that is related to this `FormResult`."""
  ciipUserByCreatedBy: CiipUser

  """Reads a single `CiipUser` that is related to this `FormResult`."""
  ciipUserByDeletedBy: CiipUser

  """Reads a single `CiipUser` that is related to this `FormResult`."""
  ciipUserByUpdatedBy: CiipUser

  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  deletedFormResultId: ID

  """Reads a single `FormJson` that is related to this `FormResult`."""
  formJsonByFormId: FormJson

  """The `FormResult` that was deleted by this mutation."""
  formResult: FormResult

  """An edge for our `FormResult`. May be used by Relay 1."""
  formResultEdge(
    """The method to use when ordering `FormResult`."""
    orderBy: [FormResultsOrderBy!] = [PRIMARY_KEY_ASC]
  ): FormResultsEdge

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `deleteFormResultStatusByRowId` mutation."""
input DeleteFormResultStatusByRowIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The id used for reference and join"""
  rowId: Int!
}

"""All input for the `deleteFormResultStatus` mutation."""
input DeleteFormResultStatusInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `FormResultStatus` to be deleted.
  """
  id: ID!
}

"""The output of our delete `FormResultStatus` mutation."""
type DeleteFormResultStatusPayload {
  """
  Reads a single `Application` that is related to this `FormResultStatus`.
  """
  applicationByApplicationId: Application

  """Reads a single `CiipUser` that is related to this `FormResultStatus`."""
  ciipUserByCreatedBy: CiipUser

  """Reads a single `CiipUser` that is related to this `FormResultStatus`."""
  ciipUserByDeletedBy: CiipUser

  """Reads a single `CiipUser` that is related to this `FormResultStatus`."""
  ciipUserByUpdatedBy: CiipUser

  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  deletedFormResultStatusId: ID

  """The `FormResultStatus` that was deleted by this mutation."""
  formResultStatus: FormResultStatus

  """An edge for our `FormResultStatus`. May be used by Relay 1."""
  formResultStatusEdge(
    """The method to use when ordering `FormResultStatus`."""
    orderBy: [FormResultStatusesOrderBy!] = [PRIMARY_KEY_ASC]
  ): FormResultStatusesEdge

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `deleteFuelByRowId` mutation."""
input DeleteFuelByRowIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """Unique ID for the fuel"""
  rowId: Int!
}

"""All input for the `deleteFuel` mutation."""
input DeleteFuelInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Fuel` to be deleted.
  """
  id: ID!
}

"""The output of our delete `Fuel` mutation."""
type DeleteFuelPayload {
  """Reads a single `CiipUser` that is related to this `Fuel`."""
  ciipUserByCreatedBy: CiipUser

  """Reads a single `CiipUser` that is related to this `Fuel`."""
  ciipUserByDeletedBy: CiipUser

  """Reads a single `CiipUser` that is related to this `Fuel`."""
  ciipUserByUpdatedBy: CiipUser

  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  deletedFuelId: ID

  """The `Fuel` that was deleted by this mutation."""
  fuel: Fuel

  """An edge for our `Fuel`. May be used by Relay 1."""
  fuelEdge(
    """The method to use when ordering `Fuel`."""
    orderBy: [FuelsOrderBy!] = [PRIMARY_KEY_ASC]
  ): FuelsEdge

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `deleteGasByRowId` mutation."""
input DeleteGasByRowIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """Unique ID for the gas"""
  rowId: Int!
}

"""All input for the `deleteGas` mutation."""
input DeleteGasInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Gas` to be deleted.
  """
  id: ID!
}

"""The output of our delete `Gas` mutation."""
type DeleteGasPayload {
  """Reads a single `CiipUser` that is related to this `Gas`."""
  ciipUserByCreatedBy: CiipUser

  """Reads a single `CiipUser` that is related to this `Gas`."""
  ciipUserByDeletedBy: CiipUser

  """Reads a single `CiipUser` that is related to this `Gas`."""
  ciipUserByUpdatedBy: CiipUser

  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  deletedGasId: ID

  """The `Gas` that was deleted by this mutation."""
  gas: Gas

  """An edge for our `Gas`. May be used by Relay 1."""
  gasEdge(
    """The method to use when ordering `Gas`."""
    orderBy: [GasesOrderBy!] = [PRIMARY_KEY_ASC]
  ): GasesEdge

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `deleteLinkedProductByRowId` mutation."""
input DeleteLinkedProductByRowIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """Unique ID for the product link"""
  rowId: Int!
}

"""All input for the `deleteLinkedProduct` mutation."""
input DeleteLinkedProductInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `LinkedProduct` to be deleted.
  """
  id: ID!
}

"""The output of our delete `LinkedProduct` mutation."""
type DeleteLinkedProductPayload {
  """Reads a single `CiipUser` that is related to this `LinkedProduct`."""
  ciipUserByCreatedBy: CiipUser

  """Reads a single `CiipUser` that is related to this `LinkedProduct`."""
  ciipUserByDeletedBy: CiipUser

  """Reads a single `CiipUser` that is related to this `LinkedProduct`."""
  ciipUserByUpdatedBy: CiipUser

  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  deletedLinkedProductId: ID

  """The `LinkedProduct` that was deleted by this mutation."""
  linkedProduct: LinkedProduct

  """An edge for our `LinkedProduct`. May be used by Relay 1."""
  linkedProductEdge(
    """The method to use when ordering `LinkedProduct`."""
    orderBy: [LinkedProductsOrderBy!] = [PRIMARY_KEY_ASC]
  ): LinkedProductsEdge

  """Reads a single `Product` that is related to this `LinkedProduct`."""
  productByLinkedProductId: Product

  """Reads a single `Product` that is related to this `LinkedProduct`."""
  productByProductId: Product

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `deleteOrganisationByRowId` mutation."""
input DeleteOrganisationByRowIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """unique if for the organisation"""
  rowId: Int!
}

"""All input for the `deleteOrganisation` mutation."""
input DeleteOrganisationInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Organisation` to be deleted.
  """
  id: ID!
}

"""The output of our delete `Organisation` mutation."""
type DeleteOrganisationPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  deletedOrganisationId: ID

  """The `Organisation` that was deleted by this mutation."""
  organisation: Organisation

  """An edge for our `Organisation`. May be used by Relay 1."""
  organisationEdge(
    """The method to use when ordering `Organisation`."""
    orderBy: [OrganisationsOrderBy!] = [PRIMARY_KEY_ASC]
  ): OrganisationsEdge

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `deleteProductByRowId` mutation."""
input DeleteProductByRowIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """Unique ID for the product"""
  rowId: Int!
}

"""All input for the `deleteProduct` mutation."""
input DeleteProductInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Product` to be deleted.
  """
  id: ID!
}

"""The output of our delete `Product` mutation."""
type DeleteProductPayload {
  """Reads a single `CiipUser` that is related to this `Product`."""
  ciipUserByCreatedBy: CiipUser

  """Reads a single `CiipUser` that is related to this `Product`."""
  ciipUserByDeletedBy: CiipUser

  """Reads a single `CiipUser` that is related to this `Product`."""
  ciipUserByUpdatedBy: CiipUser

  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  deletedProductId: ID

  """The `Product` that was deleted by this mutation."""
  product: Product

  """An edge for our `Product`. May be used by Relay 1."""
  productEdge(
    """The method to use when ordering `Product`."""
    orderBy: [ProductsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ProductsEdge

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `deleteReportingYearByReportingYear` mutation."""
input DeleteReportingYearByReportingYearInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The current reporting year"""
  reportingYear: Int!
}

"""All input for the `deleteReportingYear` mutation."""
input DeleteReportingYearInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `ReportingYear` to be deleted.
  """
  id: ID!
}

"""The output of our delete `ReportingYear` mutation."""
type DeleteReportingYearPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  deletedReportingYearId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """The `ReportingYear` that was deleted by this mutation."""
  reportingYear: ReportingYear

  """An edge for our `ReportingYear`. May be used by Relay 1."""
  reportingYearEdge(
    """The method to use when ordering `ReportingYear`."""
    orderBy: [ReportingYearsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ReportingYearsEdge
}

"""All input for the `deleteReviewCommentByRowId` mutation."""
input DeleteReviewCommentByRowIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """Unique ID for the review_comment"""
  rowId: Int!
}

"""All input for the `deleteReviewComment` mutation."""
input DeleteReviewCommentInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `ReviewComment` to be deleted.
  """
  id: ID!
}

"""The output of our delete `ReviewComment` mutation."""
type DeleteReviewCommentPayload {
  """Reads a single `Application` that is related to this `ReviewComment`."""
  applicationByApplicationId: Application

  """Reads a single `CiipUser` that is related to this `ReviewComment`."""
  ciipUserByCreatedBy: CiipUser

  """Reads a single `CiipUser` that is related to this `ReviewComment`."""
  ciipUserByDeletedBy: CiipUser

  """Reads a single `CiipUser` that is related to this `ReviewComment`."""
  ciipUserByUpdatedBy: CiipUser

  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  deletedReviewCommentId: ID

  """Reads a single `FormJson` that is related to this `ReviewComment`."""
  formJsonByFormId: FormJson

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """The `ReviewComment` that was deleted by this mutation."""
  reviewComment: ReviewComment

  """An edge for our `ReviewComment`. May be used by Relay 1."""
  reviewCommentEdge(
    """The method to use when ordering `ReviewComment`."""
    orderBy: [ReviewCommentsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ReviewCommentsEdge
}

"""A connection to a list of `EmissionCategory` values."""
type EmissionCategoriesConnection {
  """
  A list of edges which contains the `EmissionCategory` and cursor to aid in pagination.
  """
  edges: [EmissionCategoriesEdge!]!

  """A list of `EmissionCategory` objects."""
  nodes: [EmissionCategory]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `EmissionCategory` you could get from the connection.
  """
  totalCount: Int!
}

"""A `EmissionCategory` edge in the connection."""
type EmissionCategoriesEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `EmissionCategory` at the end of the edge."""
  node: EmissionCategory
}

"""Methods to use when ordering `EmissionCategory`."""
enum EmissionCategoriesOrderBy {
  CREATED_AT_ASC
  CREATED_AT_DESC
  CREATED_BY_ASC
  CREATED_BY_DESC
  DELETED_AT_ASC
  DELETED_AT_DESC
  DELETED_BY_ASC
  DELETED_BY_DESC
  DISPLAY_NAME_ASC
  DISPLAY_NAME_DESC
  ID_ASC
  ID_DESC
  NATURAL
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  SWRS_EMISSION_CATEGORY_ASC
  SWRS_EMISSION_CATEGORY_DESC
  UPDATED_AT_ASC
  UPDATED_AT_DESC
  UPDATED_BY_ASC
  UPDATED_BY_DESC
}

"""Table of emission categories used in the CIIP program"""
type EmissionCategory implements Node {
  """Reads a single `CiipUser` that is related to this `EmissionCategory`."""
  ciipUserByCreatedBy: CiipUser

  """Reads a single `CiipUser` that is related to this `EmissionCategory`."""
  ciipUserByDeletedBy: CiipUser

  """Reads a single `CiipUser` that is related to this `EmissionCategory`."""
  ciipUserByUpdatedBy: CiipUser

  """Reads and enables pagination through a set of `CiipUser`."""
  ciipUsersByEmissionCategoryGasEmissionCategoryIdAndCreatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CiipUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CiipUserFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CiipUser`."""
    orderBy: [CiipUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): EmissionCategoryCiipUsersByEmissionCategoryGasEmissionCategoryIdAndCreatedByManyToManyConnection!

  """Reads and enables pagination through a set of `CiipUser`."""
  ciipUsersByEmissionCategoryGasEmissionCategoryIdAndDeletedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CiipUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CiipUserFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CiipUser`."""
    orderBy: [CiipUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): EmissionCategoryCiipUsersByEmissionCategoryGasEmissionCategoryIdAndDeletedByManyToManyConnection!

  """Reads and enables pagination through a set of `CiipUser`."""
  ciipUsersByEmissionCategoryGasEmissionCategoryIdAndUpdatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CiipUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CiipUserFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CiipUser`."""
    orderBy: [CiipUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): EmissionCategoryCiipUsersByEmissionCategoryGasEmissionCategoryIdAndUpdatedByManyToManyConnection!

  """Creation date of row"""
  createdAt: Datetime!

  """Creator of row"""
  createdBy: Int

  """Date of deletion"""
  deletedAt: Datetime

  """The user who deleted the row"""
  deletedBy: Int

  """The name displayed in the CIIP portal UI"""
  displayName: String

  """Reads and enables pagination through a set of `EmissionCategoryGas`."""
  emissionCategoryGasesByEmissionCategoryId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: EmissionCategoryGasCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: EmissionCategoryGasFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `EmissionCategoryGas`."""
    orderBy: [EmissionCategoryGasesOrderBy!] = [PRIMARY_KEY_ASC]
  ): EmissionCategoryGasesConnection!

  """Reads and enables pagination through a set of `Gas`."""
  gasesByEmissionCategoryGasEmissionCategoryIdAndGasId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: GasCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: GasFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Gas`."""
    orderBy: [GasesOrderBy!] = [PRIMARY_KEY_ASC]
  ): EmissionCategoryGasesByEmissionCategoryGasEmissionCategoryIdAndGasIdManyToManyConnection!

  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  id: ID!

  """Unique ID for the emission_category"""
  rowId: Int!

  """The original name in the swrs data"""
  swrsEmissionCategory: String

  """Updated date of row"""
  updatedAt: Datetime!

  """Updator of row"""
  updatedBy: Int
}

"""
A connection to a list of `CiipUser` values, with data from `EmissionCategoryGas`.
"""
type EmissionCategoryCiipUsersByEmissionCategoryGasEmissionCategoryIdAndCreatedByManyToManyConnection {
  """
  A list of edges which contains the `CiipUser`, info from the `EmissionCategoryGas`, and the cursor to aid in pagination.
  """
  edges: [EmissionCategoryCiipUsersByEmissionCategoryGasEmissionCategoryIdAndCreatedByManyToManyEdge!]!

  """A list of `CiipUser` objects."""
  nodes: [CiipUser]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CiipUser` you could get from the connection."""
  totalCount: Int!
}

"""
A `CiipUser` edge in the connection, with data from `EmissionCategoryGas`.
"""
type EmissionCategoryCiipUsersByEmissionCategoryGasEmissionCategoryIdAndCreatedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """Reads and enables pagination through a set of `EmissionCategoryGas`."""
  emissionCategoryGasesByCreatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: EmissionCategoryGasCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: EmissionCategoryGasFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `EmissionCategoryGas`."""
    orderBy: [EmissionCategoryGasesOrderBy!] = [PRIMARY_KEY_ASC]
  ): EmissionCategoryGasesConnection!

  """The `CiipUser` at the end of the edge."""
  node: CiipUser
}

"""
A connection to a list of `CiipUser` values, with data from `EmissionCategoryGas`.
"""
type EmissionCategoryCiipUsersByEmissionCategoryGasEmissionCategoryIdAndDeletedByManyToManyConnection {
  """
  A list of edges which contains the `CiipUser`, info from the `EmissionCategoryGas`, and the cursor to aid in pagination.
  """
  edges: [EmissionCategoryCiipUsersByEmissionCategoryGasEmissionCategoryIdAndDeletedByManyToManyEdge!]!

  """A list of `CiipUser` objects."""
  nodes: [CiipUser]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CiipUser` you could get from the connection."""
  totalCount: Int!
}

"""
A `CiipUser` edge in the connection, with data from `EmissionCategoryGas`.
"""
type EmissionCategoryCiipUsersByEmissionCategoryGasEmissionCategoryIdAndDeletedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """Reads and enables pagination through a set of `EmissionCategoryGas`."""
  emissionCategoryGasesByDeletedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: EmissionCategoryGasCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: EmissionCategoryGasFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `EmissionCategoryGas`."""
    orderBy: [EmissionCategoryGasesOrderBy!] = [PRIMARY_KEY_ASC]
  ): EmissionCategoryGasesConnection!

  """The `CiipUser` at the end of the edge."""
  node: CiipUser
}

"""
A connection to a list of `CiipUser` values, with data from `EmissionCategoryGas`.
"""
type EmissionCategoryCiipUsersByEmissionCategoryGasEmissionCategoryIdAndUpdatedByManyToManyConnection {
  """
  A list of edges which contains the `CiipUser`, info from the `EmissionCategoryGas`, and the cursor to aid in pagination.
  """
  edges: [EmissionCategoryCiipUsersByEmissionCategoryGasEmissionCategoryIdAndUpdatedByManyToManyEdge!]!

  """A list of `CiipUser` objects."""
  nodes: [CiipUser]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CiipUser` you could get from the connection."""
  totalCount: Int!
}

"""
A `CiipUser` edge in the connection, with data from `EmissionCategoryGas`.
"""
type EmissionCategoryCiipUsersByEmissionCategoryGasEmissionCategoryIdAndUpdatedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """Reads and enables pagination through a set of `EmissionCategoryGas`."""
  emissionCategoryGasesByUpdatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: EmissionCategoryGasCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: EmissionCategoryGasFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `EmissionCategoryGas`."""
    orderBy: [EmissionCategoryGasesOrderBy!] = [PRIMARY_KEY_ASC]
  ): EmissionCategoryGasesConnection!

  """The `CiipUser` at the end of the edge."""
  node: CiipUser
}

"""
A condition to be used against `EmissionCategory` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input EmissionCategoryCondition {
  """Checks for equality with the object’s `createdAt` field."""
  createdAt: Datetime

  """Checks for equality with the object’s `createdBy` field."""
  createdBy: Int

  """Checks for equality with the object’s `deletedAt` field."""
  deletedAt: Datetime

  """Checks for equality with the object’s `deletedBy` field."""
  deletedBy: Int

  """Checks for equality with the object’s `displayName` field."""
  displayName: String

  """Checks for equality with the object’s `rowId` field."""
  rowId: Int

  """Checks for equality with the object’s `swrsEmissionCategory` field."""
  swrsEmissionCategory: String

  """Checks for equality with the object’s `updatedAt` field."""
  updatedAt: Datetime

  """Checks for equality with the object’s `updatedBy` field."""
  updatedBy: Int
}

"""
A filter to be used against `EmissionCategory` object types. All fields are combined with a logical ‘and.’
"""
input EmissionCategoryFilter {
  """Checks for all expressions in this list."""
  and: [EmissionCategoryFilter!]

  """Filter by the object’s `ciipUserByCreatedBy` relation."""
  ciipUserByCreatedBy: CiipUserFilter

  """A related `ciipUserByCreatedBy` exists."""
  ciipUserByCreatedByExists: Boolean

  """Filter by the object’s `ciipUserByDeletedBy` relation."""
  ciipUserByDeletedBy: CiipUserFilter

  """A related `ciipUserByDeletedBy` exists."""
  ciipUserByDeletedByExists: Boolean

  """Filter by the object’s `ciipUserByUpdatedBy` relation."""
  ciipUserByUpdatedBy: CiipUserFilter

  """A related `ciipUserByUpdatedBy` exists."""
  ciipUserByUpdatedByExists: Boolean

  """Filter by the object’s `createdAt` field."""
  createdAt: DatetimeFilter

  """Filter by the object’s `createdBy` field."""
  createdBy: IntFilter

  """Filter by the object’s `deletedAt` field."""
  deletedAt: DatetimeFilter

  """Filter by the object’s `deletedBy` field."""
  deletedBy: IntFilter

  """Filter by the object’s `displayName` field."""
  displayName: StringFilter

  """
  Filter by the object’s `emissionCategoryGasesByEmissionCategoryId` relation.
  """
  emissionCategoryGasesByEmissionCategoryId: EmissionCategoryToManyEmissionCategoryGasFilter

  """Some related `emissionCategoryGasesByEmissionCategoryId` exist."""
  emissionCategoryGasesByEmissionCategoryIdExist: Boolean

  """Negates the expression."""
  not: EmissionCategoryFilter

  """Checks for any expressions in this list."""
  or: [EmissionCategoryFilter!]

  """Filter by the object’s `rowId` field."""
  rowId: IntFilter

  """Filter by the object’s `swrsEmissionCategory` field."""
  swrsEmissionCategory: StringFilter

  """Filter by the object’s `updatedAt` field."""
  updatedAt: DatetimeFilter

  """Filter by the object’s `updatedBy` field."""
  updatedBy: IntFilter
}

"""Table of emission categories used in the CIIP program"""
type EmissionCategoryGas implements Node {
  """
  Reads a single `CiipUser` that is related to this `EmissionCategoryGas`.
  """
  ciipUserByCreatedBy: CiipUser

  """
  Reads a single `CiipUser` that is related to this `EmissionCategoryGas`.
  """
  ciipUserByDeletedBy: CiipUser

  """
  Reads a single `CiipUser` that is related to this `EmissionCategoryGas`.
  """
  ciipUserByUpdatedBy: CiipUser

  """Creation date of row"""
  createdAt: Datetime!

  """Creator of row"""
  createdBy: Int

  """Date of deletion"""
  deletedAt: Datetime

  """The user who deleted the row"""
  deletedBy: Int

  """
  Reads a single `EmissionCategory` that is related to this `EmissionCategoryGas`.
  """
  emissionCategoryByEmissionCategoryId: EmissionCategory

  """The description of the emission category"""
  emissionCategoryDescription: String

  """Foreign key to emission_category"""
  emissionCategoryId: Int

  """Reads a single `Gas` that is related to this `EmissionCategoryGas`."""
  gasByGasId: Gas

  """Foreign key to gas"""
  gasId: Int

  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  id: ID!

  """Unique ID for the emission_category_gas"""
  rowId: Int!

  """Updated date of row"""
  updatedAt: Datetime!

  """Updator of row"""
  updatedBy: Int
}

"""
A condition to be used against `EmissionCategoryGas` object types. All fields
are tested for equality and combined with a logical ‘and.’
"""
input EmissionCategoryGasCondition {
  """Checks for equality with the object’s `createdAt` field."""
  createdAt: Datetime

  """Checks for equality with the object’s `createdBy` field."""
  createdBy: Int

  """Checks for equality with the object’s `deletedAt` field."""
  deletedAt: Datetime

  """Checks for equality with the object’s `deletedBy` field."""
  deletedBy: Int

  """
  Checks for equality with the object’s `emissionCategoryDescription` field.
  """
  emissionCategoryDescription: String

  """Checks for equality with the object’s `emissionCategoryId` field."""
  emissionCategoryId: Int

  """Checks for equality with the object’s `gasId` field."""
  gasId: Int

  """Checks for equality with the object’s `rowId` field."""
  rowId: Int

  """Checks for equality with the object’s `updatedAt` field."""
  updatedAt: Datetime

  """Checks for equality with the object’s `updatedBy` field."""
  updatedBy: Int
}

"""
A connection to a list of `Gas` values, with data from `EmissionCategoryGas`.
"""
type EmissionCategoryGasesByEmissionCategoryGasEmissionCategoryIdAndGasIdManyToManyConnection {
  """
  A list of edges which contains the `Gas`, info from the `EmissionCategoryGas`, and the cursor to aid in pagination.
  """
  edges: [EmissionCategoryGasesByEmissionCategoryGasEmissionCategoryIdAndGasIdManyToManyEdge!]!

  """A list of `Gas` objects."""
  nodes: [Gas]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Gas` you could get from the connection."""
  totalCount: Int!
}

"""A `Gas` edge in the connection, with data from `EmissionCategoryGas`."""
type EmissionCategoryGasesByEmissionCategoryGasEmissionCategoryIdAndGasIdManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """Reads and enables pagination through a set of `EmissionCategoryGas`."""
  emissionCategoryGasesByGasId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: EmissionCategoryGasCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: EmissionCategoryGasFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `EmissionCategoryGas`."""
    orderBy: [EmissionCategoryGasesOrderBy!] = [PRIMARY_KEY_ASC]
  ): EmissionCategoryGasesConnection!

  """The `Gas` at the end of the edge."""
  node: Gas
}

"""A connection to a list of `EmissionCategoryGas` values."""
type EmissionCategoryGasesConnection {
  """
  A list of edges which contains the `EmissionCategoryGas` and cursor to aid in pagination.
  """
  edges: [EmissionCategoryGasesEdge!]!

  """A list of `EmissionCategoryGas` objects."""
  nodes: [EmissionCategoryGas]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `EmissionCategoryGas` you could get from the connection.
  """
  totalCount: Int!
}

"""A `EmissionCategoryGas` edge in the connection."""
type EmissionCategoryGasesEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `EmissionCategoryGas` at the end of the edge."""
  node: EmissionCategoryGas
}

"""Methods to use when ordering `EmissionCategoryGas`."""
enum EmissionCategoryGasesOrderBy {
  CREATED_AT_ASC
  CREATED_AT_DESC
  CREATED_BY_ASC
  CREATED_BY_DESC
  DELETED_AT_ASC
  DELETED_AT_DESC
  DELETED_BY_ASC
  DELETED_BY_DESC
  EMISSION_CATEGORY_DESCRIPTION_ASC
  EMISSION_CATEGORY_DESCRIPTION_DESC
  EMISSION_CATEGORY_ID_ASC
  EMISSION_CATEGORY_ID_DESC
  GAS_ID_ASC
  GAS_ID_DESC
  ID_ASC
  ID_DESC
  NATURAL
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  UPDATED_AT_ASC
  UPDATED_AT_DESC
  UPDATED_BY_ASC
  UPDATED_BY_DESC
}

"""
A filter to be used against `EmissionCategoryGas` object types. All fields are combined with a logical ‘and.’
"""
input EmissionCategoryGasFilter {
  """Checks for all expressions in this list."""
  and: [EmissionCategoryGasFilter!]

  """Filter by the object’s `ciipUserByCreatedBy` relation."""
  ciipUserByCreatedBy: CiipUserFilter

  """A related `ciipUserByCreatedBy` exists."""
  ciipUserByCreatedByExists: Boolean

  """Filter by the object’s `ciipUserByDeletedBy` relation."""
  ciipUserByDeletedBy: CiipUserFilter

  """A related `ciipUserByDeletedBy` exists."""
  ciipUserByDeletedByExists: Boolean

  """Filter by the object’s `ciipUserByUpdatedBy` relation."""
  ciipUserByUpdatedBy: CiipUserFilter

  """A related `ciipUserByUpdatedBy` exists."""
  ciipUserByUpdatedByExists: Boolean

  """Filter by the object’s `createdAt` field."""
  createdAt: DatetimeFilter

  """Filter by the object’s `createdBy` field."""
  createdBy: IntFilter

  """Filter by the object’s `deletedAt` field."""
  deletedAt: DatetimeFilter

  """Filter by the object’s `deletedBy` field."""
  deletedBy: IntFilter

  """
  Filter by the object’s `emissionCategoryByEmissionCategoryId` relation.
  """
  emissionCategoryByEmissionCategoryId: EmissionCategoryFilter

  """A related `emissionCategoryByEmissionCategoryId` exists."""
  emissionCategoryByEmissionCategoryIdExists: Boolean

  """Filter by the object’s `emissionCategoryDescription` field."""
  emissionCategoryDescription: StringFilter

  """Filter by the object’s `emissionCategoryId` field."""
  emissionCategoryId: IntFilter

  """Filter by the object’s `gasByGasId` relation."""
  gasByGasId: GasFilter

  """A related `gasByGasId` exists."""
  gasByGasIdExists: Boolean

  """Filter by the object’s `gasId` field."""
  gasId: IntFilter

  """Negates the expression."""
  not: EmissionCategoryGasFilter

  """Checks for any expressions in this list."""
  or: [EmissionCategoryGasFilter!]

  """Filter by the object’s `rowId` field."""
  rowId: IntFilter

  """Filter by the object’s `updatedAt` field."""
  updatedAt: DatetimeFilter

  """Filter by the object’s `updatedBy` field."""
  updatedBy: IntFilter
}

"""An input for mutations affecting `EmissionCategoryGas`"""
input EmissionCategoryGasInput {
  """Creation date of row"""
  createdAt: Datetime

  """Creator of row"""
  createdBy: Int

  """Date of deletion"""
  deletedAt: Datetime

  """The user who deleted the row"""
  deletedBy: Int

  """The description of the emission category"""
  emissionCategoryDescription: String

  """Foreign key to emission_category"""
  emissionCategoryId: Int

  """Foreign key to gas"""
  gasId: Int

  """Updated date of row"""
  updatedAt: Datetime

  """Updator of row"""
  updatedBy: Int
}

"""
Represents an update to a `EmissionCategoryGas`. Fields that are set will be updated.
"""
input EmissionCategoryGasPatch {
  """Creation date of row"""
  createdAt: Datetime

  """Creator of row"""
  createdBy: Int

  """Date of deletion"""
  deletedAt: Datetime

  """The user who deleted the row"""
  deletedBy: Int

  """The description of the emission category"""
  emissionCategoryDescription: String

  """Foreign key to emission_category"""
  emissionCategoryId: Int

  """Foreign key to gas"""
  gasId: Int

  """Updated date of row"""
  updatedAt: Datetime

  """Updator of row"""
  updatedBy: Int
}

"""An input for mutations affecting `EmissionCategory`"""
input EmissionCategoryInput {
  """Creation date of row"""
  createdAt: Datetime

  """Creator of row"""
  createdBy: Int

  """Date of deletion"""
  deletedAt: Datetime

  """The user who deleted the row"""
  deletedBy: Int

  """The name displayed in the CIIP portal UI"""
  displayName: String

  """The original name in the swrs data"""
  swrsEmissionCategory: String

  """Updated date of row"""
  updatedAt: Datetime

  """Updator of row"""
  updatedBy: Int
}

"""
Represents an update to a `EmissionCategory`. Fields that are set will be updated.
"""
input EmissionCategoryPatch {
  """Creation date of row"""
  createdAt: Datetime

  """Creator of row"""
  createdBy: Int

  """Date of deletion"""
  deletedAt: Datetime

  """The user who deleted the row"""
  deletedBy: Int

  """The name displayed in the CIIP portal UI"""
  displayName: String

  """The original name in the swrs data"""
  swrsEmissionCategory: String

  """Updated date of row"""
  updatedAt: Datetime

  """Updator of row"""
  updatedBy: Int
}

"""
A filter to be used against many `EmissionCategoryGas` object types. All fields are combined with a logical ‘and.’
"""
input EmissionCategoryToManyEmissionCategoryGasFilter {
  """
  Every related `EmissionCategoryGas` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: EmissionCategoryGasFilter

  """
  No related `EmissionCategoryGas` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: EmissionCategoryGasFilter

  """
  Some related `EmissionCategoryGas` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: EmissionCategoryGasFilter
}

"""A connection to a list of `EmissionDatum` values."""
type EmissionDataConnection {
  """
  A list of edges which contains the `EmissionDatum` and cursor to aid in pagination.
  """
  edges: [EmissionDataEdge!]!

  """A list of `EmissionDatum` objects."""
  nodes: [EmissionDatum]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `EmissionDatum` you could get from the connection."""
  totalCount: Int!
}

"""A `EmissionDatum` edge in the connection."""
type EmissionDataEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `EmissionDatum` at the end of the edge."""
  node: EmissionDatum
}

type EmissionDatum {
  calculatedQuantity: BigFloat
  emissionCategory: String
  gasType: String
  quantity: BigFloat
  reportId: Int
}

"""
A filter to be used against `EmissionDatum` object types. All fields are combined with a logical ‘and.’
"""
input EmissionDatumFilter {
  """Checks for all expressions in this list."""
  and: [EmissionDatumFilter!]

  """Filter by the object’s `calculatedQuantity` field."""
  calculatedQuantity: BigFloatFilter

  """Filter by the object’s `emissionCategory` field."""
  emissionCategory: StringFilter

  """Filter by the object’s `gasType` field."""
  gasType: StringFilter

  """Negates the expression."""
  not: EmissionDatumFilter

  """Checks for any expressions in this list."""
  or: [EmissionDatumFilter!]

  """Filter by the object’s `quantity` field."""
  quantity: BigFloatFilter

  """Filter by the object’s `reportId` field."""
  reportId: IntFilter
}

"""A connection to a list of `Facility` values."""
type FacilitiesConnection {
  """
  A list of edges which contains the `Facility` and cursor to aid in pagination.
  """
  edges: [FacilitiesEdge!]!

  """A list of `Facility` objects."""
  nodes: [Facility]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Facility` you could get from the connection."""
  totalCount: Int!
}

"""A `Facility` edge in the connection."""
type FacilitiesEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Facility` at the end of the edge."""
  node: Facility
}

"""Methods to use when ordering `Facility`."""
enum FacilitiesOrderBy {
  BCGHGID_ASC
  BCGHGID_DESC
  FACILITY_NAME_ASC
  FACILITY_NAME_DESC
  FACILITY_TYPE_ASC
  FACILITY_TYPE_DESC
  ID_ASC
  ID_DESC
  NATURAL
  ORGANISATION_ID_ASC
  ORGANISATION_ID_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  REPORT_ID_ASC
  REPORT_ID_DESC
  SWRS_FACILITY_ID_ASC
  SWRS_FACILITY_ID_DESC
  SWRS_ORGANISATION_ID_ASC
  SWRS_ORGANISATION_ID_DESC
  SWRS_REPORT_ID_ASC
  SWRS_REPORT_ID_DESC
}

"""Table containing information on an facility that has applied for CIIP"""
type Facility implements Node {
  """Reads and enables pagination through a set of `Application`."""
  applicationsByFacilityId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ApplicationCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ApplicationFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Application`."""
    orderBy: [ApplicationsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ApplicationsConnection!

  """Reads and enables pagination through a set of `Application`."""
  applicationsByFacilitySearchResultFacilityIdAndApplicationId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ApplicationCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ApplicationFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Application`."""
    orderBy: [ApplicationsOrderBy!] = [PRIMARY_KEY_ASC]
  ): FacilityApplicationsByFacilitySearchResultFacilityIdAndApplicationIdManyToManyConnection!

  """CAS internal identifier"""
  bcghgid: String

  """the facility name"""
  facilityName: String

  """type of facility based on emission quantity"""
  facilityType: String
  hasSwrsReport: Boolean

  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  id: ID!

  """Reads a single `Organisation` that is related to this `Facility`."""
  organisationByOrganisationId: Organisation

  """the id of the organization responsible for that facility"""
  organisationId: Int!

  """report id from swrs"""
  reportId: Int

  """Reads and enables pagination through a set of `ReportingYear`."""
  reportingYearsByApplicationFacilityIdAndReportingYear(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ReportingYearCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ReportingYearFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `ReportingYear`."""
    orderBy: [ReportingYearsOrderBy!] = [PRIMARY_KEY_ASC]
  ): FacilityReportingYearsByApplicationFacilityIdAndReportingYearManyToManyConnection!

  """unique id for the facility"""
  rowId: Int!

  """swrs facility id from swrs"""
  swrsFacilityId: Int

  """swrs organisation id"""
  swrsOrganisationId: Int

  """swrs report id from swrs"""
  swrsReportId: Int
}

"""
A connection to a list of `Application` values, with data from `FacilitySearchResult`.
"""
type FacilityApplicationsByFacilitySearchResultFacilityIdAndApplicationIdManyToManyConnection {
  """
  A list of edges which contains the `Application`, info from the
  `FacilitySearchResult`, and the cursor to aid in pagination.
  """
  edges: [FacilityApplicationsByFacilitySearchResultFacilityIdAndApplicationIdManyToManyEdge!]!

  """A list of `Application` objects."""
  nodes: [Application]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Application` you could get from the connection."""
  totalCount: Int!
}

"""
A `Application` edge in the connection, with data from `FacilitySearchResult`.
"""
type FacilityApplicationsByFacilitySearchResultFacilityIdAndApplicationIdManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """Reads and enables pagination through a set of `FacilitySearchResult`."""
  facilitySearchResultsByApplicationId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: FacilitySearchResultFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int
  ): FacilitySearchResultsConnection!

  """The `Application` at the end of the edge."""
  node: Application
}

"""
A condition to be used against `Facility` object types. All fields are tested
for equality and combined with a logical ‘and.’
"""
input FacilityCondition {
  """Checks for equality with the object’s `bcghgid` field."""
  bcghgid: String

  """Checks for equality with the object’s `facilityName` field."""
  facilityName: String

  """Checks for equality with the object’s `facilityType` field."""
  facilityType: String

  """Checks for equality with the object’s `organisationId` field."""
  organisationId: Int

  """Checks for equality with the object’s `reportId` field."""
  reportId: Int

  """Checks for equality with the object’s `rowId` field."""
  rowId: Int

  """Checks for equality with the object’s `swrsFacilityId` field."""
  swrsFacilityId: Int

  """Checks for equality with the object’s `swrsOrganisationId` field."""
  swrsOrganisationId: Int

  """Checks for equality with the object’s `swrsReportId` field."""
  swrsReportId: Int
}

type FacilityDatum {
  bcghgid: String
  facilityCity: String
  facilityCountry: String
  facilityMailingAddress: String
  facilityName: String
  facilityPostalCode: String
  facilityProvince: String
  facilityType: String
  latitude: BigFloat
  longitude: BigFloat
  naicsClassification: String
  naicsCode: String
  reportId: Int
  reportingYear: Int
  swrsFacilityId: Int
  swrsOrganisationId: Int
  swrsReportId: Int
}

"""
A filter to be used against `Facility` object types. All fields are combined with a logical ‘and.’
"""
input FacilityFilter {
  """Checks for all expressions in this list."""
  and: [FacilityFilter!]

  """Filter by the object’s `applicationsByFacilityId` relation."""
  applicationsByFacilityId: FacilityToManyApplicationFilter

  """Some related `applicationsByFacilityId` exist."""
  applicationsByFacilityIdExist: Boolean

  """Filter by the object’s `bcghgid` field."""
  bcghgid: StringFilter

  """Filter by the object’s `facilityName` field."""
  facilityName: StringFilter

  """Filter by the object’s `facilitySearchResultsByFacilityId` relation."""
  facilitySearchResultsByFacilityId: FacilityToManyFacilitySearchResultFilter

  """Some related `facilitySearchResultsByFacilityId` exist."""
  facilitySearchResultsByFacilityIdExist: Boolean

  """Filter by the object’s `facilityType` field."""
  facilityType: StringFilter

  """Filter by the object’s `hasSwrsReport` field."""
  hasSwrsReport: BooleanFilter

  """Negates the expression."""
  not: FacilityFilter

  """Checks for any expressions in this list."""
  or: [FacilityFilter!]

  """Filter by the object’s `organisationByOrganisationId` relation."""
  organisationByOrganisationId: OrganisationFilter

  """Filter by the object’s `organisationId` field."""
  organisationId: IntFilter

  """Filter by the object’s `reportId` field."""
  reportId: IntFilter

  """Filter by the object’s `rowId` field."""
  rowId: IntFilter

  """Filter by the object’s `swrsFacilityId` field."""
  swrsFacilityId: IntFilter

  """Filter by the object’s `swrsOrganisationId` field."""
  swrsOrganisationId: IntFilter

  """Filter by the object’s `swrsReportId` field."""
  swrsReportId: IntFilter
}

"""An input for mutations affecting `Facility`"""
input FacilityInput {
  """CAS internal identifier"""
  bcghgid: String

  """the facility name"""
  facilityName: String

  """type of facility based on emission quantity"""
  facilityType: String

  """the id of the organization responsible for that facility"""
  organisationId: Int!

  """report id from swrs"""
  reportId: Int

  """swrs facility id from swrs"""
  swrsFacilityId: Int

  """swrs organisation id"""
  swrsOrganisationId: Int

  """swrs report id from swrs"""
  swrsReportId: Int
}

"""
Represents an update to a `Facility`. Fields that are set will be updated.
"""
input FacilityPatch {
  """CAS internal identifier"""
  bcghgid: String

  """the facility name"""
  facilityName: String

  """type of facility based on emission quantity"""
  facilityType: String

  """the id of the organization responsible for that facility"""
  organisationId: Int

  """report id from swrs"""
  reportId: Int

  """swrs facility id from swrs"""
  swrsFacilityId: Int

  """swrs organisation id"""
  swrsOrganisationId: Int

  """swrs report id from swrs"""
  swrsReportId: Int
}

"""
A connection to a list of `ReportingYear` values, with data from `Application`.
"""
type FacilityReportingYearsByApplicationFacilityIdAndReportingYearManyToManyConnection {
  """
  A list of edges which contains the `ReportingYear`, info from the `Application`, and the cursor to aid in pagination.
  """
  edges: [FacilityReportingYearsByApplicationFacilityIdAndReportingYearManyToManyEdge!]!

  """A list of `ReportingYear` objects."""
  nodes: [ReportingYear]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `ReportingYear` you could get from the connection."""
  totalCount: Int!
}

"""
A `ReportingYear` edge in the connection, with data from `Application`.
"""
type FacilityReportingYearsByApplicationFacilityIdAndReportingYearManyToManyEdge {
  """Reads and enables pagination through a set of `Application`."""
  applicationsByReportingYear(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ApplicationCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ApplicationFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Application`."""
    orderBy: [ApplicationsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ApplicationsConnection!

  """A cursor for use in pagination."""
  cursor: Cursor

  """The `ReportingYear` at the end of the edge."""
  node: ReportingYear
}

type FacilitySearchResult {
  """
  Reads a single `Application` that is related to this `FacilitySearchResult`.
  """
  applicationByApplicationId: Application
  applicationId: Int
  applicationRevisionStatus: CiipApplicationRevisionStatus
  facilityBcghgid: String

  """
  Reads a single `Facility` that is related to this `FacilitySearchResult`.
  """
  facilityByFacilityId: Facility
  facilityId: Int
  facilityName: String
  facilityType: String
  lastSwrsReportingYear: Int
  organisationName: String
  rowId: Int
  totalFacilityCount: Int
}

"""
A filter to be used against `FacilitySearchResult` object types. All fields are combined with a logical ‘and.’
"""
input FacilitySearchResultFilter {
  """Checks for all expressions in this list."""
  and: [FacilitySearchResultFilter!]

  """Filter by the object’s `applicationByApplicationId` relation."""
  applicationByApplicationId: ApplicationFilter

  """A related `applicationByApplicationId` exists."""
  applicationByApplicationIdExists: Boolean

  """Filter by the object’s `applicationId` field."""
  applicationId: IntFilter

  """Filter by the object’s `applicationRevisionStatus` field."""
  applicationRevisionStatus: CiipApplicationRevisionStatusFilter

  """Filter by the object’s `facilityBcghgid` field."""
  facilityBcghgid: StringFilter

  """Filter by the object’s `facilityByFacilityId` relation."""
  facilityByFacilityId: FacilityFilter

  """A related `facilityByFacilityId` exists."""
  facilityByFacilityIdExists: Boolean

  """Filter by the object’s `facilityId` field."""
  facilityId: IntFilter

  """Filter by the object’s `facilityName` field."""
  facilityName: StringFilter

  """Filter by the object’s `facilityType` field."""
  facilityType: StringFilter

  """Filter by the object’s `lastSwrsReportingYear` field."""
  lastSwrsReportingYear: IntFilter

  """Negates the expression."""
  not: FacilitySearchResultFilter

  """Checks for any expressions in this list."""
  or: [FacilitySearchResultFilter!]

  """Filter by the object’s `organisationName` field."""
  organisationName: StringFilter

  """Filter by the object’s `rowId` field."""
  rowId: IntFilter

  """Filter by the object’s `totalFacilityCount` field."""
  totalFacilityCount: IntFilter
}

"""A connection to a list of `FacilitySearchResult` values."""
type FacilitySearchResultsConnection {
  """
  A list of edges which contains the `FacilitySearchResult` and cursor to aid in pagination.
  """
  edges: [FacilitySearchResultsEdge!]!

  """A list of `FacilitySearchResult` objects."""
  nodes: [FacilitySearchResult]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `FacilitySearchResult` you could get from the connection.
  """
  totalCount: Int!
}

"""A `FacilitySearchResult` edge in the connection."""
type FacilitySearchResultsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `FacilitySearchResult` at the end of the edge."""
  node: FacilitySearchResult
}

"""
A filter to be used against many `Application` object types. All fields are combined with a logical ‘and.’
"""
input FacilityToManyApplicationFilter {
  """
  Every related `Application` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: ApplicationFilter

  """
  No related `Application` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: ApplicationFilter

  """
  Some related `Application` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: ApplicationFilter
}

"""
A filter to be used against many `FacilitySearchResult` object types. All fields are combined with a logical ‘and.’
"""
input FacilityToManyFacilitySearchResultFilter {
  """
  Every related `FacilitySearchResult` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: FacilitySearchResultFilter

  """
  No related `FacilitySearchResult` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: FacilitySearchResultFilter

  """
  Some related `FacilitySearchResult` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: FacilitySearchResultFilter
}

"""
Table containing the structure of each form to be filled out when applying for CIIP
"""
type FormJson implements Node {
  """Reads and enables pagination through a set of `Application`."""
  applicationsByFormResultFormIdAndApplicationId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ApplicationCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ApplicationFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Application`."""
    orderBy: [ApplicationsOrderBy!] = [PRIMARY_KEY_ASC]
  ): FormJsonApplicationsByFormResultFormIdAndApplicationIdManyToManyConnection!

  """Reads and enables pagination through a set of `Application`."""
  applicationsByReviewCommentFormIdAndApplicationId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ApplicationCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ApplicationFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Application`."""
    orderBy: [ApplicationsOrderBy!] = [PRIMARY_KEY_ASC]
  ): FormJsonApplicationsByReviewCommentFormIdAndApplicationIdManyToManyConnection!

  """
  Reads a single `CiipApplicationWizard` that is related to this `FormJson`.
  """
  ciipApplicationWizardByFormId: CiipApplicationWizard

  """Reads and enables pagination through a set of `CiipApplicationWizard`."""
  ciipApplicationWizardsByFormId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CiipApplicationWizardCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CiipApplicationWizardFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CiipApplicationWizard`."""
    orderBy: [CiipApplicationWizardsOrderBy!] = [PRIMARY_KEY_ASC]
  ): CiipApplicationWizardsConnection! @deprecated(reason: "Please use ciipApplicationWizardByFormId instead")

  """Reads a single `CiipUser` that is related to this `FormJson`."""
  ciipUserByCreatedBy: CiipUser

  """Reads a single `CiipUser` that is related to this `FormJson`."""
  ciipUserByDeletedBy: CiipUser

  """Reads a single `CiipUser` that is related to this `FormJson`."""
  ciipUserByUpdatedBy: CiipUser

  """Reads and enables pagination through a set of `CiipUser`."""
  ciipUsersByFormResultFormIdAndCreatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CiipUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CiipUserFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CiipUser`."""
    orderBy: [CiipUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): FormJsonCiipUsersByFormResultFormIdAndCreatedByManyToManyConnection!

  """Reads and enables pagination through a set of `CiipUser`."""
  ciipUsersByFormResultFormIdAndDeletedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CiipUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CiipUserFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CiipUser`."""
    orderBy: [CiipUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): FormJsonCiipUsersByFormResultFormIdAndDeletedByManyToManyConnection!

  """Reads and enables pagination through a set of `CiipUser`."""
  ciipUsersByFormResultFormIdAndUpdatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CiipUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CiipUserFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CiipUser`."""
    orderBy: [CiipUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): FormJsonCiipUsersByFormResultFormIdAndUpdatedByManyToManyConnection!

  """Reads and enables pagination through a set of `CiipUser`."""
  ciipUsersByReviewCommentFormIdAndCreatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CiipUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CiipUserFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CiipUser`."""
    orderBy: [CiipUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): FormJsonCiipUsersByReviewCommentFormIdAndCreatedByManyToManyConnection!

  """Reads and enables pagination through a set of `CiipUser`."""
  ciipUsersByReviewCommentFormIdAndDeletedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CiipUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CiipUserFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CiipUser`."""
    orderBy: [CiipUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): FormJsonCiipUsersByReviewCommentFormIdAndDeletedByManyToManyConnection!

  """Reads and enables pagination through a set of `CiipUser`."""
  ciipUsersByReviewCommentFormIdAndUpdatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CiipUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CiipUserFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CiipUser`."""
    orderBy: [CiipUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): FormJsonCiipUsersByReviewCommentFormIdAndUpdatedByManyToManyConnection!

  """The date the form was updated"""
  createdAt: Datetime!

  """The person who updated the form"""
  createdBy: Int

  """The date the form was deleted"""
  deletedAt: Datetime

  """The person who deleted the form"""
  deletedBy: Int

  """description for the form"""
  description: String!

  """The JSON object that creates the form"""
  formJson: JSON!

  """The function used for init"""
  formResultInitFunction: String

  """Reads and enables pagination through a set of `FormResult`."""
  formResultsByFormId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: FormResultCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: FormResultFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `FormResult`."""
    orderBy: [FormResultsOrderBy!] = [PRIMARY_KEY_ASC]
  ): FormResultsConnection!

  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  id: ID!

  """Name for the form"""
  name: String!

  """
  Whether the form is initialized with data submitted in the previous year's application
  """
  prepopulateFromCiip: Boolean!

  """
  Whether the form is initialized with data submitted in the previous year's application
  """
  prepopulateFromSwrs: Boolean!

  """Reads and enables pagination through a set of `ReviewComment`."""
  reviewCommentsByFormId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ReviewCommentCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ReviewCommentFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `ReviewComment`."""
    orderBy: [ReviewCommentsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ReviewCommentsConnection!

  """Unique ID for the form"""
  rowId: Int!

  """short name for the form"""
  shortName: String!

  """slug for the use as classname"""
  slug: String!

  """The date the form was updated"""
  updatedAt: Datetime!

  """The person who updated the form"""
  updatedBy: Int
}

"""
A connection to a list of `Application` values, with data from `FormResult`.
"""
type FormJsonApplicationsByFormResultFormIdAndApplicationIdManyToManyConnection {
  """
  A list of edges which contains the `Application`, info from the `FormResult`, and the cursor to aid in pagination.
  """
  edges: [FormJsonApplicationsByFormResultFormIdAndApplicationIdManyToManyEdge!]!

  """A list of `Application` objects."""
  nodes: [Application]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Application` you could get from the connection."""
  totalCount: Int!
}

"""A `Application` edge in the connection, with data from `FormResult`."""
type FormJsonApplicationsByFormResultFormIdAndApplicationIdManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """Reads and enables pagination through a set of `FormResult`."""
  formResultsByApplicationId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: FormResultCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: FormResultFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `FormResult`."""
    orderBy: [FormResultsOrderBy!] = [PRIMARY_KEY_ASC]
  ): FormResultsConnection!

  """The `Application` at the end of the edge."""
  node: Application
}

"""
A connection to a list of `Application` values, with data from `ReviewComment`.
"""
type FormJsonApplicationsByReviewCommentFormIdAndApplicationIdManyToManyConnection {
  """
  A list of edges which contains the `Application`, info from the `ReviewComment`, and the cursor to aid in pagination.
  """
  edges: [FormJsonApplicationsByReviewCommentFormIdAndApplicationIdManyToManyEdge!]!

  """A list of `Application` objects."""
  nodes: [Application]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Application` you could get from the connection."""
  totalCount: Int!
}

"""
A `Application` edge in the connection, with data from `ReviewComment`.
"""
type FormJsonApplicationsByReviewCommentFormIdAndApplicationIdManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Application` at the end of the edge."""
  node: Application

  """Reads and enables pagination through a set of `ReviewComment`."""
  reviewCommentsByApplicationId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ReviewCommentCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ReviewCommentFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `ReviewComment`."""
    orderBy: [ReviewCommentsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ReviewCommentsConnection!
}

"""
A connection to a list of `CiipUser` values, with data from `FormResult`.
"""
type FormJsonCiipUsersByFormResultFormIdAndCreatedByManyToManyConnection {
  """
  A list of edges which contains the `CiipUser`, info from the `FormResult`, and the cursor to aid in pagination.
  """
  edges: [FormJsonCiipUsersByFormResultFormIdAndCreatedByManyToManyEdge!]!

  """A list of `CiipUser` objects."""
  nodes: [CiipUser]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CiipUser` you could get from the connection."""
  totalCount: Int!
}

"""A `CiipUser` edge in the connection, with data from `FormResult`."""
type FormJsonCiipUsersByFormResultFormIdAndCreatedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """Reads and enables pagination through a set of `FormResult`."""
  formResultsByCreatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: FormResultCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: FormResultFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `FormResult`."""
    orderBy: [FormResultsOrderBy!] = [PRIMARY_KEY_ASC]
  ): FormResultsConnection!

  """The `CiipUser` at the end of the edge."""
  node: CiipUser
}

"""
A connection to a list of `CiipUser` values, with data from `FormResult`.
"""
type FormJsonCiipUsersByFormResultFormIdAndDeletedByManyToManyConnection {
  """
  A list of edges which contains the `CiipUser`, info from the `FormResult`, and the cursor to aid in pagination.
  """
  edges: [FormJsonCiipUsersByFormResultFormIdAndDeletedByManyToManyEdge!]!

  """A list of `CiipUser` objects."""
  nodes: [CiipUser]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CiipUser` you could get from the connection."""
  totalCount: Int!
}

"""A `CiipUser` edge in the connection, with data from `FormResult`."""
type FormJsonCiipUsersByFormResultFormIdAndDeletedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """Reads and enables pagination through a set of `FormResult`."""
  formResultsByDeletedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: FormResultCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: FormResultFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `FormResult`."""
    orderBy: [FormResultsOrderBy!] = [PRIMARY_KEY_ASC]
  ): FormResultsConnection!

  """The `CiipUser` at the end of the edge."""
  node: CiipUser
}

"""
A connection to a list of `CiipUser` values, with data from `FormResult`.
"""
type FormJsonCiipUsersByFormResultFormIdAndUpdatedByManyToManyConnection {
  """
  A list of edges which contains the `CiipUser`, info from the `FormResult`, and the cursor to aid in pagination.
  """
  edges: [FormJsonCiipUsersByFormResultFormIdAndUpdatedByManyToManyEdge!]!

  """A list of `CiipUser` objects."""
  nodes: [CiipUser]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CiipUser` you could get from the connection."""
  totalCount: Int!
}

"""A `CiipUser` edge in the connection, with data from `FormResult`."""
type FormJsonCiipUsersByFormResultFormIdAndUpdatedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """Reads and enables pagination through a set of `FormResult`."""
  formResultsByUpdatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: FormResultCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: FormResultFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `FormResult`."""
    orderBy: [FormResultsOrderBy!] = [PRIMARY_KEY_ASC]
  ): FormResultsConnection!

  """The `CiipUser` at the end of the edge."""
  node: CiipUser
}

"""
A connection to a list of `CiipUser` values, with data from `ReviewComment`.
"""
type FormJsonCiipUsersByReviewCommentFormIdAndCreatedByManyToManyConnection {
  """
  A list of edges which contains the `CiipUser`, info from the `ReviewComment`, and the cursor to aid in pagination.
  """
  edges: [FormJsonCiipUsersByReviewCommentFormIdAndCreatedByManyToManyEdge!]!

  """A list of `CiipUser` objects."""
  nodes: [CiipUser]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CiipUser` you could get from the connection."""
  totalCount: Int!
}

"""A `CiipUser` edge in the connection, with data from `ReviewComment`."""
type FormJsonCiipUsersByReviewCommentFormIdAndCreatedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CiipUser` at the end of the edge."""
  node: CiipUser

  """Reads and enables pagination through a set of `ReviewComment`."""
  reviewCommentsByCreatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ReviewCommentCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ReviewCommentFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `ReviewComment`."""
    orderBy: [ReviewCommentsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ReviewCommentsConnection!
}

"""
A connection to a list of `CiipUser` values, with data from `ReviewComment`.
"""
type FormJsonCiipUsersByReviewCommentFormIdAndDeletedByManyToManyConnection {
  """
  A list of edges which contains the `CiipUser`, info from the `ReviewComment`, and the cursor to aid in pagination.
  """
  edges: [FormJsonCiipUsersByReviewCommentFormIdAndDeletedByManyToManyEdge!]!

  """A list of `CiipUser` objects."""
  nodes: [CiipUser]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CiipUser` you could get from the connection."""
  totalCount: Int!
}

"""A `CiipUser` edge in the connection, with data from `ReviewComment`."""
type FormJsonCiipUsersByReviewCommentFormIdAndDeletedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CiipUser` at the end of the edge."""
  node: CiipUser

  """Reads and enables pagination through a set of `ReviewComment`."""
  reviewCommentsByDeletedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ReviewCommentCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ReviewCommentFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `ReviewComment`."""
    orderBy: [ReviewCommentsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ReviewCommentsConnection!
}

"""
A connection to a list of `CiipUser` values, with data from `ReviewComment`.
"""
type FormJsonCiipUsersByReviewCommentFormIdAndUpdatedByManyToManyConnection {
  """
  A list of edges which contains the `CiipUser`, info from the `ReviewComment`, and the cursor to aid in pagination.
  """
  edges: [FormJsonCiipUsersByReviewCommentFormIdAndUpdatedByManyToManyEdge!]!

  """A list of `CiipUser` objects."""
  nodes: [CiipUser]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CiipUser` you could get from the connection."""
  totalCount: Int!
}

"""A `CiipUser` edge in the connection, with data from `ReviewComment`."""
type FormJsonCiipUsersByReviewCommentFormIdAndUpdatedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CiipUser` at the end of the edge."""
  node: CiipUser

  """Reads and enables pagination through a set of `ReviewComment`."""
  reviewCommentsByUpdatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ReviewCommentCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ReviewCommentFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `ReviewComment`."""
    orderBy: [ReviewCommentsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ReviewCommentsConnection!
}

"""
A condition to be used against `FormJson` object types. All fields are tested
for equality and combined with a logical ‘and.’
"""
input FormJsonCondition {
  """Checks for equality with the object’s `createdAt` field."""
  createdAt: Datetime

  """Checks for equality with the object’s `createdBy` field."""
  createdBy: Int

  """Checks for equality with the object’s `deletedAt` field."""
  deletedAt: Datetime

  """Checks for equality with the object’s `deletedBy` field."""
  deletedBy: Int

  """Checks for equality with the object’s `description` field."""
  description: String

  """Checks for equality with the object’s `formJson` field."""
  formJson: JSON

  """Checks for equality with the object’s `formResultInitFunction` field."""
  formResultInitFunction: String

  """Checks for equality with the object’s `name` field."""
  name: String

  """Checks for equality with the object’s `prepopulateFromCiip` field."""
  prepopulateFromCiip: Boolean

  """Checks for equality with the object’s `prepopulateFromSwrs` field."""
  prepopulateFromSwrs: Boolean

  """Checks for equality with the object’s `rowId` field."""
  rowId: Int

  """Checks for equality with the object’s `shortName` field."""
  shortName: String

  """Checks for equality with the object’s `slug` field."""
  slug: String

  """Checks for equality with the object’s `updatedAt` field."""
  updatedAt: Datetime

  """Checks for equality with the object’s `updatedBy` field."""
  updatedBy: Int
}

"""
A filter to be used against `FormJson` object types. All fields are combined with a logical ‘and.’
"""
input FormJsonFilter {
  """Checks for all expressions in this list."""
  and: [FormJsonFilter!]

  """Filter by the object’s `ciipApplicationWizardByFormId` relation."""
  ciipApplicationWizardByFormId: CiipApplicationWizardFilter

  """A related `ciipApplicationWizardByFormId` exists."""
  ciipApplicationWizardByFormIdExists: Boolean

  """Filter by the object’s `ciipUserByCreatedBy` relation."""
  ciipUserByCreatedBy: CiipUserFilter

  """A related `ciipUserByCreatedBy` exists."""
  ciipUserByCreatedByExists: Boolean

  """Filter by the object’s `ciipUserByDeletedBy` relation."""
  ciipUserByDeletedBy: CiipUserFilter

  """A related `ciipUserByDeletedBy` exists."""
  ciipUserByDeletedByExists: Boolean

  """Filter by the object’s `ciipUserByUpdatedBy` relation."""
  ciipUserByUpdatedBy: CiipUserFilter

  """A related `ciipUserByUpdatedBy` exists."""
  ciipUserByUpdatedByExists: Boolean

  """Filter by the object’s `createdAt` field."""
  createdAt: DatetimeFilter

  """Filter by the object’s `createdBy` field."""
  createdBy: IntFilter

  """Filter by the object’s `deletedAt` field."""
  deletedAt: DatetimeFilter

  """Filter by the object’s `deletedBy` field."""
  deletedBy: IntFilter

  """Filter by the object’s `description` field."""
  description: StringFilter

  """Filter by the object’s `formJson` field."""
  formJson: JSONFilter

  """Filter by the object’s `formResultInitFunction` field."""
  formResultInitFunction: StringFilter

  """Filter by the object’s `formResultsByFormId` relation."""
  formResultsByFormId: FormJsonToManyFormResultFilter

  """Some related `formResultsByFormId` exist."""
  formResultsByFormIdExist: Boolean

  """Filter by the object’s `name` field."""
  name: StringFilter

  """Negates the expression."""
  not: FormJsonFilter

  """Checks for any expressions in this list."""
  or: [FormJsonFilter!]

  """Filter by the object’s `prepopulateFromCiip` field."""
  prepopulateFromCiip: BooleanFilter

  """Filter by the object’s `prepopulateFromSwrs` field."""
  prepopulateFromSwrs: BooleanFilter

  """Filter by the object’s `reviewCommentsByFormId` relation."""
  reviewCommentsByFormId: FormJsonToManyReviewCommentFilter

  """Some related `reviewCommentsByFormId` exist."""
  reviewCommentsByFormIdExist: Boolean

  """Filter by the object’s `rowId` field."""
  rowId: IntFilter

  """Filter by the object’s `shortName` field."""
  shortName: StringFilter

  """Filter by the object’s `slug` field."""
  slug: StringFilter

  """Filter by the object’s `updatedAt` field."""
  updatedAt: DatetimeFilter

  """Filter by the object’s `updatedBy` field."""
  updatedBy: IntFilter
}

"""An input for mutations affecting `FormJson`"""
input FormJsonInput {
  """The date the form was updated"""
  createdAt: Datetime

  """The person who updated the form"""
  createdBy: Int

  """The date the form was deleted"""
  deletedAt: Datetime

  """The person who deleted the form"""
  deletedBy: Int

  """description for the form"""
  description: String!

  """The JSON object that creates the form"""
  formJson: JSON!

  """The function used for init"""
  formResultInitFunction: String

  """Name for the form"""
  name: String!

  """
  Whether the form is initialized with data submitted in the previous year's application
  """
  prepopulateFromCiip: Boolean!

  """
  Whether the form is initialized with data submitted in the previous year's application
  """
  prepopulateFromSwrs: Boolean!

  """short name for the form"""
  shortName: String!

  """slug for the use as classname"""
  slug: String!

  """The date the form was updated"""
  updatedAt: Datetime

  """The person who updated the form"""
  updatedBy: Int
}

"""
Represents an update to a `FormJson`. Fields that are set will be updated.
"""
input FormJsonPatch {
  """The date the form was updated"""
  createdAt: Datetime

  """The person who updated the form"""
  createdBy: Int

  """The date the form was deleted"""
  deletedAt: Datetime

  """The person who deleted the form"""
  deletedBy: Int

  """description for the form"""
  description: String

  """The JSON object that creates the form"""
  formJson: JSON

  """The function used for init"""
  formResultInitFunction: String

  """Name for the form"""
  name: String

  """
  Whether the form is initialized with data submitted in the previous year's application
  """
  prepopulateFromCiip: Boolean

  """
  Whether the form is initialized with data submitted in the previous year's application
  """
  prepopulateFromSwrs: Boolean

  """short name for the form"""
  shortName: String

  """slug for the use as classname"""
  slug: String

  """The date the form was updated"""
  updatedAt: Datetime

  """The person who updated the form"""
  updatedBy: Int
}

"""A connection to a list of `FormJson` values."""
type FormJsonsConnection {
  """
  A list of edges which contains the `FormJson` and cursor to aid in pagination.
  """
  edges: [FormJsonsEdge!]!

  """A list of `FormJson` objects."""
  nodes: [FormJson]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `FormJson` you could get from the connection."""
  totalCount: Int!
}

"""A `FormJson` edge in the connection."""
type FormJsonsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `FormJson` at the end of the edge."""
  node: FormJson
}

"""Methods to use when ordering `FormJson`."""
enum FormJsonsOrderBy {
  CREATED_AT_ASC
  CREATED_AT_DESC
  CREATED_BY_ASC
  CREATED_BY_DESC
  DELETED_AT_ASC
  DELETED_AT_DESC
  DELETED_BY_ASC
  DELETED_BY_DESC
  DESCRIPTION_ASC
  DESCRIPTION_DESC
  FORM_JSON_ASC
  FORM_JSON_DESC
  FORM_RESULT_INIT_FUNCTION_ASC
  FORM_RESULT_INIT_FUNCTION_DESC
  ID_ASC
  ID_DESC
  NAME_ASC
  NAME_DESC
  NATURAL
  PREPOPULATE_FROM_CIIP_ASC
  PREPOPULATE_FROM_CIIP_DESC
  PREPOPULATE_FROM_SWRS_ASC
  PREPOPULATE_FROM_SWRS_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  SHORT_NAME_ASC
  SHORT_NAME_DESC
  SLUG_ASC
  SLUG_DESC
  UPDATED_AT_ASC
  UPDATED_AT_DESC
  UPDATED_BY_ASC
  UPDATED_BY_DESC
}

"""
A filter to be used against many `FormResult` object types. All fields are combined with a logical ‘and.’
"""
input FormJsonToManyFormResultFilter {
  """
  Every related `FormResult` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: FormResultFilter

  """
  No related `FormResult` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: FormResultFilter

  """
  Some related `FormResult` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: FormResultFilter
}

"""
A filter to be used against many `ReviewComment` object types. All fields are combined with a logical ‘and.’
"""
input FormJsonToManyReviewCommentFilter {
  """
  Every related `ReviewComment` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: ReviewCommentFilter

  """
  No related `ReviewComment` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: ReviewCommentFilter

  """
  Some related `ReviewComment` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: ReviewCommentFilter
}

"""Table containing CIIP application data received from a user"""
type FormResult implements Node {
  """Reads a single `Application` that is related to this `FormResult`."""
  applicationByApplicationId: Application

  """The Unique ID of the Application"""
  applicationId: Int!

  """
  Reads a single `ApplicationRevision` that is related to this `FormResult`.
  """
  applicationRevisionByApplicationIdAndVersionNumber: ApplicationRevision

  """Reads a single `CiipUser` that is related to this `FormResult`."""
  ciipUserByCreatedBy: CiipUser

  """Reads a single `CiipUser` that is related to this `FormResult`."""
  ciipUserByDeletedBy: CiipUser

  """Reads a single `CiipUser` that is related to this `FormResult`."""
  ciipUserByUpdatedBy: CiipUser

  """The date the form was updated"""
  createdAt: Datetime!

  """The person who updated the form"""
  createdBy: Int

  """The date the form was deleted"""
  deletedAt: Datetime

  """The person who deleted the form"""
  deletedBy: Int

  """The Unique ID of the form"""
  formId: Int!

  """Reads a single `FormJson` that is related to this `FormResult`."""
  formJsonByFormId: FormJson

  """JSON dump of form data"""
  formResult: JSON!

  """Computed column for graphql to return the status for a form result"""
  formResultStatuses: FormResultStatus

  """
  Computed column for graphql to return a boolean value for whether a form result has unresolved comments
  """
  hasUnresolvedComments: Boolean

  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  id: ID!

  """
  Computed column for graphql to return set of internal or general comments for a form result
  """
  internalGeneralComments(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ReviewCommentFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int
  ): ReviewCommentsConnection!

  """
  Computed column for graphql to return a set of requested change comments for a form result
  """
  requestedChangeComments(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ReviewCommentFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int
  ): ReviewCommentsConnection!

  """Unique ID for the form"""
  rowId: Int!

  """The date the form was updated"""
  updatedAt: Datetime!

  """The person who updated the form"""
  updatedBy: Int

  """The application version this form result is attached to"""
  versionNumber: Int!
}

"""
A condition to be used against `FormResult` object types. All fields are tested
for equality and combined with a logical ‘and.’
"""
input FormResultCondition {
  """Checks for equality with the object’s `applicationId` field."""
  applicationId: Int

  """Checks for equality with the object’s `createdAt` field."""
  createdAt: Datetime

  """Checks for equality with the object’s `createdBy` field."""
  createdBy: Int

  """Checks for equality with the object’s `deletedAt` field."""
  deletedAt: Datetime

  """Checks for equality with the object’s `deletedBy` field."""
  deletedBy: Int

  """Checks for equality with the object’s `formId` field."""
  formId: Int

  """Checks for equality with the object’s `formResult` field."""
  formResult: JSON

  """Checks for equality with the object’s `rowId` field."""
  rowId: Int

  """Checks for equality with the object’s `updatedAt` field."""
  updatedAt: Datetime

  """Checks for equality with the object’s `updatedBy` field."""
  updatedBy: Int

  """Checks for equality with the object’s `versionNumber` field."""
  versionNumber: Int
}

"""
A filter to be used against `FormResult` object types. All fields are combined with a logical ‘and.’
"""
input FormResultFilter {
  """Checks for all expressions in this list."""
  and: [FormResultFilter!]

  """Filter by the object’s `applicationByApplicationId` relation."""
  applicationByApplicationId: ApplicationFilter

  """Filter by the object’s `applicationId` field."""
  applicationId: IntFilter

  """
  Filter by the object’s `applicationRevisionByApplicationIdAndVersionNumber` relation.
  """
  applicationRevisionByApplicationIdAndVersionNumber: ApplicationRevisionFilter

  """Filter by the object’s `ciipUserByCreatedBy` relation."""
  ciipUserByCreatedBy: CiipUserFilter

  """A related `ciipUserByCreatedBy` exists."""
  ciipUserByCreatedByExists: Boolean

  """Filter by the object’s `ciipUserByDeletedBy` relation."""
  ciipUserByDeletedBy: CiipUserFilter

  """A related `ciipUserByDeletedBy` exists."""
  ciipUserByDeletedByExists: Boolean

  """Filter by the object’s `ciipUserByUpdatedBy` relation."""
  ciipUserByUpdatedBy: CiipUserFilter

  """A related `ciipUserByUpdatedBy` exists."""
  ciipUserByUpdatedByExists: Boolean

  """Filter by the object’s `createdAt` field."""
  createdAt: DatetimeFilter

  """Filter by the object’s `createdBy` field."""
  createdBy: IntFilter

  """Filter by the object’s `deletedAt` field."""
  deletedAt: DatetimeFilter

  """Filter by the object’s `deletedBy` field."""
  deletedBy: IntFilter

  """Filter by the object’s `formId` field."""
  formId: IntFilter

  """Filter by the object’s `formJsonByFormId` relation."""
  formJsonByFormId: FormJsonFilter

  """Filter by the object’s `formResult` field."""
  formResult: JSONFilter

  """Filter by the object’s `hasUnresolvedComments` field."""
  hasUnresolvedComments: BooleanFilter

  """Negates the expression."""
  not: FormResultFilter

  """Checks for any expressions in this list."""
  or: [FormResultFilter!]

  """Filter by the object’s `rowId` field."""
  rowId: IntFilter

  """Filter by the object’s `updatedAt` field."""
  updatedAt: DatetimeFilter

  """Filter by the object’s `updatedBy` field."""
  updatedBy: IntFilter

  """Filter by the object’s `versionNumber` field."""
  versionNumber: IntFilter
}

"""An input for mutations affecting `FormResult`"""
input FormResultInput {
  """The Unique ID of the Application"""
  applicationId: Int!

  """The date the form was updated"""
  createdAt: Datetime

  """The person who updated the form"""
  createdBy: Int

  """The date the form was deleted"""
  deletedAt: Datetime

  """The person who deleted the form"""
  deletedBy: Int

  """The Unique ID of the form"""
  formId: Int!

  """JSON dump of form data"""
  formResult: JSON!

  """The date the form was updated"""
  updatedAt: Datetime

  """The person who updated the form"""
  updatedBy: Int

  """The application version this form result is attached to"""
  versionNumber: Int!
}

"""
Represents an update to a `FormResult`. Fields that are set will be updated.
"""
input FormResultPatch {
  """The Unique ID of the Application"""
  applicationId: Int

  """The date the form was updated"""
  createdAt: Datetime

  """The person who updated the form"""
  createdBy: Int

  """The date the form was deleted"""
  deletedAt: Datetime

  """The person who deleted the form"""
  deletedBy: Int

  """The Unique ID of the form"""
  formId: Int

  """JSON dump of form data"""
  formResult: JSON

  """The date the form was updated"""
  updatedAt: Datetime

  """The person who updated the form"""
  updatedBy: Int

  """The application version this form result is attached to"""
  versionNumber: Int
}

"""A connection to a list of `FormResult` values."""
type FormResultsConnection {
  """
  A list of edges which contains the `FormResult` and cursor to aid in pagination.
  """
  edges: [FormResultsEdge!]!

  """A list of `FormResult` objects."""
  nodes: [FormResult]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `FormResult` you could get from the connection."""
  totalCount: Int!
}

"""A `FormResult` edge in the connection."""
type FormResultsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `FormResult` at the end of the edge."""
  node: FormResult
}

"""Methods to use when ordering `FormResult`."""
enum FormResultsOrderBy {
  APPLICATION_ID_ASC
  APPLICATION_ID_DESC
  CREATED_AT_ASC
  CREATED_AT_DESC
  CREATED_BY_ASC
  CREATED_BY_DESC
  DELETED_AT_ASC
  DELETED_AT_DESC
  DELETED_BY_ASC
  DELETED_BY_DESC
  FORM_ID_ASC
  FORM_ID_DESC
  FORM_RESULT_ASC
  FORM_RESULT_DESC
  ID_ASC
  ID_DESC
  NATURAL
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  UPDATED_AT_ASC
  UPDATED_AT_DESC
  UPDATED_BY_ASC
  UPDATED_BY_DESC
  VERSION_NUMBER_ASC
  VERSION_NUMBER_DESC
}

"""The form result status data"""
type FormResultStatus implements Node {
  """
  Reads a single `Application` that is related to this `FormResultStatus`.
  """
  applicationByApplicationId: Application

  """The foreign key to application used for reference and join"""
  applicationId: Int!

  """Reads a single `CiipUser` that is related to this `FormResultStatus`."""
  ciipUserByCreatedBy: CiipUser

  """Reads a single `CiipUser` that is related to this `FormResultStatus`."""
  ciipUserByDeletedBy: CiipUser

  """Reads a single `CiipUser` that is related to this `FormResultStatus`."""
  ciipUserByUpdatedBy: CiipUser

  """The date the form result status was updated"""
  createdAt: Datetime!

  """The person who updated the form result status"""
  createdBy: Int

  """The date the form result status was deleted"""
  deletedAt: Datetime

  """The person who deleted the form result status"""
  deletedBy: Int

  """The form id (form_json) this status is attached to"""
  formId: Int!

  """The form result status"""
  formResultStatus: CiipFormResultStatus

  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  id: ID!

  """The id used for reference and join"""
  rowId: Int!

  """The date the form result status was updated"""
  updatedAt: Datetime!

  """The person who updated the form result status"""
  updatedBy: Int
}

"""
A condition to be used against `FormResultStatus` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input FormResultStatusCondition {
  """Checks for equality with the object’s `applicationId` field."""
  applicationId: Int

  """Checks for equality with the object’s `createdAt` field."""
  createdAt: Datetime

  """Checks for equality with the object’s `createdBy` field."""
  createdBy: Int

  """Checks for equality with the object’s `deletedAt` field."""
  deletedAt: Datetime

  """Checks for equality with the object’s `deletedBy` field."""
  deletedBy: Int

  """Checks for equality with the object’s `formId` field."""
  formId: Int

  """Checks for equality with the object’s `formResultStatus` field."""
  formResultStatus: CiipFormResultStatus

  """Checks for equality with the object’s `rowId` field."""
  rowId: Int

  """Checks for equality with the object’s `updatedAt` field."""
  updatedAt: Datetime

  """Checks for equality with the object’s `updatedBy` field."""
  updatedBy: Int
}

"""A connection to a list of `FormResultStatus` values."""
type FormResultStatusesConnection {
  """
  A list of edges which contains the `FormResultStatus` and cursor to aid in pagination.
  """
  edges: [FormResultStatusesEdge!]!

  """A list of `FormResultStatus` objects."""
  nodes: [FormResultStatus]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `FormResultStatus` you could get from the connection.
  """
  totalCount: Int!
}

"""A `FormResultStatus` edge in the connection."""
type FormResultStatusesEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `FormResultStatus` at the end of the edge."""
  node: FormResultStatus
}

"""Methods to use when ordering `FormResultStatus`."""
enum FormResultStatusesOrderBy {
  APPLICATION_ID_ASC
  APPLICATION_ID_DESC
  CREATED_AT_ASC
  CREATED_AT_DESC
  CREATED_BY_ASC
  CREATED_BY_DESC
  DELETED_AT_ASC
  DELETED_AT_DESC
  DELETED_BY_ASC
  DELETED_BY_DESC
  FORM_ID_ASC
  FORM_ID_DESC
  FORM_RESULT_STATUS_ASC
  FORM_RESULT_STATUS_DESC
  ID_ASC
  ID_DESC
  NATURAL
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  UPDATED_AT_ASC
  UPDATED_AT_DESC
  UPDATED_BY_ASC
  UPDATED_BY_DESC
}

"""
A filter to be used against `FormResultStatus` object types. All fields are combined with a logical ‘and.’
"""
input FormResultStatusFilter {
  """Checks for all expressions in this list."""
  and: [FormResultStatusFilter!]

  """Filter by the object’s `applicationByApplicationId` relation."""
  applicationByApplicationId: ApplicationFilter

  """Filter by the object’s `applicationId` field."""
  applicationId: IntFilter

  """Filter by the object’s `ciipUserByCreatedBy` relation."""
  ciipUserByCreatedBy: CiipUserFilter

  """A related `ciipUserByCreatedBy` exists."""
  ciipUserByCreatedByExists: Boolean

  """Filter by the object’s `ciipUserByDeletedBy` relation."""
  ciipUserByDeletedBy: CiipUserFilter

  """A related `ciipUserByDeletedBy` exists."""
  ciipUserByDeletedByExists: Boolean

  """Filter by the object’s `ciipUserByUpdatedBy` relation."""
  ciipUserByUpdatedBy: CiipUserFilter

  """A related `ciipUserByUpdatedBy` exists."""
  ciipUserByUpdatedByExists: Boolean

  """Filter by the object’s `createdAt` field."""
  createdAt: DatetimeFilter

  """Filter by the object’s `createdBy` field."""
  createdBy: IntFilter

  """Filter by the object’s `deletedAt` field."""
  deletedAt: DatetimeFilter

  """Filter by the object’s `deletedBy` field."""
  deletedBy: IntFilter

  """Filter by the object’s `formId` field."""
  formId: IntFilter

  """Filter by the object’s `formResultStatus` field."""
  formResultStatus: CiipFormResultStatusFilter

  """Negates the expression."""
  not: FormResultStatusFilter

  """Checks for any expressions in this list."""
  or: [FormResultStatusFilter!]

  """Filter by the object’s `rowId` field."""
  rowId: IntFilter

  """Filter by the object’s `updatedAt` field."""
  updatedAt: DatetimeFilter

  """Filter by the object’s `updatedBy` field."""
  updatedBy: IntFilter
}

"""An input for mutations affecting `FormResultStatus`"""
input FormResultStatusInput {
  """The foreign key to application used for reference and join"""
  applicationId: Int!

  """The date the form result status was updated"""
  createdAt: Datetime

  """The person who updated the form result status"""
  createdBy: Int

  """The date the form result status was deleted"""
  deletedAt: Datetime

  """The person who deleted the form result status"""
  deletedBy: Int

  """The form id (form_json) this status is attached to"""
  formId: Int!

  """The form result status"""
  formResultStatus: CiipFormResultStatus

  """The date the form result status was updated"""
  updatedAt: Datetime

  """The person who updated the form result status"""
  updatedBy: Int
}

"""
Represents an update to a `FormResultStatus`. Fields that are set will be updated.
"""
input FormResultStatusPatch {
  """The foreign key to application used for reference and join"""
  applicationId: Int

  """The date the form result status was updated"""
  createdAt: Datetime

  """The person who updated the form result status"""
  createdBy: Int

  """The date the form result status was deleted"""
  deletedAt: Datetime

  """The person who deleted the form result status"""
  deletedBy: Int

  """The form id (form_json) this status is attached to"""
  formId: Int

  """The form result status"""
  formResultStatus: CiipFormResultStatus

  """The date the form result status was updated"""
  updatedAt: Datetime

  """The person who updated the form result status"""
  updatedBy: Int
}

"""Table containing information on fuel"""
type Fuel implements Node {
  """Reads a single `CiipUser` that is related to this `Fuel`."""
  ciipUserByCreatedBy: CiipUser

  """Reads a single `CiipUser` that is related to this `Fuel`."""
  ciipUserByDeletedBy: CiipUser

  """Reads a single `CiipUser` that is related to this `Fuel`."""
  ciipUserByUpdatedBy: CiipUser

  """Creation date of row"""
  createdAt: Datetime!

  """Creator of row"""
  createdBy: Int

  """Date of deletion"""
  deletedAt: Datetime

  """The user who deleted the row"""
  deletedBy: Int

  """The description of the fuel"""
  description: String

  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  id: ID!

  """The name of the fuel"""
  name: String!

  """The parent ID(s) (previous state) of the fuel"""
  parent: [Int]

  """Unique ID for the fuel"""
  rowId: Int!

  """
  The current state of the fuel within the lifecycle (created, split, merged, redefined, archived, unarchived)
  """
  state: String

  """
  The foreign key to the fuel_mapping table in swrs (used for carbon tax calculation)
  """
  swrsFuelMappingId: Int!

  """The unit of measure for the fuel"""
  units: String

  """Updated date of row"""
  updatedAt: Datetime!

  """Updator of row"""
  updatedBy: Int
}

"""
A condition to be used against `Fuel` object types. All fields are tested for equality and combined with a logical ‘and.’
"""
input FuelCondition {
  """Checks for equality with the object’s `createdAt` field."""
  createdAt: Datetime

  """Checks for equality with the object’s `createdBy` field."""
  createdBy: Int

  """Checks for equality with the object’s `deletedAt` field."""
  deletedAt: Datetime

  """Checks for equality with the object’s `deletedBy` field."""
  deletedBy: Int

  """Checks for equality with the object’s `description` field."""
  description: String

  """Checks for equality with the object’s `name` field."""
  name: String

  """Checks for equality with the object’s `parent` field."""
  parent: [Int]

  """Checks for equality with the object’s `rowId` field."""
  rowId: Int

  """Checks for equality with the object’s `state` field."""
  state: String

  """Checks for equality with the object’s `swrsFuelMappingId` field."""
  swrsFuelMappingId: Int

  """Checks for equality with the object’s `units` field."""
  units: String

  """Checks for equality with the object’s `updatedAt` field."""
  updatedAt: Datetime

  """Checks for equality with the object’s `updatedBy` field."""
  updatedBy: Int
}

"""A connection to a list of `FuelDatum` values."""
type FuelDataConnection {
  """
  A list of edges which contains the `FuelDatum` and cursor to aid in pagination.
  """
  edges: [FuelDataEdge!]!

  """A list of `FuelDatum` objects."""
  nodes: [FuelDatum]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `FuelDatum` you could get from the connection."""
  totalCount: Int!
}

"""A `FuelDatum` edge in the connection."""
type FuelDataEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `FuelDatum` at the end of the edge."""
  node: FuelDatum
}

type FuelDatum {
  annualFuelAmount: BigFloat
  annualWeightedAvgCarbonContent: BigFloat
  annualWeightedAvgHhv: BigFloat
  emissionCategory: String
  fuelClassification: String
  fuelDescription: String
  fuelId: Int
  fuelType: String
  fuelUnits: String
  reportId: Int
}

"""
A filter to be used against `FuelDatum` object types. All fields are combined with a logical ‘and.’
"""
input FuelDatumFilter {
  """Checks for all expressions in this list."""
  and: [FuelDatumFilter!]

  """Filter by the object’s `annualFuelAmount` field."""
  annualFuelAmount: BigFloatFilter

  """Filter by the object’s `annualWeightedAvgCarbonContent` field."""
  annualWeightedAvgCarbonContent: BigFloatFilter

  """Filter by the object’s `annualWeightedAvgHhv` field."""
  annualWeightedAvgHhv: BigFloatFilter

  """Filter by the object’s `emissionCategory` field."""
  emissionCategory: StringFilter

  """Filter by the object’s `fuelClassification` field."""
  fuelClassification: StringFilter

  """Filter by the object’s `fuelDescription` field."""
  fuelDescription: StringFilter

  """Filter by the object’s `fuelId` field."""
  fuelId: IntFilter

  """Filter by the object’s `fuelType` field."""
  fuelType: StringFilter

  """Filter by the object’s `fuelUnits` field."""
  fuelUnits: StringFilter

  """Negates the expression."""
  not: FuelDatumFilter

  """Checks for any expressions in this list."""
  or: [FuelDatumFilter!]

  """Filter by the object’s `reportId` field."""
  reportId: IntFilter
}

"""
A filter to be used against `Fuel` object types. All fields are combined with a logical ‘and.’
"""
input FuelFilter {
  """Checks for all expressions in this list."""
  and: [FuelFilter!]

  """Filter by the object’s `ciipUserByCreatedBy` relation."""
  ciipUserByCreatedBy: CiipUserFilter

  """A related `ciipUserByCreatedBy` exists."""
  ciipUserByCreatedByExists: Boolean

  """Filter by the object’s `ciipUserByDeletedBy` relation."""
  ciipUserByDeletedBy: CiipUserFilter

  """A related `ciipUserByDeletedBy` exists."""
  ciipUserByDeletedByExists: Boolean

  """Filter by the object’s `ciipUserByUpdatedBy` relation."""
  ciipUserByUpdatedBy: CiipUserFilter

  """A related `ciipUserByUpdatedBy` exists."""
  ciipUserByUpdatedByExists: Boolean

  """Filter by the object’s `createdAt` field."""
  createdAt: DatetimeFilter

  """Filter by the object’s `createdBy` field."""
  createdBy: IntFilter

  """Filter by the object’s `deletedAt` field."""
  deletedAt: DatetimeFilter

  """Filter by the object’s `deletedBy` field."""
  deletedBy: IntFilter

  """Filter by the object’s `description` field."""
  description: StringFilter

  """Filter by the object’s `name` field."""
  name: StringFilter

  """Negates the expression."""
  not: FuelFilter

  """Checks for any expressions in this list."""
  or: [FuelFilter!]

  """Filter by the object’s `parent` field."""
  parent: IntListFilter

  """Filter by the object’s `rowId` field."""
  rowId: IntFilter

  """Filter by the object’s `state` field."""
  state: StringFilter

  """Filter by the object’s `swrsFuelMappingId` field."""
  swrsFuelMappingId: IntFilter

  """Filter by the object’s `units` field."""
  units: StringFilter

  """Filter by the object’s `updatedAt` field."""
  updatedAt: DatetimeFilter

  """Filter by the object’s `updatedBy` field."""
  updatedBy: IntFilter
}

"""An input for mutations affecting `Fuel`"""
input FuelInput {
  """Creation date of row"""
  createdAt: Datetime

  """Creator of row"""
  createdBy: Int

  """Date of deletion"""
  deletedAt: Datetime

  """The user who deleted the row"""
  deletedBy: Int

  """The description of the fuel"""
  description: String

  """The name of the fuel"""
  name: String!

  """The parent ID(s) (previous state) of the fuel"""
  parent: [Int]

  """
  The current state of the fuel within the lifecycle (created, split, merged, redefined, archived, unarchived)
  """
  state: String

  """
  The foreign key to the fuel_mapping table in swrs (used for carbon tax calculation)
  """
  swrsFuelMappingId: Int!

  """The unit of measure for the fuel"""
  units: String

  """Updated date of row"""
  updatedAt: Datetime

  """Updator of row"""
  updatedBy: Int
}

"""Represents an update to a `Fuel`. Fields that are set will be updated."""
input FuelPatch {
  """Creation date of row"""
  createdAt: Datetime

  """Creator of row"""
  createdBy: Int

  """Date of deletion"""
  deletedAt: Datetime

  """The user who deleted the row"""
  deletedBy: Int

  """The description of the fuel"""
  description: String

  """The name of the fuel"""
  name: String

  """The parent ID(s) (previous state) of the fuel"""
  parent: [Int]

  """
  The current state of the fuel within the lifecycle (created, split, merged, redefined, archived, unarchived)
  """
  state: String

  """
  The foreign key to the fuel_mapping table in swrs (used for carbon tax calculation)
  """
  swrsFuelMappingId: Int

  """The unit of measure for the fuel"""
  units: String

  """Updated date of row"""
  updatedAt: Datetime

  """Updator of row"""
  updatedBy: Int
}

"""A connection to a list of `Fuel` values."""
type FuelsConnection {
  """
  A list of edges which contains the `Fuel` and cursor to aid in pagination.
  """
  edges: [FuelsEdge!]!

  """A list of `Fuel` objects."""
  nodes: [Fuel]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Fuel` you could get from the connection."""
  totalCount: Int!
}

"""A `Fuel` edge in the connection."""
type FuelsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Fuel` at the end of the edge."""
  node: Fuel
}

"""Methods to use when ordering `Fuel`."""
enum FuelsOrderBy {
  CREATED_AT_ASC
  CREATED_AT_DESC
  CREATED_BY_ASC
  CREATED_BY_DESC
  DELETED_AT_ASC
  DELETED_AT_DESC
  DELETED_BY_ASC
  DELETED_BY_DESC
  DESCRIPTION_ASC
  DESCRIPTION_DESC
  ID_ASC
  ID_DESC
  NAME_ASC
  NAME_DESC
  NATURAL
  PARENT_ASC
  PARENT_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  STATE_ASC
  STATE_DESC
  SWRS_FUEL_MAPPING_ID_ASC
  SWRS_FUEL_MAPPING_ID_DESC
  UNITS_ASC
  UNITS_DESC
  UPDATED_AT_ASC
  UPDATED_AT_DESC
  UPDATED_BY_ASC
  UPDATED_BY_DESC
}

"""Table of gases used in the CIIP program"""
type Gas implements Node {
  """Reads a single `CiipUser` that is related to this `Gas`."""
  ciipUserByCreatedBy: CiipUser

  """Reads a single `CiipUser` that is related to this `Gas`."""
  ciipUserByDeletedBy: CiipUser

  """Reads a single `CiipUser` that is related to this `Gas`."""
  ciipUserByUpdatedBy: CiipUser

  """Reads and enables pagination through a set of `CiipUser`."""
  ciipUsersByEmissionCategoryGasGasIdAndCreatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CiipUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CiipUserFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CiipUser`."""
    orderBy: [CiipUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): GasCiipUsersByEmissionCategoryGasGasIdAndCreatedByManyToManyConnection!

  """Reads and enables pagination through a set of `CiipUser`."""
  ciipUsersByEmissionCategoryGasGasIdAndDeletedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CiipUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CiipUserFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CiipUser`."""
    orderBy: [CiipUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): GasCiipUsersByEmissionCategoryGasGasIdAndDeletedByManyToManyConnection!

  """Reads and enables pagination through a set of `CiipUser`."""
  ciipUsersByEmissionCategoryGasGasIdAndUpdatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CiipUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CiipUserFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CiipUser`."""
    orderBy: [CiipUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): GasCiipUsersByEmissionCategoryGasGasIdAndUpdatedByManyToManyConnection!

  """Creation date of row"""
  createdAt: Datetime!

  """Creator of row"""
  createdBy: Int

  """Date of deletion"""
  deletedAt: Datetime

  """The user who deleted the row"""
  deletedBy: Int

  """Reads and enables pagination through a set of `EmissionCategory`."""
  emissionCategoriesByEmissionCategoryGasGasIdAndEmissionCategoryId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: EmissionCategoryCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: EmissionCategoryFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `EmissionCategory`."""
    orderBy: [EmissionCategoriesOrderBy!] = [PRIMARY_KEY_ASC]
  ): GasEmissionCategoriesByEmissionCategoryGasGasIdAndEmissionCategoryIdManyToManyConnection!

  """Reads and enables pagination through a set of `EmissionCategoryGas`."""
  emissionCategoryGasesByGasId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: EmissionCategoryGasCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: EmissionCategoryGasFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `EmissionCategoryGas`."""
    orderBy: [EmissionCategoryGasesOrderBy!] = [PRIMARY_KEY_ASC]
  ): EmissionCategoryGasesConnection!

  """Describe the gas and its use"""
  gasDescription: String

  """The name of the gas"""
  gasType: String

  """Global warming potential of the gas"""
  gwp: BigFloat

  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  id: ID!

  """Unique ID for the gas"""
  rowId: Int!

  """Updated date of row"""
  updatedAt: Datetime!

  """Updator of row"""
  updatedBy: Int
}

"""
A connection to a list of `CiipUser` values, with data from `EmissionCategoryGas`.
"""
type GasCiipUsersByEmissionCategoryGasGasIdAndCreatedByManyToManyConnection {
  """
  A list of edges which contains the `CiipUser`, info from the `EmissionCategoryGas`, and the cursor to aid in pagination.
  """
  edges: [GasCiipUsersByEmissionCategoryGasGasIdAndCreatedByManyToManyEdge!]!

  """A list of `CiipUser` objects."""
  nodes: [CiipUser]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CiipUser` you could get from the connection."""
  totalCount: Int!
}

"""
A `CiipUser` edge in the connection, with data from `EmissionCategoryGas`.
"""
type GasCiipUsersByEmissionCategoryGasGasIdAndCreatedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """Reads and enables pagination through a set of `EmissionCategoryGas`."""
  emissionCategoryGasesByCreatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: EmissionCategoryGasCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: EmissionCategoryGasFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `EmissionCategoryGas`."""
    orderBy: [EmissionCategoryGasesOrderBy!] = [PRIMARY_KEY_ASC]
  ): EmissionCategoryGasesConnection!

  """The `CiipUser` at the end of the edge."""
  node: CiipUser
}

"""
A connection to a list of `CiipUser` values, with data from `EmissionCategoryGas`.
"""
type GasCiipUsersByEmissionCategoryGasGasIdAndDeletedByManyToManyConnection {
  """
  A list of edges which contains the `CiipUser`, info from the `EmissionCategoryGas`, and the cursor to aid in pagination.
  """
  edges: [GasCiipUsersByEmissionCategoryGasGasIdAndDeletedByManyToManyEdge!]!

  """A list of `CiipUser` objects."""
  nodes: [CiipUser]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CiipUser` you could get from the connection."""
  totalCount: Int!
}

"""
A `CiipUser` edge in the connection, with data from `EmissionCategoryGas`.
"""
type GasCiipUsersByEmissionCategoryGasGasIdAndDeletedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """Reads and enables pagination through a set of `EmissionCategoryGas`."""
  emissionCategoryGasesByDeletedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: EmissionCategoryGasCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: EmissionCategoryGasFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `EmissionCategoryGas`."""
    orderBy: [EmissionCategoryGasesOrderBy!] = [PRIMARY_KEY_ASC]
  ): EmissionCategoryGasesConnection!

  """The `CiipUser` at the end of the edge."""
  node: CiipUser
}

"""
A connection to a list of `CiipUser` values, with data from `EmissionCategoryGas`.
"""
type GasCiipUsersByEmissionCategoryGasGasIdAndUpdatedByManyToManyConnection {
  """
  A list of edges which contains the `CiipUser`, info from the `EmissionCategoryGas`, and the cursor to aid in pagination.
  """
  edges: [GasCiipUsersByEmissionCategoryGasGasIdAndUpdatedByManyToManyEdge!]!

  """A list of `CiipUser` objects."""
  nodes: [CiipUser]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CiipUser` you could get from the connection."""
  totalCount: Int!
}

"""
A `CiipUser` edge in the connection, with data from `EmissionCategoryGas`.
"""
type GasCiipUsersByEmissionCategoryGasGasIdAndUpdatedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """Reads and enables pagination through a set of `EmissionCategoryGas`."""
  emissionCategoryGasesByUpdatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: EmissionCategoryGasCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: EmissionCategoryGasFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `EmissionCategoryGas`."""
    orderBy: [EmissionCategoryGasesOrderBy!] = [PRIMARY_KEY_ASC]
  ): EmissionCategoryGasesConnection!

  """The `CiipUser` at the end of the edge."""
  node: CiipUser
}

"""
A condition to be used against `Gas` object types. All fields are tested for equality and combined with a logical ‘and.’
"""
input GasCondition {
  """Checks for equality with the object’s `createdAt` field."""
  createdAt: Datetime

  """Checks for equality with the object’s `createdBy` field."""
  createdBy: Int

  """Checks for equality with the object’s `deletedAt` field."""
  deletedAt: Datetime

  """Checks for equality with the object’s `deletedBy` field."""
  deletedBy: Int

  """Checks for equality with the object’s `gasDescription` field."""
  gasDescription: String

  """Checks for equality with the object’s `gasType` field."""
  gasType: String

  """Checks for equality with the object’s `gwp` field."""
  gwp: BigFloat

  """Checks for equality with the object’s `rowId` field."""
  rowId: Int

  """Checks for equality with the object’s `updatedAt` field."""
  updatedAt: Datetime

  """Checks for equality with the object’s `updatedBy` field."""
  updatedBy: Int
}

"""
A connection to a list of `EmissionCategory` values, with data from `EmissionCategoryGas`.
"""
type GasEmissionCategoriesByEmissionCategoryGasGasIdAndEmissionCategoryIdManyToManyConnection {
  """
  A list of edges which contains the `EmissionCategory`, info from the
  `EmissionCategoryGas`, and the cursor to aid in pagination.
  """
  edges: [GasEmissionCategoriesByEmissionCategoryGasGasIdAndEmissionCategoryIdManyToManyEdge!]!

  """A list of `EmissionCategory` objects."""
  nodes: [EmissionCategory]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `EmissionCategory` you could get from the connection.
  """
  totalCount: Int!
}

"""
A `EmissionCategory` edge in the connection, with data from `EmissionCategoryGas`.
"""
type GasEmissionCategoriesByEmissionCategoryGasGasIdAndEmissionCategoryIdManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """Reads and enables pagination through a set of `EmissionCategoryGas`."""
  emissionCategoryGasesByEmissionCategoryId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: EmissionCategoryGasCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: EmissionCategoryGasFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `EmissionCategoryGas`."""
    orderBy: [EmissionCategoryGasesOrderBy!] = [PRIMARY_KEY_ASC]
  ): EmissionCategoryGasesConnection!

  """The `EmissionCategory` at the end of the edge."""
  node: EmissionCategory
}

"""A connection to a list of `Gas` values."""
type GasesConnection {
  """
  A list of edges which contains the `Gas` and cursor to aid in pagination.
  """
  edges: [GasesEdge!]!

  """A list of `Gas` objects."""
  nodes: [Gas]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Gas` you could get from the connection."""
  totalCount: Int!
}

"""A `Gas` edge in the connection."""
type GasesEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Gas` at the end of the edge."""
  node: Gas
}

"""Methods to use when ordering `Gas`."""
enum GasesOrderBy {
  CREATED_AT_ASC
  CREATED_AT_DESC
  CREATED_BY_ASC
  CREATED_BY_DESC
  DELETED_AT_ASC
  DELETED_AT_DESC
  DELETED_BY_ASC
  DELETED_BY_DESC
  GAS_DESCRIPTION_ASC
  GAS_DESCRIPTION_DESC
  GAS_TYPE_ASC
  GAS_TYPE_DESC
  GWP_ASC
  GWP_DESC
  ID_ASC
  ID_DESC
  NATURAL
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  UPDATED_AT_ASC
  UPDATED_AT_DESC
  UPDATED_BY_ASC
  UPDATED_BY_DESC
}

"""
A filter to be used against `Gas` object types. All fields are combined with a logical ‘and.’
"""
input GasFilter {
  """Checks for all expressions in this list."""
  and: [GasFilter!]

  """Filter by the object’s `ciipUserByCreatedBy` relation."""
  ciipUserByCreatedBy: CiipUserFilter

  """A related `ciipUserByCreatedBy` exists."""
  ciipUserByCreatedByExists: Boolean

  """Filter by the object’s `ciipUserByDeletedBy` relation."""
  ciipUserByDeletedBy: CiipUserFilter

  """A related `ciipUserByDeletedBy` exists."""
  ciipUserByDeletedByExists: Boolean

  """Filter by the object’s `ciipUserByUpdatedBy` relation."""
  ciipUserByUpdatedBy: CiipUserFilter

  """A related `ciipUserByUpdatedBy` exists."""
  ciipUserByUpdatedByExists: Boolean

  """Filter by the object’s `createdAt` field."""
  createdAt: DatetimeFilter

  """Filter by the object’s `createdBy` field."""
  createdBy: IntFilter

  """Filter by the object’s `deletedAt` field."""
  deletedAt: DatetimeFilter

  """Filter by the object’s `deletedBy` field."""
  deletedBy: IntFilter

  """Filter by the object’s `emissionCategoryGasesByGasId` relation."""
  emissionCategoryGasesByGasId: GasToManyEmissionCategoryGasFilter

  """Some related `emissionCategoryGasesByGasId` exist."""
  emissionCategoryGasesByGasIdExist: Boolean

  """Filter by the object’s `gasDescription` field."""
  gasDescription: StringFilter

  """Filter by the object’s `gasType` field."""
  gasType: StringFilter

  """Filter by the object’s `gwp` field."""
  gwp: BigFloatFilter

  """Negates the expression."""
  not: GasFilter

  """Checks for any expressions in this list."""
  or: [GasFilter!]

  """Filter by the object’s `rowId` field."""
  rowId: IntFilter

  """Filter by the object’s `updatedAt` field."""
  updatedAt: DatetimeFilter

  """Filter by the object’s `updatedBy` field."""
  updatedBy: IntFilter
}

"""An input for mutations affecting `Gas`"""
input GasInput {
  """Creation date of row"""
  createdAt: Datetime

  """Creator of row"""
  createdBy: Int

  """Date of deletion"""
  deletedAt: Datetime

  """The user who deleted the row"""
  deletedBy: Int

  """Describe the gas and its use"""
  gasDescription: String

  """The name of the gas"""
  gasType: String

  """Global warming potential of the gas"""
  gwp: BigFloat

  """Updated date of row"""
  updatedAt: Datetime

  """Updator of row"""
  updatedBy: Int
}

"""Represents an update to a `Gas`. Fields that are set will be updated."""
input GasPatch {
  """Creation date of row"""
  createdAt: Datetime

  """Creator of row"""
  createdBy: Int

  """Date of deletion"""
  deletedAt: Datetime

  """The user who deleted the row"""
  deletedBy: Int

  """Describe the gas and its use"""
  gasDescription: String

  """The name of the gas"""
  gasType: String

  """Global warming potential of the gas"""
  gwp: BigFloat

  """Updated date of row"""
  updatedAt: Datetime

  """Updator of row"""
  updatedBy: Int
}

"""
A filter to be used against many `EmissionCategoryGas` object types. All fields are combined with a logical ‘and.’
"""
input GasToManyEmissionCategoryGasFilter {
  """
  Every related `EmissionCategoryGas` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: EmissionCategoryGasFilter

  """
  No related `EmissionCategoryGas` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: EmissionCategoryGasFilter

  """
  Some related `EmissionCategoryGas` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: EmissionCategoryGasFilter
}

"""All input for the `importSwrsOrganisationFacility` mutation."""
input ImportSwrsOrganisationFacilityInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
}

"""The output of our `importSwrsOrganisationFacility` mutation."""
type ImportSwrsOrganisationFacilityPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `initApplicationAdministrationFormResult` mutation."""
input InitApplicationAdministrationFormResultInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  facilityId: Int!
  reportingYear: Int!
}

"""The output of our `initApplicationAdministrationFormResult` mutation."""
type InitApplicationAdministrationFormResultPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  json: JSON

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `initApplicationEmissionFormResult` mutation."""
input InitApplicationEmissionFormResultInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  facilityId: Int!
  reportingYear: Int!
}

"""The output of our `initApplicationEmissionFormResult` mutation."""
type InitApplicationEmissionFormResultPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  json: JSON

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `initApplicationFuelFormResult` mutation."""
input InitApplicationFuelFormResultInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  facilityId: Int!
  reportingYear: Int!
}

"""The output of our `initApplicationFuelFormResult` mutation."""
type InitApplicationFuelFormResultPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  json: JSON

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""
A filter to be used against Int fields. All fields are combined with a logical ‘and.’
"""
input IntFilter {
  """
  Not equal to the specified value, treating null like an ordinary value.
  """
  distinctFrom: Int

  """Equal to the specified value."""
  equalTo: Int

  """Greater than the specified value."""
  greaterThan: Int

  """Greater than or equal to the specified value."""
  greaterThanOrEqualTo: Int

  """Included in the specified list."""
  in: [Int!]

  """
  Is null (if `true` is specified) or is not null (if `false` is specified).
  """
  isNull: Boolean

  """Less than the specified value."""
  lessThan: Int

  """Less than or equal to the specified value."""
  lessThanOrEqualTo: Int

  """Equal to the specified value, treating null like an ordinary value."""
  notDistinctFrom: Int

  """Not equal to the specified value."""
  notEqualTo: Int

  """Not included in the specified list."""
  notIn: [Int!]
}

"""
A filter to be used against Int List fields. All fields are combined with a logical ‘and.’
"""
input IntListFilter {
  """Any array item is equal to the specified value."""
  anyEqualTo: Int

  """Any array item is greater than the specified value."""
  anyGreaterThan: Int

  """Any array item is greater than or equal to the specified value."""
  anyGreaterThanOrEqualTo: Int

  """Any array item is less than the specified value."""
  anyLessThan: Int

  """Any array item is less than or equal to the specified value."""
  anyLessThanOrEqualTo: Int

  """Any array item is not equal to the specified value."""
  anyNotEqualTo: Int

  """Contained by the specified list of values."""
  containedBy: [Int]

  """Contains the specified list of values."""
  contains: [Int]

  """
  Not equal to the specified value, treating null like an ordinary value.
  """
  distinctFrom: [Int]

  """Equal to the specified value."""
  equalTo: [Int]

  """Greater than the specified value."""
  greaterThan: [Int]

  """Greater than or equal to the specified value."""
  greaterThanOrEqualTo: [Int]

  """
  Is null (if `true` is specified) or is not null (if `false` is specified).
  """
  isNull: Boolean

  """Less than the specified value."""
  lessThan: [Int]

  """Less than or equal to the specified value."""
  lessThanOrEqualTo: [Int]

  """Equal to the specified value, treating null like an ordinary value."""
  notDistinctFrom: [Int]

  """Not equal to the specified value."""
  notEqualTo: [Int]

  """Overlaps the specified list of values."""
  overlaps: [Int]
}

"""
A JavaScript object encoded in the JSON format as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON

"""
A filter to be used against JSON fields. All fields are combined with a logical ‘and.’
"""
input JSONFilter {
  """Contained by the specified JSON."""
  containedBy: JSON

  """Contains the specified JSON."""
  contains: JSON

  """Contains all of the specified keys."""
  containsAllKeys: [String!]

  """Contains any of the specified keys."""
  containsAnyKeys: [String!]

  """Contains the specified key."""
  containsKey: String

  """
  Not equal to the specified value, treating null like an ordinary value.
  """
  distinctFrom: JSON

  """Equal to the specified value."""
  equalTo: JSON

  """Greater than the specified value."""
  greaterThan: JSON

  """Greater than or equal to the specified value."""
  greaterThanOrEqualTo: JSON

  """Included in the specified list."""
  in: [JSON!]

  """
  Is null (if `true` is specified) or is not null (if `false` is specified).
  """
  isNull: Boolean

  """Less than the specified value."""
  lessThan: JSON

  """Less than or equal to the specified value."""
  lessThanOrEqualTo: JSON

  """Equal to the specified value, treating null like an ordinary value."""
  notDistinctFrom: JSON

  """Not equal to the specified value."""
  notEqualTo: JSON

  """Not included in the specified list."""
  notIn: [JSON!]
}

type JwtToken {
  acr: String
  aud: String
  authTime: Int
  azp: String
  brokerSessionId: String

  """Reads a single `CiipUser` that is related to this `JwtToken`."""
  ciipUserBySub: CiipUser
  email: String
  emailVerified: Boolean
  exp: Int
  familyName: String
  givenName: String
  iat: Int
  iss: String
  jti: UUID
  name: String
  nbf: Int
  preferredUsername: String
  priorityGroup: String
  sessionState: UUID
  sub: UUID
  typ: String
  userGroups: [String]
}

"""
A filter to be used against `JwtToken` object types. All fields are combined with a logical ‘and.’
"""
input JwtTokenFilter {
  """Filter by the object’s `acr` field."""
  acr: StringFilter

  """Checks for all expressions in this list."""
  and: [JwtTokenFilter!]

  """Filter by the object’s `aud` field."""
  aud: StringFilter

  """Filter by the object’s `authTime` field."""
  authTime: IntFilter

  """Filter by the object’s `azp` field."""
  azp: StringFilter

  """Filter by the object’s `brokerSessionId` field."""
  brokerSessionId: StringFilter

  """Filter by the object’s `ciipUserBySub` relation."""
  ciipUserBySub: CiipUserFilter

  """A related `ciipUserBySub` exists."""
  ciipUserBySubExists: Boolean

  """Filter by the object’s `email` field."""
  email: StringFilter

  """Filter by the object’s `emailVerified` field."""
  emailVerified: BooleanFilter

  """Filter by the object’s `exp` field."""
  exp: IntFilter

  """Filter by the object’s `familyName` field."""
  familyName: StringFilter

  """Filter by the object’s `givenName` field."""
  givenName: StringFilter

  """Filter by the object’s `iat` field."""
  iat: IntFilter

  """Filter by the object’s `iss` field."""
  iss: StringFilter

  """Filter by the object’s `jti` field."""
  jti: UUIDFilter

  """Filter by the object’s `name` field."""
  name: StringFilter

  """Filter by the object’s `nbf` field."""
  nbf: IntFilter

  """Negates the expression."""
  not: JwtTokenFilter

  """Checks for any expressions in this list."""
  or: [JwtTokenFilter!]

  """Filter by the object’s `preferredUsername` field."""
  preferredUsername: StringFilter

  """Filter by the object’s `priorityGroup` field."""
  priorityGroup: StringFilter

  """Filter by the object’s `sessionState` field."""
  sessionState: UUIDFilter

  """Filter by the object’s `sub` field."""
  sub: UUIDFilter

  """Filter by the object’s `typ` field."""
  typ: StringFilter

  """Filter by the object’s `userGroups` field."""
  userGroups: StringListFilter
}

"""
Table containing the information for the links between CIIP products. A link
from product_id -> linked_product_id requires linked_product_id to be reported
if product_id is reported
"""
type LinkedProduct implements Node {
  """Reads a single `CiipUser` that is related to this `LinkedProduct`."""
  ciipUserByCreatedBy: CiipUser

  """Reads a single `CiipUser` that is related to this `LinkedProduct`."""
  ciipUserByDeletedBy: CiipUser

  """Reads a single `CiipUser` that is related to this `LinkedProduct`."""
  ciipUserByUpdatedBy: CiipUser

  """Creation date of row"""
  createdAt: Datetime!

  """Creator of row"""
  createdBy: Int

  """Date of deletion"""
  deletedAt: Datetime

  """The user who deleted the row"""
  deletedBy: Int

  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  id: ID!

  """Boolean value indicates if the link has been terminated"""
  isDeleted: Boolean!

  """
  The id of the product the linked required by product_id to also be reported
  """
  linkedProductId: Int!

  """Reads a single `Product` that is related to this `LinkedProduct`."""
  productByLinkedProductId: Product

  """Reads a single `Product` that is related to this `LinkedProduct`."""
  productByProductId: Product

  """The id of the product the link is created on"""
  productId: Int!

  """Unique ID for the product link"""
  rowId: Int!

  """Updated date of row"""
  updatedAt: Datetime!

  """Updator of row"""
  updatedBy: Int
}

"""
A condition to be used against `LinkedProduct` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input LinkedProductCondition {
  """Checks for equality with the object’s `createdAt` field."""
  createdAt: Datetime

  """Checks for equality with the object’s `createdBy` field."""
  createdBy: Int

  """Checks for equality with the object’s `deletedAt` field."""
  deletedAt: Datetime

  """Checks for equality with the object’s `deletedBy` field."""
  deletedBy: Int

  """Checks for equality with the object’s `isDeleted` field."""
  isDeleted: Boolean

  """Checks for equality with the object’s `linkedProductId` field."""
  linkedProductId: Int

  """Checks for equality with the object’s `productId` field."""
  productId: Int

  """Checks for equality with the object’s `rowId` field."""
  rowId: Int

  """Checks for equality with the object’s `updatedAt` field."""
  updatedAt: Datetime

  """Checks for equality with the object’s `updatedBy` field."""
  updatedBy: Int
}

"""
A filter to be used against `LinkedProduct` object types. All fields are combined with a logical ‘and.’
"""
input LinkedProductFilter {
  """Checks for all expressions in this list."""
  and: [LinkedProductFilter!]

  """Filter by the object’s `ciipUserByCreatedBy` relation."""
  ciipUserByCreatedBy: CiipUserFilter

  """A related `ciipUserByCreatedBy` exists."""
  ciipUserByCreatedByExists: Boolean

  """Filter by the object’s `ciipUserByDeletedBy` relation."""
  ciipUserByDeletedBy: CiipUserFilter

  """A related `ciipUserByDeletedBy` exists."""
  ciipUserByDeletedByExists: Boolean

  """Filter by the object’s `ciipUserByUpdatedBy` relation."""
  ciipUserByUpdatedBy: CiipUserFilter

  """A related `ciipUserByUpdatedBy` exists."""
  ciipUserByUpdatedByExists: Boolean

  """Filter by the object’s `createdAt` field."""
  createdAt: DatetimeFilter

  """Filter by the object’s `createdBy` field."""
  createdBy: IntFilter

  """Filter by the object’s `deletedAt` field."""
  deletedAt: DatetimeFilter

  """Filter by the object’s `deletedBy` field."""
  deletedBy: IntFilter

  """Filter by the object’s `isDeleted` field."""
  isDeleted: BooleanFilter

  """Filter by the object’s `linkedProductId` field."""
  linkedProductId: IntFilter

  """Negates the expression."""
  not: LinkedProductFilter

  """Checks for any expressions in this list."""
  or: [LinkedProductFilter!]

  """Filter by the object’s `productByLinkedProductId` relation."""
  productByLinkedProductId: ProductFilter

  """Filter by the object’s `productByProductId` relation."""
  productByProductId: ProductFilter

  """Filter by the object’s `productId` field."""
  productId: IntFilter

  """Filter by the object’s `rowId` field."""
  rowId: IntFilter

  """Filter by the object’s `updatedAt` field."""
  updatedAt: DatetimeFilter

  """Filter by the object’s `updatedBy` field."""
  updatedBy: IntFilter
}

"""An input for mutations affecting `LinkedProduct`"""
input LinkedProductInput {
  """Creation date of row"""
  createdAt: Datetime

  """Creator of row"""
  createdBy: Int

  """Date of deletion"""
  deletedAt: Datetime

  """The user who deleted the row"""
  deletedBy: Int

  """Boolean value indicates if the link has been terminated"""
  isDeleted: Boolean

  """
  The id of the product the linked required by product_id to also be reported
  """
  linkedProductId: Int!

  """The id of the product the link is created on"""
  productId: Int!

  """Updated date of row"""
  updatedAt: Datetime

  """Updator of row"""
  updatedBy: Int
}

"""
Represents an update to a `LinkedProduct`. Fields that are set will be updated.
"""
input LinkedProductPatch {
  """Creation date of row"""
  createdAt: Datetime

  """Creator of row"""
  createdBy: Int

  """Date of deletion"""
  deletedAt: Datetime

  """The user who deleted the row"""
  deletedBy: Int

  """Boolean value indicates if the link has been terminated"""
  isDeleted: Boolean

  """
  The id of the product the linked required by product_id to also be reported
  """
  linkedProductId: Int

  """The id of the product the link is created on"""
  productId: Int

  """Updated date of row"""
  updatedAt: Datetime

  """Updator of row"""
  updatedBy: Int
}

type LinkedProductReturn {
  linkedProductId: Int
  productName: String
  productState: CiipProductState
  rowId: Int
}

"""
A filter to be used against `LinkedProductReturn` object types. All fields are combined with a logical ‘and.’
"""
input LinkedProductReturnFilter {
  """Checks for all expressions in this list."""
  and: [LinkedProductReturnFilter!]

  """Filter by the object’s `linkedProductId` field."""
  linkedProductId: IntFilter

  """Negates the expression."""
  not: LinkedProductReturnFilter

  """Checks for any expressions in this list."""
  or: [LinkedProductReturnFilter!]

  """Filter by the object’s `productName` field."""
  productName: StringFilter

  """Filter by the object’s `productState` field."""
  productState: CiipProductStateFilter

  """Filter by the object’s `rowId` field."""
  rowId: IntFilter
}

"""A connection to a list of `LinkedProductReturn` values."""
type LinkedProductReturnsConnection {
  """
  A list of edges which contains the `LinkedProductReturn` and cursor to aid in pagination.
  """
  edges: [LinkedProductReturnsEdge!]!

  """A list of `LinkedProductReturn` objects."""
  nodes: [LinkedProductReturn]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `LinkedProductReturn` you could get from the connection.
  """
  totalCount: Int!
}

"""A `LinkedProductReturn` edge in the connection."""
type LinkedProductReturnsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `LinkedProductReturn` at the end of the edge."""
  node: LinkedProductReturn
}

"""A connection to a list of `LinkedProduct` values."""
type LinkedProductsConnection {
  """
  A list of edges which contains the `LinkedProduct` and cursor to aid in pagination.
  """
  edges: [LinkedProductsEdge!]!

  """A list of `LinkedProduct` objects."""
  nodes: [LinkedProduct]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `LinkedProduct` you could get from the connection."""
  totalCount: Int!
}

"""A `LinkedProduct` edge in the connection."""
type LinkedProductsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `LinkedProduct` at the end of the edge."""
  node: LinkedProduct
}

"""Methods to use when ordering `LinkedProduct`."""
enum LinkedProductsOrderBy {
  CREATED_AT_ASC
  CREATED_AT_DESC
  CREATED_BY_ASC
  CREATED_BY_DESC
  DELETED_AT_ASC
  DELETED_AT_DESC
  DELETED_BY_ASC
  DELETED_BY_DESC
  ID_ASC
  ID_DESC
  IS_DELETED_ASC
  IS_DELETED_DESC
  LINKED_PRODUCT_ID_ASC
  LINKED_PRODUCT_ID_DESC
  NATURAL
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  PRODUCT_ID_ASC
  PRODUCT_ID_DESC
  UPDATED_AT_ASC
  UPDATED_AT_DESC
  UPDATED_BY_ASC
  UPDATED_BY_DESC
}

"""
The root mutation type which contains root level fields which mutate data.
"""
type Mutation {
  """Creates a single `Application`."""
  createApplication(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateApplicationInput!
  ): CreateApplicationPayload
  createApplicationMutationChain(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateApplicationMutationChainInput!
  ): CreateApplicationMutationChainPayload

  """Creates a single `ApplicationRevision`."""
  createApplicationRevision(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateApplicationRevisionInput!
  ): CreateApplicationRevisionPayload
  createApplicationRevisionMutationChain(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateApplicationRevisionMutationChainInput!
  ): CreateApplicationRevisionMutationChainPayload

  """Creates a single `ApplicationRevisionStatus`."""
  createApplicationRevisionStatus(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateApplicationRevisionStatusInput!
  ): CreateApplicationRevisionStatusPayload

  """Creates a single `Benchmark`."""
  createBenchmark(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateBenchmarkInput!
  ): CreateBenchmarkPayload

  """Creates a single `CertificationUrl`."""
  createCertificationUrl(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateCertificationUrlInput!
  ): CreateCertificationUrlPayload

  """Creates a single `CiipApplicationWizard`."""
  createCiipApplicationWizard(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateCiipApplicationWizardInput!
  ): CreateCiipApplicationWizardPayload

  """Creates a single `CiipUser`."""
  createCiipUser(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateCiipUserInput!
  ): CreateCiipUserPayload

  """Creates a single `CiipUserOrganisation`."""
  createCiipUserOrganisation(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateCiipUserOrganisationInput!
  ): CreateCiipUserOrganisationPayload

  """Creates a single `EmissionCategory`."""
  createEmissionCategory(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateEmissionCategoryInput!
  ): CreateEmissionCategoryPayload

  """Creates a single `EmissionCategoryGas`."""
  createEmissionCategoryGas(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateEmissionCategoryGasInput!
  ): CreateEmissionCategoryGasPayload

  """Creates a single `Facility`."""
  createFacility(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateFacilityInput!
  ): CreateFacilityPayload

  """Creates a single `FormJson`."""
  createFormJson(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateFormJsonInput!
  ): CreateFormJsonPayload

  """Creates a single `FormResult`."""
  createFormResult(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateFormResultInput!
  ): CreateFormResultPayload

  """Creates a single `FormResultStatus`."""
  createFormResultStatus(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateFormResultStatusInput!
  ): CreateFormResultStatusPayload

  """Creates a single `Fuel`."""
  createFuel(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateFuelInput!
  ): CreateFuelPayload

  """Creates a single `Gas`."""
  createGas(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateGasInput!
  ): CreateGasPayload

  """Creates a single `LinkedProduct`."""
  createLinkedProduct(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateLinkedProductInput!
  ): CreateLinkedProductPayload

  """Creates a single `Organisation`."""
  createOrganisation(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateOrganisationInput!
  ): CreateOrganisationPayload

  """Creates a single `Product`."""
  createProduct(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateProductInput!
  ): CreateProductPayload

  """Creates a single `ReportingYear`."""
  createReportingYear(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateReportingYearInput!
  ): CreateReportingYearPayload

  """Creates a single `ReviewComment`."""
  createReviewComment(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateReviewCommentInput!
  ): CreateReviewCommentPayload
  createReviewCommentMutationChain(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateReviewCommentMutationChainInput!
  ): CreateReviewCommentMutationChainPayload

  """Deletes a single `Application` using its globally unique id."""
  deleteApplication(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteApplicationInput!
  ): DeleteApplicationPayload

  """Deletes a single `Application` using a unique key."""
  deleteApplicationByRowId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteApplicationByRowIdInput!
  ): DeleteApplicationPayload

  """Deletes a single `ApplicationRevision` using its globally unique id."""
  deleteApplicationRevision(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteApplicationRevisionInput!
  ): DeleteApplicationRevisionPayload

  """Deletes a single `ApplicationRevision` using a unique key."""
  deleteApplicationRevisionByApplicationIdAndVersionNumber(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteApplicationRevisionByApplicationIdAndVersionNumberInput!
  ): DeleteApplicationRevisionPayload

  """
  Deletes a single `ApplicationRevisionStatus` using its globally unique id.
  """
  deleteApplicationRevisionStatus(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteApplicationRevisionStatusInput!
  ): DeleteApplicationRevisionStatusPayload

  """Deletes a single `ApplicationRevisionStatus` using a unique key."""
  deleteApplicationRevisionStatusByRowId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteApplicationRevisionStatusByRowIdInput!
  ): DeleteApplicationRevisionStatusPayload

  """Deletes a single `Benchmark` using its globally unique id."""
  deleteBenchmark(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteBenchmarkInput!
  ): DeleteBenchmarkPayload

  """Deletes a single `Benchmark` using a unique key."""
  deleteBenchmarkByRowId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteBenchmarkByRowIdInput!
  ): DeleteBenchmarkPayload

  """Deletes a single `CertificationUrl` using its globally unique id."""
  deleteCertificationUrl(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteCertificationUrlInput!
  ): DeleteCertificationUrlPayload

  """Deletes a single `CertificationUrl` using a unique key."""
  deleteCertificationUrlByRowId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteCertificationUrlByRowIdInput!
  ): DeleteCertificationUrlPayload

  """Deletes a single `CiipApplicationWizard` using its globally unique id."""
  deleteCiipApplicationWizard(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteCiipApplicationWizardInput!
  ): DeleteCiipApplicationWizardPayload

  """Deletes a single `CiipApplicationWizard` using a unique key."""
  deleteCiipApplicationWizardByFormId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteCiipApplicationWizardByFormIdInput!
  ): DeleteCiipApplicationWizardPayload

  """Deletes a single `CiipUser` using its globally unique id."""
  deleteCiipUser(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteCiipUserInput!
  ): DeleteCiipUserPayload

  """Deletes a single `CiipUser` using a unique key."""
  deleteCiipUserByRowId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteCiipUserByRowIdInput!
  ): DeleteCiipUserPayload

  """Deletes a single `CiipUserOrganisation` using its globally unique id."""
  deleteCiipUserOrganisation(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteCiipUserOrganisationInput!
  ): DeleteCiipUserOrganisationPayload

  """Deletes a single `CiipUserOrganisation` using a unique key."""
  deleteCiipUserOrganisationByRowId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteCiipUserOrganisationByRowIdInput!
  ): DeleteCiipUserOrganisationPayload

  """Deletes a single `EmissionCategory` using its globally unique id."""
  deleteEmissionCategory(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteEmissionCategoryInput!
  ): DeleteEmissionCategoryPayload

  """Deletes a single `EmissionCategory` using a unique key."""
  deleteEmissionCategoryByRowId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteEmissionCategoryByRowIdInput!
  ): DeleteEmissionCategoryPayload

  """Deletes a single `EmissionCategoryGas` using its globally unique id."""
  deleteEmissionCategoryGas(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteEmissionCategoryGasInput!
  ): DeleteEmissionCategoryGasPayload

  """Deletes a single `EmissionCategoryGas` using a unique key."""
  deleteEmissionCategoryGasByRowId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteEmissionCategoryGasByRowIdInput!
  ): DeleteEmissionCategoryGasPayload

  """Deletes a single `Facility` using its globally unique id."""
  deleteFacility(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteFacilityInput!
  ): DeleteFacilityPayload

  """Deletes a single `Facility` using a unique key."""
  deleteFacilityByRowId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteFacilityByRowIdInput!
  ): DeleteFacilityPayload

  """Deletes a single `FormJson` using its globally unique id."""
  deleteFormJson(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteFormJsonInput!
  ): DeleteFormJsonPayload

  """Deletes a single `FormJson` using a unique key."""
  deleteFormJsonByRowId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteFormJsonByRowIdInput!
  ): DeleteFormJsonPayload

  """Deletes a single `FormResult` using its globally unique id."""
  deleteFormResult(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteFormResultInput!
  ): DeleteFormResultPayload

  """Deletes a single `FormResult` using a unique key."""
  deleteFormResultByFormIdAndApplicationIdAndVersionNumber(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteFormResultByFormIdAndApplicationIdAndVersionNumberInput!
  ): DeleteFormResultPayload

  """Deletes a single `FormResult` using a unique key."""
  deleteFormResultByRowId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteFormResultByRowIdInput!
  ): DeleteFormResultPayload

  """Deletes a single `FormResultStatus` using its globally unique id."""
  deleteFormResultStatus(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteFormResultStatusInput!
  ): DeleteFormResultStatusPayload

  """Deletes a single `FormResultStatus` using a unique key."""
  deleteFormResultStatusByRowId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteFormResultStatusByRowIdInput!
  ): DeleteFormResultStatusPayload

  """Deletes a single `Fuel` using its globally unique id."""
  deleteFuel(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteFuelInput!
  ): DeleteFuelPayload

  """Deletes a single `Fuel` using a unique key."""
  deleteFuelByRowId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteFuelByRowIdInput!
  ): DeleteFuelPayload

  """Deletes a single `Gas` using its globally unique id."""
  deleteGas(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteGasInput!
  ): DeleteGasPayload

  """Deletes a single `Gas` using a unique key."""
  deleteGasByRowId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteGasByRowIdInput!
  ): DeleteGasPayload

  """Deletes a single `LinkedProduct` using its globally unique id."""
  deleteLinkedProduct(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteLinkedProductInput!
  ): DeleteLinkedProductPayload

  """Deletes a single `LinkedProduct` using a unique key."""
  deleteLinkedProductByRowId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteLinkedProductByRowIdInput!
  ): DeleteLinkedProductPayload

  """Deletes a single `Organisation` using its globally unique id."""
  deleteOrganisation(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteOrganisationInput!
  ): DeleteOrganisationPayload

  """Deletes a single `Organisation` using a unique key."""
  deleteOrganisationByRowId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteOrganisationByRowIdInput!
  ): DeleteOrganisationPayload

  """Deletes a single `Product` using its globally unique id."""
  deleteProduct(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteProductInput!
  ): DeleteProductPayload

  """Deletes a single `Product` using a unique key."""
  deleteProductByRowId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteProductByRowIdInput!
  ): DeleteProductPayload

  """Deletes a single `ReportingYear` using its globally unique id."""
  deleteReportingYear(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteReportingYearInput!
  ): DeleteReportingYearPayload

  """Deletes a single `ReportingYear` using a unique key."""
  deleteReportingYearByReportingYear(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteReportingYearByReportingYearInput!
  ): DeleteReportingYearPayload

  """Deletes a single `ReviewComment` using its globally unique id."""
  deleteReviewComment(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteReviewCommentInput!
  ): DeleteReviewCommentPayload

  """Deletes a single `ReviewComment` using a unique key."""
  deleteReviewCommentByRowId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteReviewCommentByRowIdInput!
  ): DeleteReviewCommentPayload
  importSwrsOrganisationFacility(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: ImportSwrsOrganisationFacilityInput!
  ): ImportSwrsOrganisationFacilityPayload
  initApplicationAdministrationFormResult(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: InitApplicationAdministrationFormResultInput!
  ): InitApplicationAdministrationFormResultPayload
  initApplicationEmissionFormResult(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: InitApplicationEmissionFormResultInput!
  ): InitApplicationEmissionFormResultPayload
  initApplicationFuelFormResult(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: InitApplicationFuelFormResultInput!
  ): InitApplicationFuelFormResultPayload

  """
  Updates a single `Application` using its globally unique id and a patch.
  """
  updateApplication(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateApplicationInput!
  ): UpdateApplicationPayload

  """Updates a single `Application` using a unique key and a patch."""
  updateApplicationByRowId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateApplicationByRowIdInput!
  ): UpdateApplicationPayload

  """
  Updates a single `ApplicationRevision` using its globally unique id and a patch.
  """
  updateApplicationRevision(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateApplicationRevisionInput!
  ): UpdateApplicationRevisionPayload

  """Updates a single `ApplicationRevision` using a unique key and a patch."""
  updateApplicationRevisionByApplicationIdAndVersionNumber(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateApplicationRevisionByApplicationIdAndVersionNumberInput!
  ): UpdateApplicationRevisionPayload

  """
  Updates a single `ApplicationRevisionStatus` using its globally unique id and a patch.
  """
  updateApplicationRevisionStatus(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateApplicationRevisionStatusInput!
  ): UpdateApplicationRevisionStatusPayload

  """
  Updates a single `ApplicationRevisionStatus` using a unique key and a patch.
  """
  updateApplicationRevisionStatusByRowId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateApplicationRevisionStatusByRowIdInput!
  ): UpdateApplicationRevisionStatusPayload

  """Updates a single `Benchmark` using its globally unique id and a patch."""
  updateBenchmark(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateBenchmarkInput!
  ): UpdateBenchmarkPayload

  """Updates a single `Benchmark` using a unique key and a patch."""
  updateBenchmarkByRowId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateBenchmarkByRowIdInput!
  ): UpdateBenchmarkPayload

  """
  Updates a single `CertificationUrl` using its globally unique id and a patch.
  """
  updateCertificationUrl(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateCertificationUrlInput!
  ): UpdateCertificationUrlPayload

  """Updates a single `CertificationUrl` using a unique key and a patch."""
  updateCertificationUrlByRowId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateCertificationUrlByRowIdInput!
  ): UpdateCertificationUrlPayload

  """
  Updates a single `CiipApplicationWizard` using its globally unique id and a patch.
  """
  updateCiipApplicationWizard(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateCiipApplicationWizardInput!
  ): UpdateCiipApplicationWizardPayload

  """
  Updates a single `CiipApplicationWizard` using a unique key and a patch.
  """
  updateCiipApplicationWizardByFormId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateCiipApplicationWizardByFormIdInput!
  ): UpdateCiipApplicationWizardPayload

  """Updates a single `CiipUser` using its globally unique id and a patch."""
  updateCiipUser(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateCiipUserInput!
  ): UpdateCiipUserPayload

  """Updates a single `CiipUser` using a unique key and a patch."""
  updateCiipUserByRowId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateCiipUserByRowIdInput!
  ): UpdateCiipUserPayload

  """
  Updates a single `CiipUserOrganisation` using its globally unique id and a patch.
  """
  updateCiipUserOrganisation(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateCiipUserOrganisationInput!
  ): UpdateCiipUserOrganisationPayload

  """
  Updates a single `CiipUserOrganisation` using a unique key and a patch.
  """
  updateCiipUserOrganisationByRowId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateCiipUserOrganisationByRowIdInput!
  ): UpdateCiipUserOrganisationPayload

  """
  Updates a single `EmissionCategory` using its globally unique id and a patch.
  """
  updateEmissionCategory(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateEmissionCategoryInput!
  ): UpdateEmissionCategoryPayload

  """Updates a single `EmissionCategory` using a unique key and a patch."""
  updateEmissionCategoryByRowId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateEmissionCategoryByRowIdInput!
  ): UpdateEmissionCategoryPayload

  """
  Updates a single `EmissionCategoryGas` using its globally unique id and a patch.
  """
  updateEmissionCategoryGas(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateEmissionCategoryGasInput!
  ): UpdateEmissionCategoryGasPayload

  """Updates a single `EmissionCategoryGas` using a unique key and a patch."""
  updateEmissionCategoryGasByRowId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateEmissionCategoryGasByRowIdInput!
  ): UpdateEmissionCategoryGasPayload

  """Updates a single `Facility` using its globally unique id and a patch."""
  updateFacility(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateFacilityInput!
  ): UpdateFacilityPayload

  """Updates a single `Facility` using a unique key and a patch."""
  updateFacilityByRowId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateFacilityByRowIdInput!
  ): UpdateFacilityPayload

  """Updates a single `FormJson` using its globally unique id and a patch."""
  updateFormJson(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateFormJsonInput!
  ): UpdateFormJsonPayload

  """Updates a single `FormJson` using a unique key and a patch."""
  updateFormJsonByRowId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateFormJsonByRowIdInput!
  ): UpdateFormJsonPayload

  """
  Updates a single `FormResult` using its globally unique id and a patch.
  """
  updateFormResult(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateFormResultInput!
  ): UpdateFormResultPayload

  """Updates a single `FormResult` using a unique key and a patch."""
  updateFormResultByFormIdAndApplicationIdAndVersionNumber(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateFormResultByFormIdAndApplicationIdAndVersionNumberInput!
  ): UpdateFormResultPayload

  """Updates a single `FormResult` using a unique key and a patch."""
  updateFormResultByRowId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateFormResultByRowIdInput!
  ): UpdateFormResultPayload

  """
  Updates a single `FormResultStatus` using its globally unique id and a patch.
  """
  updateFormResultStatus(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateFormResultStatusInput!
  ): UpdateFormResultStatusPayload

  """Updates a single `FormResultStatus` using a unique key and a patch."""
  updateFormResultStatusByRowId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateFormResultStatusByRowIdInput!
  ): UpdateFormResultStatusPayload

  """Updates a single `Fuel` using its globally unique id and a patch."""
  updateFuel(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateFuelInput!
  ): UpdateFuelPayload

  """Updates a single `Fuel` using a unique key and a patch."""
  updateFuelByRowId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateFuelByRowIdInput!
  ): UpdateFuelPayload

  """Updates a single `Gas` using its globally unique id and a patch."""
  updateGas(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateGasInput!
  ): UpdateGasPayload

  """Updates a single `Gas` using a unique key and a patch."""
  updateGasByRowId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateGasByRowIdInput!
  ): UpdateGasPayload

  """
  Updates a single `LinkedProduct` using its globally unique id and a patch.
  """
  updateLinkedProduct(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateLinkedProductInput!
  ): UpdateLinkedProductPayload

  """Updates a single `LinkedProduct` using a unique key and a patch."""
  updateLinkedProductByRowId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateLinkedProductByRowIdInput!
  ): UpdateLinkedProductPayload

  """
  Updates a single `Organisation` using its globally unique id and a patch.
  """
  updateOrganisation(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateOrganisationInput!
  ): UpdateOrganisationPayload

  """Updates a single `Organisation` using a unique key and a patch."""
  updateOrganisationByRowId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateOrganisationByRowIdInput!
  ): UpdateOrganisationPayload

  """Updates a single `Product` using its globally unique id and a patch."""
  updateProduct(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateProductInput!
  ): UpdateProductPayload

  """Updates a single `Product` using a unique key and a patch."""
  updateProductByRowId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateProductByRowIdInput!
  ): UpdateProductPayload

  """
  Updates a single `ReportingYear` using its globally unique id and a patch.
  """
  updateReportingYear(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateReportingYearInput!
  ): UpdateReportingYearPayload

  """Updates a single `ReportingYear` using a unique key and a patch."""
  updateReportingYearByReportingYear(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateReportingYearByReportingYearInput!
  ): UpdateReportingYearPayload

  """
  Updates a single `ReviewComment` using its globally unique id and a patch.
  """
  updateReviewComment(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateReviewCommentInput!
  ): UpdateReviewCommentPayload

  """Updates a single `ReviewComment` using a unique key and a patch."""
  updateReviewCommentByRowId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateReviewCommentByRowIdInput!
  ): UpdateReviewCommentPayload
}

"""An object with a globally unique `ID`."""
interface Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  id: ID!
}

type OperatorContactDatum {
  contactCity: String
  contactCountry: String
  contactMailingAddress: String
  contactPostalCode: String
  contactProvince: String
  contactType: String
  email: String
  firstName: String
  lastName: String
  positionTitle: String
  reportId: Int
  reportingYear: Int
  swrsOrganisationId: Int
  swrsReportId: Int
  telephone: String
}

"""
Table containing information on an organisaiton that has applied for CIIP
"""
type Organisation implements Node {
  """Reads and enables pagination through a set of `CiipUserOrganisation`."""
  ciipUserOrganisationsByOrganisationId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CiipUserOrganisationCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CiipUserOrganisationFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CiipUserOrganisation`."""
    orderBy: [CiipUserOrganisationsOrderBy!] = [PRIMARY_KEY_ASC]
  ): CiipUserOrganisationsConnection!

  """Reads and enables pagination through a set of `CiipUser`."""
  ciipUsersByCiipUserOrganisationOrganisationIdAndUserId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CiipUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CiipUserFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CiipUser`."""
    orderBy: [CiipUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): OrganisationCiipUsersByCiipUserOrganisationOrganisationIdAndUserIdManyToManyConnection!

  """cra business number"""
  craBusinessNumber: String

  """duns number"""
  duns: String

  """Reads and enables pagination through a set of `Facility`."""
  facilitiesByOrganisationId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: FacilityCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: FacilityFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Facility`."""
    orderBy: [FacilitiesOrderBy!] = [PRIMARY_KEY_ASC]
  ): FacilitiesConnection!

  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  id: ID!

  """organisation city"""
  operatorCity: String

  """organisation country"""
  operatorCountry: String

  """organisation mailing address"""
  operatorMailingAddress: String

  """legal name of organisation"""
  operatorName: String

  """organisation postal code"""
  operatorPostalCode: String

  """organisation province"""
  operatorProvince: String

  """trade name of organisation"""
  operatorTradeName: String

  """report id from swrs"""
  reportId: Int

  """the reporting year"""
  reportingYear: Int

  """unique if for the organisation"""
  rowId: Int!

  """swrs organisation id"""
  swrsOrganisationId: Int

  """swrs report id from swrs"""
  swrsReportId: Int
}

"""
A connection to a list of `CiipUser` values, with data from `CiipUserOrganisation`.
"""
type OrganisationCiipUsersByCiipUserOrganisationOrganisationIdAndUserIdManyToManyConnection {
  """
  A list of edges which contains the `CiipUser`, info from the `CiipUserOrganisation`, and the cursor to aid in pagination.
  """
  edges: [OrganisationCiipUsersByCiipUserOrganisationOrganisationIdAndUserIdManyToManyEdge!]!

  """A list of `CiipUser` objects."""
  nodes: [CiipUser]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CiipUser` you could get from the connection."""
  totalCount: Int!
}

"""
A `CiipUser` edge in the connection, with data from `CiipUserOrganisation`.
"""
type OrganisationCiipUsersByCiipUserOrganisationOrganisationIdAndUserIdManyToManyEdge {
  """Reads and enables pagination through a set of `CiipUserOrganisation`."""
  ciipUserOrganisationsByUserId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CiipUserOrganisationCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CiipUserOrganisationFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CiipUserOrganisation`."""
    orderBy: [CiipUserOrganisationsOrderBy!] = [PRIMARY_KEY_ASC]
  ): CiipUserOrganisationsConnection!

  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CiipUser` at the end of the edge."""
  node: CiipUser
}

"""
A condition to be used against `Organisation` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input OrganisationCondition {
  """Checks for equality with the object’s `craBusinessNumber` field."""
  craBusinessNumber: String

  """Checks for equality with the object’s `duns` field."""
  duns: String

  """Checks for equality with the object’s `operatorCity` field."""
  operatorCity: String

  """Checks for equality with the object’s `operatorCountry` field."""
  operatorCountry: String

  """Checks for equality with the object’s `operatorMailingAddress` field."""
  operatorMailingAddress: String

  """Checks for equality with the object’s `operatorName` field."""
  operatorName: String

  """Checks for equality with the object’s `operatorPostalCode` field."""
  operatorPostalCode: String

  """Checks for equality with the object’s `operatorProvince` field."""
  operatorProvince: String

  """Checks for equality with the object’s `operatorTradeName` field."""
  operatorTradeName: String

  """Checks for equality with the object’s `reportId` field."""
  reportId: Int

  """Checks for equality with the object’s `reportingYear` field."""
  reportingYear: Int

  """Checks for equality with the object’s `rowId` field."""
  rowId: Int

  """Checks for equality with the object’s `swrsOrganisationId` field."""
  swrsOrganisationId: Int

  """Checks for equality with the object’s `swrsReportId` field."""
  swrsReportId: Int
}

type OrganisationDatum {
  craBusinessNumber: String
  duns: String
  operatorCity: String
  operatorCountry: String
  operatorMailingAddress: String
  operatorName: String
  operatorPostalCode: String
  operatorProvince: String
  operatorTradeName: String
  reportId: Int
  reportingYear: Int
  swrsOrganisationId: Int
  swrsReportId: Int
}

"""
A filter to be used against `Organisation` object types. All fields are combined with a logical ‘and.’
"""
input OrganisationFilter {
  """Checks for all expressions in this list."""
  and: [OrganisationFilter!]

  """
  Filter by the object’s `ciipUserOrganisationsByOrganisationId` relation.
  """
  ciipUserOrganisationsByOrganisationId: OrganisationToManyCiipUserOrganisationFilter

  """Some related `ciipUserOrganisationsByOrganisationId` exist."""
  ciipUserOrganisationsByOrganisationIdExist: Boolean

  """Filter by the object’s `craBusinessNumber` field."""
  craBusinessNumber: StringFilter

  """Filter by the object’s `duns` field."""
  duns: StringFilter

  """Filter by the object’s `facilitiesByOrganisationId` relation."""
  facilitiesByOrganisationId: OrganisationToManyFacilityFilter

  """Some related `facilitiesByOrganisationId` exist."""
  facilitiesByOrganisationIdExist: Boolean

  """Negates the expression."""
  not: OrganisationFilter

  """Filter by the object’s `operatorCity` field."""
  operatorCity: StringFilter

  """Filter by the object’s `operatorCountry` field."""
  operatorCountry: StringFilter

  """Filter by the object’s `operatorMailingAddress` field."""
  operatorMailingAddress: StringFilter

  """Filter by the object’s `operatorName` field."""
  operatorName: StringFilter

  """Filter by the object’s `operatorPostalCode` field."""
  operatorPostalCode: StringFilter

  """Filter by the object’s `operatorProvince` field."""
  operatorProvince: StringFilter

  """Filter by the object’s `operatorTradeName` field."""
  operatorTradeName: StringFilter

  """Checks for any expressions in this list."""
  or: [OrganisationFilter!]

  """Filter by the object’s `reportId` field."""
  reportId: IntFilter

  """Filter by the object’s `reportingYear` field."""
  reportingYear: IntFilter

  """Filter by the object’s `rowId` field."""
  rowId: IntFilter

  """Filter by the object’s `swrsOrganisationId` field."""
  swrsOrganisationId: IntFilter

  """Filter by the object’s `swrsReportId` field."""
  swrsReportId: IntFilter
}

"""An input for mutations affecting `Organisation`"""
input OrganisationInput {
  """cra business number"""
  craBusinessNumber: String

  """duns number"""
  duns: String

  """organisation city"""
  operatorCity: String

  """organisation country"""
  operatorCountry: String

  """organisation mailing address"""
  operatorMailingAddress: String

  """legal name of organisation"""
  operatorName: String

  """organisation postal code"""
  operatorPostalCode: String

  """organisation province"""
  operatorProvince: String

  """trade name of organisation"""
  operatorTradeName: String

  """report id from swrs"""
  reportId: Int

  """the reporting year"""
  reportingYear: Int

  """swrs organisation id"""
  swrsOrganisationId: Int

  """swrs report id from swrs"""
  swrsReportId: Int
}

"""
Represents an update to a `Organisation`. Fields that are set will be updated.
"""
input OrganisationPatch {
  """cra business number"""
  craBusinessNumber: String

  """duns number"""
  duns: String

  """organisation city"""
  operatorCity: String

  """organisation country"""
  operatorCountry: String

  """organisation mailing address"""
  operatorMailingAddress: String

  """legal name of organisation"""
  operatorName: String

  """organisation postal code"""
  operatorPostalCode: String

  """organisation province"""
  operatorProvince: String

  """trade name of organisation"""
  operatorTradeName: String

  """report id from swrs"""
  reportId: Int

  """the reporting year"""
  reportingYear: Int

  """swrs organisation id"""
  swrsOrganisationId: Int

  """swrs report id from swrs"""
  swrsReportId: Int
}

"""A connection to a list of `Organisation` values."""
type OrganisationsConnection {
  """
  A list of edges which contains the `Organisation` and cursor to aid in pagination.
  """
  edges: [OrganisationsEdge!]!

  """A list of `Organisation` objects."""
  nodes: [Organisation]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Organisation` you could get from the connection."""
  totalCount: Int!
}

"""A `Organisation` edge in the connection."""
type OrganisationsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Organisation` at the end of the edge."""
  node: Organisation
}

"""Methods to use when ordering `Organisation`."""
enum OrganisationsOrderBy {
  CRA_BUSINESS_NUMBER_ASC
  CRA_BUSINESS_NUMBER_DESC
  DUNS_ASC
  DUNS_DESC
  ID_ASC
  ID_DESC
  NATURAL
  OPERATOR_CITY_ASC
  OPERATOR_CITY_DESC
  OPERATOR_COUNTRY_ASC
  OPERATOR_COUNTRY_DESC
  OPERATOR_MAILING_ADDRESS_ASC
  OPERATOR_MAILING_ADDRESS_DESC
  OPERATOR_NAME_ASC
  OPERATOR_NAME_DESC
  OPERATOR_POSTAL_CODE_ASC
  OPERATOR_POSTAL_CODE_DESC
  OPERATOR_PROVINCE_ASC
  OPERATOR_PROVINCE_DESC
  OPERATOR_TRADE_NAME_ASC
  OPERATOR_TRADE_NAME_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  REPORT_ID_ASC
  REPORT_ID_DESC
  REPORTING_YEAR_ASC
  REPORTING_YEAR_DESC
  SWRS_ORGANISATION_ID_ASC
  SWRS_ORGANISATION_ID_DESC
  SWRS_REPORT_ID_ASC
  SWRS_REPORT_ID_DESC
}

"""
A filter to be used against many `CiipUserOrganisation` object types. All fields are combined with a logical ‘and.’
"""
input OrganisationToManyCiipUserOrganisationFilter {
  """
  Every related `CiipUserOrganisation` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: CiipUserOrganisationFilter

  """
  No related `CiipUserOrganisation` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: CiipUserOrganisationFilter

  """
  Some related `CiipUserOrganisation` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: CiipUserOrganisationFilter
}

"""
A filter to be used against many `Facility` object types. All fields are combined with a logical ‘and.’
"""
input OrganisationToManyFacilityFilter {
  """
  Every related `Facility` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: FacilityFilter

  """
  No related `Facility` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: FacilityFilter

  """
  Some related `Facility` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: FacilityFilter
}

"""Information about pagination in a connection."""
type PageInfo {
  """When paginating forwards, the cursor to continue."""
  endCursor: Cursor

  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: Cursor
}

"""Table containing the information for a CIIP product"""
type Product implements Node {
  """
  Boolean value indicates if EIO facility emissions should be added to the
  facility emissions when calculating the product emission intensity
  """
  addEmissionsFromEios: Boolean!

  """
  Boolean value indicates if purchased electricity emissions should be added to
  the facility emissions when calculating the product emission intensity
  (applies only to products where requires_emission_allocation is false)
  """
  addPurchasedElectricityEmissions: Boolean!

  """
  Boolean value indicates if purchased heat emissions should be added to the
  facility emissions when calculating the product emission intensity (applies
  only to products where requires_emission_allocation is false)
  """
  addPurchasedHeatEmissions: Boolean!

  """Reads and enables pagination through a set of `Benchmark`."""
  benchmarksByProductId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: BenchmarkCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: BenchmarkFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Benchmark`."""
    orderBy: [BenchmarksOrderBy!] = [PRIMARY_KEY_ASC]
  ): BenchmarksConnection!

  """Reads a single `CiipUser` that is related to this `Product`."""
  ciipUserByCreatedBy: CiipUser

  """Reads a single `CiipUser` that is related to this `Product`."""
  ciipUserByDeletedBy: CiipUser

  """Reads a single `CiipUser` that is related to this `Product`."""
  ciipUserByUpdatedBy: CiipUser

  """Reads and enables pagination through a set of `CiipUser`."""
  ciipUsersByBenchmarkProductIdAndCreatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CiipUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CiipUserFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CiipUser`."""
    orderBy: [CiipUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): ProductCiipUsersByBenchmarkProductIdAndCreatedByManyToManyConnection!

  """Reads and enables pagination through a set of `CiipUser`."""
  ciipUsersByBenchmarkProductIdAndDeletedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CiipUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CiipUserFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CiipUser`."""
    orderBy: [CiipUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): ProductCiipUsersByBenchmarkProductIdAndDeletedByManyToManyConnection!

  """Reads and enables pagination through a set of `CiipUser`."""
  ciipUsersByBenchmarkProductIdAndUpdatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CiipUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CiipUserFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CiipUser`."""
    orderBy: [CiipUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): ProductCiipUsersByBenchmarkProductIdAndUpdatedByManyToManyConnection!

  """Reads and enables pagination through a set of `CiipUser`."""
  ciipUsersByLinkedProductLinkedProductIdAndCreatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CiipUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CiipUserFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CiipUser`."""
    orderBy: [CiipUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): ProductCiipUsersByLinkedProductLinkedProductIdAndCreatedByManyToManyConnection!

  """Reads and enables pagination through a set of `CiipUser`."""
  ciipUsersByLinkedProductLinkedProductIdAndDeletedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CiipUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CiipUserFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CiipUser`."""
    orderBy: [CiipUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): ProductCiipUsersByLinkedProductLinkedProductIdAndDeletedByManyToManyConnection!

  """Reads and enables pagination through a set of `CiipUser`."""
  ciipUsersByLinkedProductLinkedProductIdAndUpdatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CiipUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CiipUserFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CiipUser`."""
    orderBy: [CiipUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): ProductCiipUsersByLinkedProductLinkedProductIdAndUpdatedByManyToManyConnection!

  """Reads and enables pagination through a set of `CiipUser`."""
  ciipUsersByLinkedProductProductIdAndCreatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CiipUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CiipUserFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CiipUser`."""
    orderBy: [CiipUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): ProductCiipUsersByLinkedProductProductIdAndCreatedByManyToManyConnection!

  """Reads and enables pagination through a set of `CiipUser`."""
  ciipUsersByLinkedProductProductIdAndDeletedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CiipUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CiipUserFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CiipUser`."""
    orderBy: [CiipUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): ProductCiipUsersByLinkedProductProductIdAndDeletedByManyToManyConnection!

  """Reads and enables pagination through a set of `CiipUser`."""
  ciipUsersByLinkedProductProductIdAndUpdatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CiipUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CiipUserFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CiipUser`."""
    orderBy: [CiipUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): ProductCiipUsersByLinkedProductProductIdAndUpdatedByManyToManyConnection!

  """Creation date of row"""
  createdAt: Datetime!

  """Creator of row"""
  createdBy: Int

  """
  Computed column returns the current benchmark value for the product passed in via function parameter
  """
  currentBenchmark: BigFloat

  """
  Computed column returns the current eligibility_threshold value for the product passed in via function parameter
  """
  currentEligibilityThreshold: BigFloat

  """Date of deletion"""
  deletedAt: Datetime

  """The user who deleted the row"""
  deletedBy: Int

  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  id: ID!

  """
  Boolean value indicates if the product is benchmarked and has an associated incentive
  """
  isCiipProduct: Boolean!

  """
  Boolean value indicates if the product is an energy product that is reported alongside other products
  """
  isEnergyProduct: Boolean!

  """
  Boolean value indicates if the product is read-only and cannot be changed regardless of state
  """
  isReadOnly: Boolean!

  """
  Computed column returns a set of linked products for a given product where product.product_state=published
  """
  linkedProduct(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: LinkedProductReturnFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int
  ): LinkedProductReturnsConnection!

  """Reads and enables pagination through a set of `LinkedProduct`."""
  linkedProductsByLinkedProductId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: LinkedProductCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: LinkedProductFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `LinkedProduct`."""
    orderBy: [LinkedProductsOrderBy!] = [PRIMARY_KEY_ASC]
  ): LinkedProductsConnection!

  """Reads and enables pagination through a set of `LinkedProduct`."""
  linkedProductsByProductId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: LinkedProductCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: LinkedProductFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `LinkedProduct`."""
    orderBy: [LinkedProductsOrderBy!] = [PRIMARY_KEY_ASC]
  ): LinkedProductsConnection!

  """The name of the product"""
  productName: String!

  """Reads and enables pagination through a set of `Product`."""
  productsByLinkedProductLinkedProductIdAndProductId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProductCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ProductFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Product`."""
    orderBy: [ProductsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ProductProductsByLinkedProductLinkedProductIdAndProductIdManyToManyConnection!

  """Reads and enables pagination through a set of `Product`."""
  productsByLinkedProductProductIdAndLinkedProductId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProductCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ProductFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Product`."""
    orderBy: [ProductsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ProductProductsByLinkedProductProductIdAndLinkedProductIdManyToManyConnection!

  """
  The current state of the product within the lifecycle (draft, published, archived)
  """
  productState: CiipProductState!

  """Reads and enables pagination through a set of `ReportingYear`."""
  reportingYearsByBenchmarkProductIdAndEndReportingYear(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ReportingYearCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ReportingYearFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `ReportingYear`."""
    orderBy: [ReportingYearsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ProductReportingYearsByBenchmarkProductIdAndEndReportingYearManyToManyConnection!

  """Reads and enables pagination through a set of `ReportingYear`."""
  reportingYearsByBenchmarkProductIdAndStartReportingYear(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ReportingYearCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ReportingYearFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `ReportingYear`."""
    orderBy: [ReportingYearsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ProductReportingYearsByBenchmarkProductIdAndStartReportingYearManyToManyConnection!

  """
  Boolean value indicates if the product requires allocation of emissions
  """
  requiresEmissionAllocation: Boolean!

  """
  Boolean value indicates if reporting the production amount is required for a non-ciip product
  """
  requiresProductAmount: Boolean!

  """Unique ID for the product"""
  rowId: Int!

  """
  Boolean value indicates if exported electricity emissions should be subtracted
  from the facility emissions when calculating the product emission intensity
  (applies only to products where requires_emission_allocation is false)
  """
  subtractExportedElectricityEmissions: Boolean!

  """
  Boolean value indicates if exported heat emissions should be subtracted from
  the facility emissions when calculating the product emission intensity
  (applies only to products where requires_emission_allocation is false)
  """
  subtractExportedHeatEmissions: Boolean!

  """
  Boolean value indicates if generated electricity emissions should be
  subtracted from the facility emissions when calculating the product emission
  intensity (applies only to products where requires_emission_allocation is false)
  """
  subtractGeneratedElectricityEmissions: Boolean!

  """
  Boolean value indicates if generated heat emissions should be subtracted from
  the facility emissions when calculating the product emission intensity
  (applies only to products where requires_emission_allocation is false)
  """
  subtractGeneratedHeatEmissions: Boolean!

  """The unit of measure for the product"""
  units: String

  """Updated date of row"""
  updatedAt: Datetime!

  """Updator of row"""
  updatedBy: Int
}

"""
A connection to a list of `CiipUser` values, with data from `Benchmark`.
"""
type ProductCiipUsersByBenchmarkProductIdAndCreatedByManyToManyConnection {
  """
  A list of edges which contains the `CiipUser`, info from the `Benchmark`, and the cursor to aid in pagination.
  """
  edges: [ProductCiipUsersByBenchmarkProductIdAndCreatedByManyToManyEdge!]!

  """A list of `CiipUser` objects."""
  nodes: [CiipUser]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CiipUser` you could get from the connection."""
  totalCount: Int!
}

"""A `CiipUser` edge in the connection, with data from `Benchmark`."""
type ProductCiipUsersByBenchmarkProductIdAndCreatedByManyToManyEdge {
  """Reads and enables pagination through a set of `Benchmark`."""
  benchmarksByCreatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: BenchmarkCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: BenchmarkFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Benchmark`."""
    orderBy: [BenchmarksOrderBy!] = [PRIMARY_KEY_ASC]
  ): BenchmarksConnection!

  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CiipUser` at the end of the edge."""
  node: CiipUser
}

"""
A connection to a list of `CiipUser` values, with data from `Benchmark`.
"""
type ProductCiipUsersByBenchmarkProductIdAndDeletedByManyToManyConnection {
  """
  A list of edges which contains the `CiipUser`, info from the `Benchmark`, and the cursor to aid in pagination.
  """
  edges: [ProductCiipUsersByBenchmarkProductIdAndDeletedByManyToManyEdge!]!

  """A list of `CiipUser` objects."""
  nodes: [CiipUser]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CiipUser` you could get from the connection."""
  totalCount: Int!
}

"""A `CiipUser` edge in the connection, with data from `Benchmark`."""
type ProductCiipUsersByBenchmarkProductIdAndDeletedByManyToManyEdge {
  """Reads and enables pagination through a set of `Benchmark`."""
  benchmarksByDeletedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: BenchmarkCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: BenchmarkFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Benchmark`."""
    orderBy: [BenchmarksOrderBy!] = [PRIMARY_KEY_ASC]
  ): BenchmarksConnection!

  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CiipUser` at the end of the edge."""
  node: CiipUser
}

"""
A connection to a list of `CiipUser` values, with data from `Benchmark`.
"""
type ProductCiipUsersByBenchmarkProductIdAndUpdatedByManyToManyConnection {
  """
  A list of edges which contains the `CiipUser`, info from the `Benchmark`, and the cursor to aid in pagination.
  """
  edges: [ProductCiipUsersByBenchmarkProductIdAndUpdatedByManyToManyEdge!]!

  """A list of `CiipUser` objects."""
  nodes: [CiipUser]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CiipUser` you could get from the connection."""
  totalCount: Int!
}

"""A `CiipUser` edge in the connection, with data from `Benchmark`."""
type ProductCiipUsersByBenchmarkProductIdAndUpdatedByManyToManyEdge {
  """Reads and enables pagination through a set of `Benchmark`."""
  benchmarksByUpdatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: BenchmarkCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: BenchmarkFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Benchmark`."""
    orderBy: [BenchmarksOrderBy!] = [PRIMARY_KEY_ASC]
  ): BenchmarksConnection!

  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CiipUser` at the end of the edge."""
  node: CiipUser
}

"""
A connection to a list of `CiipUser` values, with data from `LinkedProduct`.
"""
type ProductCiipUsersByLinkedProductLinkedProductIdAndCreatedByManyToManyConnection {
  """
  A list of edges which contains the `CiipUser`, info from the `LinkedProduct`, and the cursor to aid in pagination.
  """
  edges: [ProductCiipUsersByLinkedProductLinkedProductIdAndCreatedByManyToManyEdge!]!

  """A list of `CiipUser` objects."""
  nodes: [CiipUser]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CiipUser` you could get from the connection."""
  totalCount: Int!
}

"""A `CiipUser` edge in the connection, with data from `LinkedProduct`."""
type ProductCiipUsersByLinkedProductLinkedProductIdAndCreatedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """Reads and enables pagination through a set of `LinkedProduct`."""
  linkedProductsByCreatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: LinkedProductCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: LinkedProductFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `LinkedProduct`."""
    orderBy: [LinkedProductsOrderBy!] = [PRIMARY_KEY_ASC]
  ): LinkedProductsConnection!

  """The `CiipUser` at the end of the edge."""
  node: CiipUser
}

"""
A connection to a list of `CiipUser` values, with data from `LinkedProduct`.
"""
type ProductCiipUsersByLinkedProductLinkedProductIdAndDeletedByManyToManyConnection {
  """
  A list of edges which contains the `CiipUser`, info from the `LinkedProduct`, and the cursor to aid in pagination.
  """
  edges: [ProductCiipUsersByLinkedProductLinkedProductIdAndDeletedByManyToManyEdge!]!

  """A list of `CiipUser` objects."""
  nodes: [CiipUser]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CiipUser` you could get from the connection."""
  totalCount: Int!
}

"""A `CiipUser` edge in the connection, with data from `LinkedProduct`."""
type ProductCiipUsersByLinkedProductLinkedProductIdAndDeletedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """Reads and enables pagination through a set of `LinkedProduct`."""
  linkedProductsByDeletedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: LinkedProductCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: LinkedProductFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `LinkedProduct`."""
    orderBy: [LinkedProductsOrderBy!] = [PRIMARY_KEY_ASC]
  ): LinkedProductsConnection!

  """The `CiipUser` at the end of the edge."""
  node: CiipUser
}

"""
A connection to a list of `CiipUser` values, with data from `LinkedProduct`.
"""
type ProductCiipUsersByLinkedProductLinkedProductIdAndUpdatedByManyToManyConnection {
  """
  A list of edges which contains the `CiipUser`, info from the `LinkedProduct`, and the cursor to aid in pagination.
  """
  edges: [ProductCiipUsersByLinkedProductLinkedProductIdAndUpdatedByManyToManyEdge!]!

  """A list of `CiipUser` objects."""
  nodes: [CiipUser]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CiipUser` you could get from the connection."""
  totalCount: Int!
}

"""A `CiipUser` edge in the connection, with data from `LinkedProduct`."""
type ProductCiipUsersByLinkedProductLinkedProductIdAndUpdatedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """Reads and enables pagination through a set of `LinkedProduct`."""
  linkedProductsByUpdatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: LinkedProductCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: LinkedProductFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `LinkedProduct`."""
    orderBy: [LinkedProductsOrderBy!] = [PRIMARY_KEY_ASC]
  ): LinkedProductsConnection!

  """The `CiipUser` at the end of the edge."""
  node: CiipUser
}

"""
A connection to a list of `CiipUser` values, with data from `LinkedProduct`.
"""
type ProductCiipUsersByLinkedProductProductIdAndCreatedByManyToManyConnection {
  """
  A list of edges which contains the `CiipUser`, info from the `LinkedProduct`, and the cursor to aid in pagination.
  """
  edges: [ProductCiipUsersByLinkedProductProductIdAndCreatedByManyToManyEdge!]!

  """A list of `CiipUser` objects."""
  nodes: [CiipUser]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CiipUser` you could get from the connection."""
  totalCount: Int!
}

"""A `CiipUser` edge in the connection, with data from `LinkedProduct`."""
type ProductCiipUsersByLinkedProductProductIdAndCreatedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """Reads and enables pagination through a set of `LinkedProduct`."""
  linkedProductsByCreatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: LinkedProductCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: LinkedProductFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `LinkedProduct`."""
    orderBy: [LinkedProductsOrderBy!] = [PRIMARY_KEY_ASC]
  ): LinkedProductsConnection!

  """The `CiipUser` at the end of the edge."""
  node: CiipUser
}

"""
A connection to a list of `CiipUser` values, with data from `LinkedProduct`.
"""
type ProductCiipUsersByLinkedProductProductIdAndDeletedByManyToManyConnection {
  """
  A list of edges which contains the `CiipUser`, info from the `LinkedProduct`, and the cursor to aid in pagination.
  """
  edges: [ProductCiipUsersByLinkedProductProductIdAndDeletedByManyToManyEdge!]!

  """A list of `CiipUser` objects."""
  nodes: [CiipUser]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CiipUser` you could get from the connection."""
  totalCount: Int!
}

"""A `CiipUser` edge in the connection, with data from `LinkedProduct`."""
type ProductCiipUsersByLinkedProductProductIdAndDeletedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """Reads and enables pagination through a set of `LinkedProduct`."""
  linkedProductsByDeletedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: LinkedProductCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: LinkedProductFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `LinkedProduct`."""
    orderBy: [LinkedProductsOrderBy!] = [PRIMARY_KEY_ASC]
  ): LinkedProductsConnection!

  """The `CiipUser` at the end of the edge."""
  node: CiipUser
}

"""
A connection to a list of `CiipUser` values, with data from `LinkedProduct`.
"""
type ProductCiipUsersByLinkedProductProductIdAndUpdatedByManyToManyConnection {
  """
  A list of edges which contains the `CiipUser`, info from the `LinkedProduct`, and the cursor to aid in pagination.
  """
  edges: [ProductCiipUsersByLinkedProductProductIdAndUpdatedByManyToManyEdge!]!

  """A list of `CiipUser` objects."""
  nodes: [CiipUser]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CiipUser` you could get from the connection."""
  totalCount: Int!
}

"""A `CiipUser` edge in the connection, with data from `LinkedProduct`."""
type ProductCiipUsersByLinkedProductProductIdAndUpdatedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """Reads and enables pagination through a set of `LinkedProduct`."""
  linkedProductsByUpdatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: LinkedProductCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: LinkedProductFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `LinkedProduct`."""
    orderBy: [LinkedProductsOrderBy!] = [PRIMARY_KEY_ASC]
  ): LinkedProductsConnection!

  """The `CiipUser` at the end of the edge."""
  node: CiipUser
}

"""
A condition to be used against `Product` object types. All fields are tested for equality and combined with a logical ‘and.’
"""
input ProductCondition {
  """Checks for equality with the object’s `addEmissionsFromEios` field."""
  addEmissionsFromEios: Boolean

  """
  Checks for equality with the object’s `addPurchasedElectricityEmissions` field.
  """
  addPurchasedElectricityEmissions: Boolean

  """
  Checks for equality with the object’s `addPurchasedHeatEmissions` field.
  """
  addPurchasedHeatEmissions: Boolean

  """Checks for equality with the object’s `createdAt` field."""
  createdAt: Datetime

  """Checks for equality with the object’s `createdBy` field."""
  createdBy: Int

  """Checks for equality with the object’s `deletedAt` field."""
  deletedAt: Datetime

  """Checks for equality with the object’s `deletedBy` field."""
  deletedBy: Int

  """Checks for equality with the object’s `isCiipProduct` field."""
  isCiipProduct: Boolean

  """Checks for equality with the object’s `isEnergyProduct` field."""
  isEnergyProduct: Boolean

  """Checks for equality with the object’s `isReadOnly` field."""
  isReadOnly: Boolean

  """Checks for equality with the object’s `productName` field."""
  productName: String

  """Checks for equality with the object’s `productState` field."""
  productState: CiipProductState

  """
  Checks for equality with the object’s `requiresEmissionAllocation` field.
  """
  requiresEmissionAllocation: Boolean

  """Checks for equality with the object’s `requiresProductAmount` field."""
  requiresProductAmount: Boolean

  """Checks for equality with the object’s `rowId` field."""
  rowId: Int

  """
  Checks for equality with the object’s `subtractExportedElectricityEmissions` field.
  """
  subtractExportedElectricityEmissions: Boolean

  """
  Checks for equality with the object’s `subtractExportedHeatEmissions` field.
  """
  subtractExportedHeatEmissions: Boolean

  """
  Checks for equality with the object’s `subtractGeneratedElectricityEmissions` field.
  """
  subtractGeneratedElectricityEmissions: Boolean

  """
  Checks for equality with the object’s `subtractGeneratedHeatEmissions` field.
  """
  subtractGeneratedHeatEmissions: Boolean

  """Checks for equality with the object’s `units` field."""
  units: String

  """Checks for equality with the object’s `updatedAt` field."""
  updatedAt: Datetime

  """Checks for equality with the object’s `updatedBy` field."""
  updatedBy: Int
}

"""
A filter to be used against `Product` object types. All fields are combined with a logical ‘and.’
"""
input ProductFilter {
  """Filter by the object’s `addEmissionsFromEios` field."""
  addEmissionsFromEios: BooleanFilter

  """Filter by the object’s `addPurchasedElectricityEmissions` field."""
  addPurchasedElectricityEmissions: BooleanFilter

  """Filter by the object’s `addPurchasedHeatEmissions` field."""
  addPurchasedHeatEmissions: BooleanFilter

  """Checks for all expressions in this list."""
  and: [ProductFilter!]

  """Filter by the object’s `benchmarksByProductId` relation."""
  benchmarksByProductId: ProductToManyBenchmarkFilter

  """Some related `benchmarksByProductId` exist."""
  benchmarksByProductIdExist: Boolean

  """Filter by the object’s `ciipUserByCreatedBy` relation."""
  ciipUserByCreatedBy: CiipUserFilter

  """A related `ciipUserByCreatedBy` exists."""
  ciipUserByCreatedByExists: Boolean

  """Filter by the object’s `ciipUserByDeletedBy` relation."""
  ciipUserByDeletedBy: CiipUserFilter

  """A related `ciipUserByDeletedBy` exists."""
  ciipUserByDeletedByExists: Boolean

  """Filter by the object’s `ciipUserByUpdatedBy` relation."""
  ciipUserByUpdatedBy: CiipUserFilter

  """A related `ciipUserByUpdatedBy` exists."""
  ciipUserByUpdatedByExists: Boolean

  """Filter by the object’s `createdAt` field."""
  createdAt: DatetimeFilter

  """Filter by the object’s `createdBy` field."""
  createdBy: IntFilter

  """Filter by the object’s `currentBenchmark` field."""
  currentBenchmark: BigFloatFilter

  """Filter by the object’s `currentEligibilityThreshold` field."""
  currentEligibilityThreshold: BigFloatFilter

  """Filter by the object’s `deletedAt` field."""
  deletedAt: DatetimeFilter

  """Filter by the object’s `deletedBy` field."""
  deletedBy: IntFilter

  """Filter by the object’s `isCiipProduct` field."""
  isCiipProduct: BooleanFilter

  """Filter by the object’s `isEnergyProduct` field."""
  isEnergyProduct: BooleanFilter

  """Filter by the object’s `isReadOnly` field."""
  isReadOnly: BooleanFilter

  """Filter by the object’s `linkedProductsByLinkedProductId` relation."""
  linkedProductsByLinkedProductId: ProductToManyLinkedProductFilter

  """Some related `linkedProductsByLinkedProductId` exist."""
  linkedProductsByLinkedProductIdExist: Boolean

  """Filter by the object’s `linkedProductsByProductId` relation."""
  linkedProductsByProductId: ProductToManyLinkedProductFilter

  """Some related `linkedProductsByProductId` exist."""
  linkedProductsByProductIdExist: Boolean

  """Negates the expression."""
  not: ProductFilter

  """Checks for any expressions in this list."""
  or: [ProductFilter!]

  """Filter by the object’s `productName` field."""
  productName: StringFilter

  """Filter by the object’s `productState` field."""
  productState: CiipProductStateFilter

  """Filter by the object’s `requiresEmissionAllocation` field."""
  requiresEmissionAllocation: BooleanFilter

  """Filter by the object’s `requiresProductAmount` field."""
  requiresProductAmount: BooleanFilter

  """Filter by the object’s `rowId` field."""
  rowId: IntFilter

  """Filter by the object’s `subtractExportedElectricityEmissions` field."""
  subtractExportedElectricityEmissions: BooleanFilter

  """Filter by the object’s `subtractExportedHeatEmissions` field."""
  subtractExportedHeatEmissions: BooleanFilter

  """Filter by the object’s `subtractGeneratedElectricityEmissions` field."""
  subtractGeneratedElectricityEmissions: BooleanFilter

  """Filter by the object’s `subtractGeneratedHeatEmissions` field."""
  subtractGeneratedHeatEmissions: BooleanFilter

  """Filter by the object’s `units` field."""
  units: StringFilter

  """Filter by the object’s `updatedAt` field."""
  updatedAt: DatetimeFilter

  """Filter by the object’s `updatedBy` field."""
  updatedBy: IntFilter
}

"""An input for mutations affecting `Product`"""
input ProductInput {
  """
  Boolean value indicates if EIO facility emissions should be added to the
  facility emissions when calculating the product emission intensity
  """
  addEmissionsFromEios: Boolean

  """
  Boolean value indicates if purchased electricity emissions should be added to
  the facility emissions when calculating the product emission intensity
  (applies only to products where requires_emission_allocation is false)
  """
  addPurchasedElectricityEmissions: Boolean

  """
  Boolean value indicates if purchased heat emissions should be added to the
  facility emissions when calculating the product emission intensity (applies
  only to products where requires_emission_allocation is false)
  """
  addPurchasedHeatEmissions: Boolean

  """Creation date of row"""
  createdAt: Datetime

  """Creator of row"""
  createdBy: Int

  """Date of deletion"""
  deletedAt: Datetime

  """The user who deleted the row"""
  deletedBy: Int

  """
  Boolean value indicates if the product is benchmarked and has an associated incentive
  """
  isCiipProduct: Boolean

  """
  Boolean value indicates if the product is an energy product that is reported alongside other products
  """
  isEnergyProduct: Boolean

  """
  Boolean value indicates if the product is read-only and cannot be changed regardless of state
  """
  isReadOnly: Boolean

  """The name of the product"""
  productName: String!

  """
  The current state of the product within the lifecycle (draft, published, archived)
  """
  productState: CiipProductState

  """
  Boolean value indicates if the product requires allocation of emissions
  """
  requiresEmissionAllocation: Boolean

  """
  Boolean value indicates if reporting the production amount is required for a non-ciip product
  """
  requiresProductAmount: Boolean

  """
  Boolean value indicates if exported electricity emissions should be subtracted
  from the facility emissions when calculating the product emission intensity
  (applies only to products where requires_emission_allocation is false)
  """
  subtractExportedElectricityEmissions: Boolean

  """
  Boolean value indicates if exported heat emissions should be subtracted from
  the facility emissions when calculating the product emission intensity
  (applies only to products where requires_emission_allocation is false)
  """
  subtractExportedHeatEmissions: Boolean

  """
  Boolean value indicates if generated electricity emissions should be
  subtracted from the facility emissions when calculating the product emission
  intensity (applies only to products where requires_emission_allocation is false)
  """
  subtractGeneratedElectricityEmissions: Boolean

  """
  Boolean value indicates if generated heat emissions should be subtracted from
  the facility emissions when calculating the product emission intensity
  (applies only to products where requires_emission_allocation is false)
  """
  subtractGeneratedHeatEmissions: Boolean

  """The unit of measure for the product"""
  units: String

  """Updated date of row"""
  updatedAt: Datetime

  """Updator of row"""
  updatedBy: Int
}

"""
Represents an update to a `Product`. Fields that are set will be updated.
"""
input ProductPatch {
  """
  Boolean value indicates if EIO facility emissions should be added to the
  facility emissions when calculating the product emission intensity
  """
  addEmissionsFromEios: Boolean

  """
  Boolean value indicates if purchased electricity emissions should be added to
  the facility emissions when calculating the product emission intensity
  (applies only to products where requires_emission_allocation is false)
  """
  addPurchasedElectricityEmissions: Boolean

  """
  Boolean value indicates if purchased heat emissions should be added to the
  facility emissions when calculating the product emission intensity (applies
  only to products where requires_emission_allocation is false)
  """
  addPurchasedHeatEmissions: Boolean

  """Creation date of row"""
  createdAt: Datetime

  """Creator of row"""
  createdBy: Int

  """Date of deletion"""
  deletedAt: Datetime

  """The user who deleted the row"""
  deletedBy: Int

  """
  Boolean value indicates if the product is benchmarked and has an associated incentive
  """
  isCiipProduct: Boolean

  """
  Boolean value indicates if the product is an energy product that is reported alongside other products
  """
  isEnergyProduct: Boolean

  """
  Boolean value indicates if the product is read-only and cannot be changed regardless of state
  """
  isReadOnly: Boolean

  """The name of the product"""
  productName: String

  """
  The current state of the product within the lifecycle (draft, published, archived)
  """
  productState: CiipProductState

  """
  Boolean value indicates if the product requires allocation of emissions
  """
  requiresEmissionAllocation: Boolean

  """
  Boolean value indicates if reporting the production amount is required for a non-ciip product
  """
  requiresProductAmount: Boolean

  """
  Boolean value indicates if exported electricity emissions should be subtracted
  from the facility emissions when calculating the product emission intensity
  (applies only to products where requires_emission_allocation is false)
  """
  subtractExportedElectricityEmissions: Boolean

  """
  Boolean value indicates if exported heat emissions should be subtracted from
  the facility emissions when calculating the product emission intensity
  (applies only to products where requires_emission_allocation is false)
  """
  subtractExportedHeatEmissions: Boolean

  """
  Boolean value indicates if generated electricity emissions should be
  subtracted from the facility emissions when calculating the product emission
  intensity (applies only to products where requires_emission_allocation is false)
  """
  subtractGeneratedElectricityEmissions: Boolean

  """
  Boolean value indicates if generated heat emissions should be subtracted from
  the facility emissions when calculating the product emission intensity
  (applies only to products where requires_emission_allocation is false)
  """
  subtractGeneratedHeatEmissions: Boolean

  """The unit of measure for the product"""
  units: String

  """Updated date of row"""
  updatedAt: Datetime

  """Updator of row"""
  updatedBy: Int
}

"""
A connection to a list of `Product` values, with data from `LinkedProduct`.
"""
type ProductProductsByLinkedProductLinkedProductIdAndProductIdManyToManyConnection {
  """
  A list of edges which contains the `Product`, info from the `LinkedProduct`, and the cursor to aid in pagination.
  """
  edges: [ProductProductsByLinkedProductLinkedProductIdAndProductIdManyToManyEdge!]!

  """A list of `Product` objects."""
  nodes: [Product]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Product` you could get from the connection."""
  totalCount: Int!
}

"""A `Product` edge in the connection, with data from `LinkedProduct`."""
type ProductProductsByLinkedProductLinkedProductIdAndProductIdManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """Reads and enables pagination through a set of `LinkedProduct`."""
  linkedProductsByProductId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: LinkedProductCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: LinkedProductFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `LinkedProduct`."""
    orderBy: [LinkedProductsOrderBy!] = [PRIMARY_KEY_ASC]
  ): LinkedProductsConnection!

  """The `Product` at the end of the edge."""
  node: Product
}

"""
A connection to a list of `Product` values, with data from `LinkedProduct`.
"""
type ProductProductsByLinkedProductProductIdAndLinkedProductIdManyToManyConnection {
  """
  A list of edges which contains the `Product`, info from the `LinkedProduct`, and the cursor to aid in pagination.
  """
  edges: [ProductProductsByLinkedProductProductIdAndLinkedProductIdManyToManyEdge!]!

  """A list of `Product` objects."""
  nodes: [Product]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Product` you could get from the connection."""
  totalCount: Int!
}

"""A `Product` edge in the connection, with data from `LinkedProduct`."""
type ProductProductsByLinkedProductProductIdAndLinkedProductIdManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """Reads and enables pagination through a set of `LinkedProduct`."""
  linkedProductsByLinkedProductId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: LinkedProductCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: LinkedProductFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `LinkedProduct`."""
    orderBy: [LinkedProductsOrderBy!] = [PRIMARY_KEY_ASC]
  ): LinkedProductsConnection!

  """The `Product` at the end of the edge."""
  node: Product
}

"""
A connection to a list of `ReportingYear` values, with data from `Benchmark`.
"""
type ProductReportingYearsByBenchmarkProductIdAndEndReportingYearManyToManyConnection {
  """
  A list of edges which contains the `ReportingYear`, info from the `Benchmark`, and the cursor to aid in pagination.
  """
  edges: [ProductReportingYearsByBenchmarkProductIdAndEndReportingYearManyToManyEdge!]!

  """A list of `ReportingYear` objects."""
  nodes: [ReportingYear]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `ReportingYear` you could get from the connection."""
  totalCount: Int!
}

"""A `ReportingYear` edge in the connection, with data from `Benchmark`."""
type ProductReportingYearsByBenchmarkProductIdAndEndReportingYearManyToManyEdge {
  """Reads and enables pagination through a set of `Benchmark`."""
  benchmarksByEndReportingYear(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: BenchmarkCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: BenchmarkFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Benchmark`."""
    orderBy: [BenchmarksOrderBy!] = [PRIMARY_KEY_ASC]
  ): BenchmarksConnection!

  """A cursor for use in pagination."""
  cursor: Cursor

  """The `ReportingYear` at the end of the edge."""
  node: ReportingYear
}

"""
A connection to a list of `ReportingYear` values, with data from `Benchmark`.
"""
type ProductReportingYearsByBenchmarkProductIdAndStartReportingYearManyToManyConnection {
  """
  A list of edges which contains the `ReportingYear`, info from the `Benchmark`, and the cursor to aid in pagination.
  """
  edges: [ProductReportingYearsByBenchmarkProductIdAndStartReportingYearManyToManyEdge!]!

  """A list of `ReportingYear` objects."""
  nodes: [ReportingYear]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `ReportingYear` you could get from the connection."""
  totalCount: Int!
}

"""A `ReportingYear` edge in the connection, with data from `Benchmark`."""
type ProductReportingYearsByBenchmarkProductIdAndStartReportingYearManyToManyEdge {
  """Reads and enables pagination through a set of `Benchmark`."""
  benchmarksByStartReportingYear(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: BenchmarkCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: BenchmarkFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Benchmark`."""
    orderBy: [BenchmarksOrderBy!] = [PRIMARY_KEY_ASC]
  ): BenchmarksConnection!

  """A cursor for use in pagination."""
  cursor: Cursor

  """The `ReportingYear` at the end of the edge."""
  node: ReportingYear
}

"""A connection to a list of `Product` values."""
type ProductsConnection {
  """
  A list of edges which contains the `Product` and cursor to aid in pagination.
  """
  edges: [ProductsEdge!]!

  """A list of `Product` objects."""
  nodes: [Product]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Product` you could get from the connection."""
  totalCount: Int!
}

"""A `Product` edge in the connection."""
type ProductsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Product` at the end of the edge."""
  node: Product
}

"""Methods to use when ordering `Product`."""
enum ProductsOrderBy {
  ADD_EMISSIONS_FROM_EIOS_ASC
  ADD_EMISSIONS_FROM_EIOS_DESC
  ADD_PURCHASED_ELECTRICITY_EMISSIONS_ASC
  ADD_PURCHASED_ELECTRICITY_EMISSIONS_DESC
  ADD_PURCHASED_HEAT_EMISSIONS_ASC
  ADD_PURCHASED_HEAT_EMISSIONS_DESC
  CREATED_AT_ASC
  CREATED_AT_DESC
  CREATED_BY_ASC
  CREATED_BY_DESC
  CURRENT_BENCHMARK_ASC
  CURRENT_BENCHMARK_DESC
  CURRENT_ELIGIBILITY_THRESHOLD_ASC
  CURRENT_ELIGIBILITY_THRESHOLD_DESC
  DELETED_AT_ASC
  DELETED_AT_DESC
  DELETED_BY_ASC
  DELETED_BY_DESC
  ID_ASC
  ID_DESC
  IS_CIIP_PRODUCT_ASC
  IS_CIIP_PRODUCT_DESC
  IS_ENERGY_PRODUCT_ASC
  IS_ENERGY_PRODUCT_DESC
  IS_READ_ONLY_ASC
  IS_READ_ONLY_DESC
  NATURAL
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  PRODUCT_NAME_ASC
  PRODUCT_NAME_DESC
  PRODUCT_STATE_ASC
  PRODUCT_STATE_DESC
  REQUIRES_EMISSION_ALLOCATION_ASC
  REQUIRES_EMISSION_ALLOCATION_DESC
  REQUIRES_PRODUCT_AMOUNT_ASC
  REQUIRES_PRODUCT_AMOUNT_DESC
  SUBTRACT_EXPORTED_ELECTRICITY_EMISSIONS_ASC
  SUBTRACT_EXPORTED_ELECTRICITY_EMISSIONS_DESC
  SUBTRACT_EXPORTED_HEAT_EMISSIONS_ASC
  SUBTRACT_EXPORTED_HEAT_EMISSIONS_DESC
  SUBTRACT_GENERATED_ELECTRICITY_EMISSIONS_ASC
  SUBTRACT_GENERATED_ELECTRICITY_EMISSIONS_DESC
  SUBTRACT_GENERATED_HEAT_EMISSIONS_ASC
  SUBTRACT_GENERATED_HEAT_EMISSIONS_DESC
  UNITS_ASC
  UNITS_DESC
  UPDATED_AT_ASC
  UPDATED_AT_DESC
  UPDATED_BY_ASC
  UPDATED_BY_DESC
}

"""
A filter to be used against many `Benchmark` object types. All fields are combined with a logical ‘and.’
"""
input ProductToManyBenchmarkFilter {
  """
  Every related `Benchmark` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: BenchmarkFilter

  """
  No related `Benchmark` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: BenchmarkFilter

  """
  Some related `Benchmark` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: BenchmarkFilter
}

"""
A filter to be used against many `LinkedProduct` object types. All fields are combined with a logical ‘and.’
"""
input ProductToManyLinkedProductFilter {
  """
  Every related `LinkedProduct` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: LinkedProductFilter

  """
  No related `LinkedProduct` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: LinkedProductFilter

  """
  Some related `LinkedProduct` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: LinkedProductFilter
}

"""The root query type which gives access points into the data universe."""
type Query implements Node {
  """Reads and enables pagination through a set of `ApplicationRevision`."""
  allApplicationRevisions(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ApplicationRevisionCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ApplicationRevisionFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `ApplicationRevision`."""
    orderBy: [ApplicationRevisionsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ApplicationRevisionsConnection

  """
  Reads and enables pagination through a set of `ApplicationRevisionStatus`.
  """
  allApplicationRevisionStatuses(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ApplicationRevisionStatusCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ApplicationRevisionStatusFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `ApplicationRevisionStatus`."""
    orderBy: [ApplicationRevisionStatusesOrderBy!] = [PRIMARY_KEY_ASC]
  ): ApplicationRevisionStatusesConnection

  """Reads and enables pagination through a set of `Application`."""
  allApplications(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ApplicationCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ApplicationFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Application`."""
    orderBy: [ApplicationsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ApplicationsConnection

  """Reads and enables pagination through a set of `Benchmark`."""
  allBenchmarks(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: BenchmarkCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: BenchmarkFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Benchmark`."""
    orderBy: [BenchmarksOrderBy!] = [PRIMARY_KEY_ASC]
  ): BenchmarksConnection

  """Reads and enables pagination through a set of `CertificationUrl`."""
  allCertificationUrls(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CertificationUrlCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CertificationUrlFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CertificationUrl`."""
    orderBy: [CertificationUrlsOrderBy!] = [PRIMARY_KEY_ASC]
  ): CertificationUrlsConnection

  """Reads and enables pagination through a set of `CiipApplicationWizard`."""
  allCiipApplicationWizards(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CiipApplicationWizardCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CiipApplicationWizardFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CiipApplicationWizard`."""
    orderBy: [CiipApplicationWizardsOrderBy!] = [PRIMARY_KEY_ASC]
  ): CiipApplicationWizardsConnection

  """
  Reads and enables pagination through a set of `CiipCarbonTaxCalculation`.
  """
  allCiipCarbonTaxCalculations(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CiipCarbonTaxCalculationCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CiipCarbonTaxCalculationFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CiipCarbonTaxCalculation`."""
    orderBy: [CiipCarbonTaxCalculationsOrderBy!] = [NATURAL]
  ): CiipCarbonTaxCalculationsConnection

  """Reads and enables pagination through a set of `CiipUserOrganisation`."""
  allCiipUserOrganisations(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CiipUserOrganisationCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CiipUserOrganisationFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CiipUserOrganisation`."""
    orderBy: [CiipUserOrganisationsOrderBy!] = [PRIMARY_KEY_ASC]
  ): CiipUserOrganisationsConnection

  """Reads and enables pagination through a set of `CiipUser`."""
  allCiipUsers(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CiipUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CiipUserFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CiipUser`."""
    orderBy: [CiipUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): CiipUsersConnection

  """Reads and enables pagination through a set of `EmissionCategory`."""
  allEmissionCategories(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: EmissionCategoryCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: EmissionCategoryFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `EmissionCategory`."""
    orderBy: [EmissionCategoriesOrderBy!] = [PRIMARY_KEY_ASC]
  ): EmissionCategoriesConnection

  """Reads and enables pagination through a set of `EmissionCategoryGas`."""
  allEmissionCategoryGases(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: EmissionCategoryGasCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: EmissionCategoryGasFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `EmissionCategoryGas`."""
    orderBy: [EmissionCategoryGasesOrderBy!] = [PRIMARY_KEY_ASC]
  ): EmissionCategoryGasesConnection

  """Reads and enables pagination through a set of `Facility`."""
  allFacilities(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: FacilityCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: FacilityFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Facility`."""
    orderBy: [FacilitiesOrderBy!] = [PRIMARY_KEY_ASC]
  ): FacilitiesConnection

  """Reads and enables pagination through a set of `FormJson`."""
  allFormJsons(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: FormJsonCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: FormJsonFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `FormJson`."""
    orderBy: [FormJsonsOrderBy!] = [PRIMARY_KEY_ASC]
  ): FormJsonsConnection

  """Reads and enables pagination through a set of `FormResult`."""
  allFormResults(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: FormResultCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: FormResultFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `FormResult`."""
    orderBy: [FormResultsOrderBy!] = [PRIMARY_KEY_ASC]
  ): FormResultsConnection

  """Reads and enables pagination through a set of `FormResultStatus`."""
  allFormResultStatuses(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: FormResultStatusCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: FormResultStatusFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `FormResultStatus`."""
    orderBy: [FormResultStatusesOrderBy!] = [PRIMARY_KEY_ASC]
  ): FormResultStatusesConnection

  """Reads and enables pagination through a set of `Fuel`."""
  allFuels(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: FuelCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: FuelFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Fuel`."""
    orderBy: [FuelsOrderBy!] = [PRIMARY_KEY_ASC]
  ): FuelsConnection

  """Reads and enables pagination through a set of `Gas`."""
  allGases(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: GasCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: GasFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Gas`."""
    orderBy: [GasesOrderBy!] = [PRIMARY_KEY_ASC]
  ): GasesConnection

  """Reads and enables pagination through a set of `LinkedProduct`."""
  allLinkedProducts(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: LinkedProductCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: LinkedProductFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `LinkedProduct`."""
    orderBy: [LinkedProductsOrderBy!] = [PRIMARY_KEY_ASC]
  ): LinkedProductsConnection

  """Reads and enables pagination through a set of `Organisation`."""
  allOrganisations(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: OrganisationCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: OrganisationFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Organisation`."""
    orderBy: [OrganisationsOrderBy!] = [PRIMARY_KEY_ASC]
  ): OrganisationsConnection

  """Reads and enables pagination through a set of `Product`."""
  allProducts(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProductCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ProductFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Product`."""
    orderBy: [ProductsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ProductsConnection

  """Reads and enables pagination through a set of `ReportingYear`."""
  allReportingYears(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ReportingYearCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ReportingYearFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `ReportingYear`."""
    orderBy: [ReportingYearsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ReportingYearsConnection

  """Reads and enables pagination through a set of `ReviewComment`."""
  allReviewComments(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ReviewCommentCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ReviewCommentFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `ReviewComment`."""
    orderBy: [ReviewCommentsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ReviewCommentsConnection

  """Reads a single `Application` using its globally unique `ID`."""
  application(
    """
    The globally unique `ID` to be used in selecting a single `Application`.
    """
    id: ID!
  ): Application
  applicationByRowId(rowId: Int!): Application

  """Reads a single `ApplicationRevision` using its globally unique `ID`."""
  applicationRevision(
    """
    The globally unique `ID` to be used in selecting a single `ApplicationRevision`.
    """
    id: ID!
  ): ApplicationRevision
  applicationRevisionByApplicationIdAndVersionNumber(applicationId: Int!, versionNumber: Int!): ApplicationRevision

  """
  Reads a single `ApplicationRevisionStatus` using its globally unique `ID`.
  """
  applicationRevisionStatus(
    """
    The globally unique `ID` to be used in selecting a single `ApplicationRevisionStatus`.
    """
    id: ID!
  ): ApplicationRevisionStatus
  applicationRevisionStatusByRowId(rowId: Int!): ApplicationRevisionStatus

  """Reads a single `Benchmark` using its globally unique `ID`."""
  benchmark(
    """The globally unique `ID` to be used in selecting a single `Benchmark`."""
    id: ID!
  ): Benchmark
  benchmarkByRowId(rowId: Int!): Benchmark

  """Reads a single `CertificationUrl` using its globally unique `ID`."""
  certificationUrl(
    """
    The globally unique `ID` to be used in selecting a single `CertificationUrl`.
    """
    id: ID!
  ): CertificationUrl
  certificationUrlByRowId(rowId: String!): CertificationUrl

  """Reads a single `CiipApplicationWizard` using its globally unique `ID`."""
  ciipApplicationWizard(
    """
    The globally unique `ID` to be used in selecting a single `CiipApplicationWizard`.
    """
    id: ID!
  ): CiipApplicationWizard
  ciipApplicationWizardByFormId(formId: Int!): CiipApplicationWizard

  """Reads a single `CiipUser` using its globally unique `ID`."""
  ciipUser(
    """The globally unique `ID` to be used in selecting a single `CiipUser`."""
    id: ID!
  ): CiipUser
  ciipUserByRowId(rowId: Int!): CiipUser

  """Reads a single `CiipUserOrganisation` using its globally unique `ID`."""
  ciipUserOrganisation(
    """
    The globally unique `ID` to be used in selecting a single `CiipUserOrganisation`.
    """
    id: ID!
  ): CiipUserOrganisation
  ciipUserOrganisationByRowId(rowId: Int!): CiipUserOrganisation

  """Reads a single `EmissionCategory` using its globally unique `ID`."""
  emissionCategory(
    """
    The globally unique `ID` to be used in selecting a single `EmissionCategory`.
    """
    id: ID!
  ): EmissionCategory
  emissionCategoryByRowId(rowId: Int!): EmissionCategory

  """Reads a single `EmissionCategoryGas` using its globally unique `ID`."""
  emissionCategoryGas(
    """
    The globally unique `ID` to be used in selecting a single `EmissionCategoryGas`.
    """
    id: ID!
  ): EmissionCategoryGas
  emissionCategoryGasByRowId(rowId: Int!): EmissionCategoryGas

  """Reads a single `Facility` using its globally unique `ID`."""
  facility(
    """The globally unique `ID` to be used in selecting a single `Facility`."""
    id: ID!
  ): Facility
  facilityByRowId(rowId: Int!): Facility

  """Reads a single `FormJson` using its globally unique `ID`."""
  formJson(
    """The globally unique `ID` to be used in selecting a single `FormJson`."""
    id: ID!
  ): FormJson
  formJsonByRowId(rowId: Int!): FormJson

  """Reads a single `FormResult` using its globally unique `ID`."""
  formResult(
    """
    The globally unique `ID` to be used in selecting a single `FormResult`.
    """
    id: ID!
  ): FormResult
  formResultByFormIdAndApplicationIdAndVersionNumber(applicationId: Int!, formId: Int!, versionNumber: Int!): FormResult
  formResultByRowId(rowId: Int!): FormResult

  """Reads a single `FormResultStatus` using its globally unique `ID`."""
  formResultStatus(
    """
    The globally unique `ID` to be used in selecting a single `FormResultStatus`.
    """
    id: ID!
  ): FormResultStatus
  formResultStatusByRowId(rowId: Int!): FormResultStatus

  """Reads a single `Fuel` using its globally unique `ID`."""
  fuel(
    """The globally unique `ID` to be used in selecting a single `Fuel`."""
    id: ID!
  ): Fuel
  fuelByRowId(rowId: Int!): Fuel

  """Reads a single `Gas` using its globally unique `ID`."""
  gas(
    """The globally unique `ID` to be used in selecting a single `Gas`."""
    id: ID!
  ): Gas
  gasByRowId(rowId: Int!): Gas

  """Reads and enables pagination through a set of `CarbonTaxDatum`."""
  getCarbonTaxData(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CarbonTaxDatumFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int
  ): CarbonTaxDataConnection!

  """Reads and enables pagination through a set of `EmissionDatum`."""
  getSwrsEmissionData(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor
    facilityId: Int

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: EmissionDatumFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int
    reportingYear: Int
  ): EmissionDataConnection!
  getSwrsFacilityData(facilityId: Int, reportingYear: Int): FacilityDatum

  """Reads and enables pagination through a set of `FuelDatum`."""
  getSwrsFuelData(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor
    facilityId: Int

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: FuelDatumFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int
    reportingYear: Int
  ): FuelDataConnection!
  getSwrsOperatorContactData(facilityId: Int, reportingYear: Int): OperatorContactDatum
  getSwrsOrganisationData(facilityId: Int, reportingYear: Int): OrganisationDatum

  """
  The root query type must be a `Node` to work well with Relay 1 mutations. This just resolves to `query`.
  """
  id: ID!

  """Reads a single `LinkedProduct` using its globally unique `ID`."""
  linkedProduct(
    """
    The globally unique `ID` to be used in selecting a single `LinkedProduct`.
    """
    id: ID!
  ): LinkedProduct
  linkedProductByRowId(rowId: Int!): LinkedProduct

  """
  Returns the next reporting year to have an application window that opens.
  To get the currently opened reporting year (if any), use opened_reporting_year
  """
  nextReportingYear: ReportingYear

  """Fetches an object given its globally unique `ID`."""
  node(
    """The globally unique `ID`."""
    id: ID!
  ): Node

  """
  Returns the reporting year for which the application window is currently opened (if any)
  """
  openedReportingYear: ReportingYear

  """Reads a single `Organisation` using its globally unique `ID`."""
  organisation(
    """
    The globally unique `ID` to be used in selecting a single `Organisation`.
    """
    id: ID!
  ): Organisation
  organisationByRowId(rowId: Int!): Organisation

  """Reads a single `Product` using its globally unique `ID`."""
  product(
    """The globally unique `ID` to be used in selecting a single `Product`."""
    id: ID!
  ): Product
  productByRowId(rowId: Int!): Product

  """
  Exposes the root query type nested one level down. This is helpful for Relay 1
  which can only query top level fields if they are in a particular form.
  """
  query: Query!

  """Reads a single `ReportingYear` using its globally unique `ID`."""
  reportingYear(
    """
    The globally unique `ID` to be used in selecting a single `ReportingYear`.
    """
    id: ID!
  ): ReportingYear
  reportingYearByReportingYear(reportingYear: Int!): ReportingYear

  """Reads a single `ReviewComment` using its globally unique `ID`."""
  reviewComment(
    """
    The globally unique `ID` to be used in selecting a single `ReviewComment`.
    """
    id: ID!
  ): ReviewComment
  reviewCommentByRowId(rowId: Int!): ReviewComment

  """Reads and enables pagination through a set of `FacilitySearchResult`."""
  searchAllFacilities(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor
    direction: String

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: FacilitySearchResultFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int
    maxResultsPerPage: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int
    offsetValue: Int
    orderByField: String
    organisationRowId: String
    reportingYear: Int
    searchField: String
    searchValue: String
  ): FacilitySearchResultsConnection!

  """
  Search function returns data related to certification requests associated with the current user
  """
  searchCertificationRequests(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor
    direction: String

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: SearchCertificationUrlResultFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int
    maxResultsPerPage: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int
    offsetValue: Int
    orderByField: String
    searchField: [String]
    searchValue: [String]
  ): SearchCertificationUrlResultsConnection!
  session: JwtToken
}

"""
Table containing the reporting year and important dates related to the application
"""
type ReportingYear implements Node {
  """The date and time the CIIP applications close"""
  applicationCloseTime: Datetime!

  """The date and time the CIIP applications open"""
  applicationOpenTime: Datetime!

  """Reads and enables pagination through a set of `Application`."""
  applicationsByReportingYear(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ApplicationCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ApplicationFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Application`."""
    orderBy: [ApplicationsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ApplicationsConnection!

  """Reads and enables pagination through a set of `Benchmark`."""
  benchmarksByEndReportingYear(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: BenchmarkCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: BenchmarkFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Benchmark`."""
    orderBy: [BenchmarksOrderBy!] = [PRIMARY_KEY_ASC]
  ): BenchmarksConnection!

  """Reads and enables pagination through a set of `Benchmark`."""
  benchmarksByStartReportingYear(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: BenchmarkCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: BenchmarkFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Benchmark`."""
    orderBy: [BenchmarksOrderBy!] = [PRIMARY_KEY_ASC]
  ): BenchmarksConnection!

  """Reads and enables pagination through a set of `CiipUser`."""
  ciipUsersByBenchmarkEndReportingYearAndCreatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CiipUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CiipUserFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CiipUser`."""
    orderBy: [CiipUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): ReportingYearCiipUsersByBenchmarkEndReportingYearAndCreatedByManyToManyConnection!

  """Reads and enables pagination through a set of `CiipUser`."""
  ciipUsersByBenchmarkEndReportingYearAndDeletedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CiipUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CiipUserFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CiipUser`."""
    orderBy: [CiipUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): ReportingYearCiipUsersByBenchmarkEndReportingYearAndDeletedByManyToManyConnection!

  """Reads and enables pagination through a set of `CiipUser`."""
  ciipUsersByBenchmarkEndReportingYearAndUpdatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CiipUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CiipUserFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CiipUser`."""
    orderBy: [CiipUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): ReportingYearCiipUsersByBenchmarkEndReportingYearAndUpdatedByManyToManyConnection!

  """Reads and enables pagination through a set of `CiipUser`."""
  ciipUsersByBenchmarkStartReportingYearAndCreatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CiipUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CiipUserFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CiipUser`."""
    orderBy: [CiipUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): ReportingYearCiipUsersByBenchmarkStartReportingYearAndCreatedByManyToManyConnection!

  """Reads and enables pagination through a set of `CiipUser`."""
  ciipUsersByBenchmarkStartReportingYearAndDeletedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CiipUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CiipUserFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CiipUser`."""
    orderBy: [CiipUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): ReportingYearCiipUsersByBenchmarkStartReportingYearAndDeletedByManyToManyConnection!

  """Reads and enables pagination through a set of `CiipUser`."""
  ciipUsersByBenchmarkStartReportingYearAndUpdatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CiipUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CiipUserFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CiipUser`."""
    orderBy: [CiipUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): ReportingYearCiipUsersByBenchmarkStartReportingYearAndUpdatedByManyToManyConnection!

  """Reads and enables pagination through a set of `Facility`."""
  facilitiesByApplicationReportingYearAndFacilityId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: FacilityCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: FacilityFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Facility`."""
    orderBy: [FacilitiesOrderBy!] = [PRIMARY_KEY_ASC]
  ): ReportingYearFacilitiesByApplicationReportingYearAndFacilityIdManyToManyConnection!

  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  id: ID!

  """Reads and enables pagination through a set of `Product`."""
  productsByBenchmarkEndReportingYearAndProductId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProductCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ProductFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Product`."""
    orderBy: [ProductsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ReportingYearProductsByBenchmarkEndReportingYearAndProductIdManyToManyConnection!

  """Reads and enables pagination through a set of `Product`."""
  productsByBenchmarkStartReportingYearAndProductId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProductCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ProductFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Product`."""
    orderBy: [ProductsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ReportingYearProductsByBenchmarkStartReportingYearAndProductIdManyToManyConnection!

  """The date and time reporting period ends"""
  reportingPeriodEnd: Datetime!

  """The date and time reporting period starts"""
  reportingPeriodStart: Datetime!

  """The current reporting year"""
  reportingYear: Int!

  """Reads and enables pagination through a set of `ReportingYear`."""
  reportingYearsByBenchmarkEndReportingYearAndStartReportingYear(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ReportingYearCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ReportingYearFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `ReportingYear`."""
    orderBy: [ReportingYearsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ReportingYearReportingYearsByBenchmarkEndReportingYearAndStartReportingYearManyToManyConnection!

  """Reads and enables pagination through a set of `ReportingYear`."""
  reportingYearsByBenchmarkStartReportingYearAndEndReportingYear(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ReportingYearCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ReportingYearFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `ReportingYear`."""
    orderBy: [ReportingYearsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ReportingYearReportingYearsByBenchmarkStartReportingYearAndEndReportingYearManyToManyConnection!

  """The Industrial GHG (SWRS) Reporting deadline"""
  swrsDeadline: Datetime!
}

"""
A connection to a list of `CiipUser` values, with data from `Benchmark`.
"""
type ReportingYearCiipUsersByBenchmarkEndReportingYearAndCreatedByManyToManyConnection {
  """
  A list of edges which contains the `CiipUser`, info from the `Benchmark`, and the cursor to aid in pagination.
  """
  edges: [ReportingYearCiipUsersByBenchmarkEndReportingYearAndCreatedByManyToManyEdge!]!

  """A list of `CiipUser` objects."""
  nodes: [CiipUser]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CiipUser` you could get from the connection."""
  totalCount: Int!
}

"""A `CiipUser` edge in the connection, with data from `Benchmark`."""
type ReportingYearCiipUsersByBenchmarkEndReportingYearAndCreatedByManyToManyEdge {
  """Reads and enables pagination through a set of `Benchmark`."""
  benchmarksByCreatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: BenchmarkCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: BenchmarkFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Benchmark`."""
    orderBy: [BenchmarksOrderBy!] = [PRIMARY_KEY_ASC]
  ): BenchmarksConnection!

  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CiipUser` at the end of the edge."""
  node: CiipUser
}

"""
A connection to a list of `CiipUser` values, with data from `Benchmark`.
"""
type ReportingYearCiipUsersByBenchmarkEndReportingYearAndDeletedByManyToManyConnection {
  """
  A list of edges which contains the `CiipUser`, info from the `Benchmark`, and the cursor to aid in pagination.
  """
  edges: [ReportingYearCiipUsersByBenchmarkEndReportingYearAndDeletedByManyToManyEdge!]!

  """A list of `CiipUser` objects."""
  nodes: [CiipUser]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CiipUser` you could get from the connection."""
  totalCount: Int!
}

"""A `CiipUser` edge in the connection, with data from `Benchmark`."""
type ReportingYearCiipUsersByBenchmarkEndReportingYearAndDeletedByManyToManyEdge {
  """Reads and enables pagination through a set of `Benchmark`."""
  benchmarksByDeletedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: BenchmarkCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: BenchmarkFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Benchmark`."""
    orderBy: [BenchmarksOrderBy!] = [PRIMARY_KEY_ASC]
  ): BenchmarksConnection!

  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CiipUser` at the end of the edge."""
  node: CiipUser
}

"""
A connection to a list of `CiipUser` values, with data from `Benchmark`.
"""
type ReportingYearCiipUsersByBenchmarkEndReportingYearAndUpdatedByManyToManyConnection {
  """
  A list of edges which contains the `CiipUser`, info from the `Benchmark`, and the cursor to aid in pagination.
  """
  edges: [ReportingYearCiipUsersByBenchmarkEndReportingYearAndUpdatedByManyToManyEdge!]!

  """A list of `CiipUser` objects."""
  nodes: [CiipUser]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CiipUser` you could get from the connection."""
  totalCount: Int!
}

"""A `CiipUser` edge in the connection, with data from `Benchmark`."""
type ReportingYearCiipUsersByBenchmarkEndReportingYearAndUpdatedByManyToManyEdge {
  """Reads and enables pagination through a set of `Benchmark`."""
  benchmarksByUpdatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: BenchmarkCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: BenchmarkFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Benchmark`."""
    orderBy: [BenchmarksOrderBy!] = [PRIMARY_KEY_ASC]
  ): BenchmarksConnection!

  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CiipUser` at the end of the edge."""
  node: CiipUser
}

"""
A connection to a list of `CiipUser` values, with data from `Benchmark`.
"""
type ReportingYearCiipUsersByBenchmarkStartReportingYearAndCreatedByManyToManyConnection {
  """
  A list of edges which contains the `CiipUser`, info from the `Benchmark`, and the cursor to aid in pagination.
  """
  edges: [ReportingYearCiipUsersByBenchmarkStartReportingYearAndCreatedByManyToManyEdge!]!

  """A list of `CiipUser` objects."""
  nodes: [CiipUser]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CiipUser` you could get from the connection."""
  totalCount: Int!
}

"""A `CiipUser` edge in the connection, with data from `Benchmark`."""
type ReportingYearCiipUsersByBenchmarkStartReportingYearAndCreatedByManyToManyEdge {
  """Reads and enables pagination through a set of `Benchmark`."""
  benchmarksByCreatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: BenchmarkCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: BenchmarkFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Benchmark`."""
    orderBy: [BenchmarksOrderBy!] = [PRIMARY_KEY_ASC]
  ): BenchmarksConnection!

  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CiipUser` at the end of the edge."""
  node: CiipUser
}

"""
A connection to a list of `CiipUser` values, with data from `Benchmark`.
"""
type ReportingYearCiipUsersByBenchmarkStartReportingYearAndDeletedByManyToManyConnection {
  """
  A list of edges which contains the `CiipUser`, info from the `Benchmark`, and the cursor to aid in pagination.
  """
  edges: [ReportingYearCiipUsersByBenchmarkStartReportingYearAndDeletedByManyToManyEdge!]!

  """A list of `CiipUser` objects."""
  nodes: [CiipUser]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CiipUser` you could get from the connection."""
  totalCount: Int!
}

"""A `CiipUser` edge in the connection, with data from `Benchmark`."""
type ReportingYearCiipUsersByBenchmarkStartReportingYearAndDeletedByManyToManyEdge {
  """Reads and enables pagination through a set of `Benchmark`."""
  benchmarksByDeletedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: BenchmarkCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: BenchmarkFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Benchmark`."""
    orderBy: [BenchmarksOrderBy!] = [PRIMARY_KEY_ASC]
  ): BenchmarksConnection!

  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CiipUser` at the end of the edge."""
  node: CiipUser
}

"""
A connection to a list of `CiipUser` values, with data from `Benchmark`.
"""
type ReportingYearCiipUsersByBenchmarkStartReportingYearAndUpdatedByManyToManyConnection {
  """
  A list of edges which contains the `CiipUser`, info from the `Benchmark`, and the cursor to aid in pagination.
  """
  edges: [ReportingYearCiipUsersByBenchmarkStartReportingYearAndUpdatedByManyToManyEdge!]!

  """A list of `CiipUser` objects."""
  nodes: [CiipUser]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CiipUser` you could get from the connection."""
  totalCount: Int!
}

"""A `CiipUser` edge in the connection, with data from `Benchmark`."""
type ReportingYearCiipUsersByBenchmarkStartReportingYearAndUpdatedByManyToManyEdge {
  """Reads and enables pagination through a set of `Benchmark`."""
  benchmarksByUpdatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: BenchmarkCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: BenchmarkFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Benchmark`."""
    orderBy: [BenchmarksOrderBy!] = [PRIMARY_KEY_ASC]
  ): BenchmarksConnection!

  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CiipUser` at the end of the edge."""
  node: CiipUser
}

"""
A condition to be used against `ReportingYear` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input ReportingYearCondition {
  """Checks for equality with the object’s `applicationCloseTime` field."""
  applicationCloseTime: Datetime

  """Checks for equality with the object’s `applicationOpenTime` field."""
  applicationOpenTime: Datetime

  """Checks for equality with the object’s `reportingPeriodEnd` field."""
  reportingPeriodEnd: Datetime

  """Checks for equality with the object’s `reportingPeriodStart` field."""
  reportingPeriodStart: Datetime

  """Checks for equality with the object’s `reportingYear` field."""
  reportingYear: Int

  """Checks for equality with the object’s `swrsDeadline` field."""
  swrsDeadline: Datetime
}

"""
A connection to a list of `Facility` values, with data from `Application`.
"""
type ReportingYearFacilitiesByApplicationReportingYearAndFacilityIdManyToManyConnection {
  """
  A list of edges which contains the `Facility`, info from the `Application`, and the cursor to aid in pagination.
  """
  edges: [ReportingYearFacilitiesByApplicationReportingYearAndFacilityIdManyToManyEdge!]!

  """A list of `Facility` objects."""
  nodes: [Facility]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Facility` you could get from the connection."""
  totalCount: Int!
}

"""A `Facility` edge in the connection, with data from `Application`."""
type ReportingYearFacilitiesByApplicationReportingYearAndFacilityIdManyToManyEdge {
  """Reads and enables pagination through a set of `Application`."""
  applicationsByFacilityId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ApplicationCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ApplicationFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Application`."""
    orderBy: [ApplicationsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ApplicationsConnection!

  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Facility` at the end of the edge."""
  node: Facility
}

"""
A filter to be used against `ReportingYear` object types. All fields are combined with a logical ‘and.’
"""
input ReportingYearFilter {
  """Checks for all expressions in this list."""
  and: [ReportingYearFilter!]

  """Filter by the object’s `applicationCloseTime` field."""
  applicationCloseTime: DatetimeFilter

  """Filter by the object’s `applicationOpenTime` field."""
  applicationOpenTime: DatetimeFilter

  """Filter by the object’s `applicationsByReportingYear` relation."""
  applicationsByReportingYear: ReportingYearToManyApplicationFilter

  """Some related `applicationsByReportingYear` exist."""
  applicationsByReportingYearExist: Boolean

  """Filter by the object’s `benchmarksByEndReportingYear` relation."""
  benchmarksByEndReportingYear: ReportingYearToManyBenchmarkFilter

  """Some related `benchmarksByEndReportingYear` exist."""
  benchmarksByEndReportingYearExist: Boolean

  """Filter by the object’s `benchmarksByStartReportingYear` relation."""
  benchmarksByStartReportingYear: ReportingYearToManyBenchmarkFilter

  """Some related `benchmarksByStartReportingYear` exist."""
  benchmarksByStartReportingYearExist: Boolean

  """Negates the expression."""
  not: ReportingYearFilter

  """Checks for any expressions in this list."""
  or: [ReportingYearFilter!]

  """Filter by the object’s `reportingPeriodEnd` field."""
  reportingPeriodEnd: DatetimeFilter

  """Filter by the object’s `reportingPeriodStart` field."""
  reportingPeriodStart: DatetimeFilter

  """Filter by the object’s `reportingYear` field."""
  reportingYear: IntFilter

  """Filter by the object’s `swrsDeadline` field."""
  swrsDeadline: DatetimeFilter
}

"""An input for mutations affecting `ReportingYear`"""
input ReportingYearInput {
  """The date and time the CIIP applications close"""
  applicationCloseTime: Datetime!

  """The date and time the CIIP applications open"""
  applicationOpenTime: Datetime!

  """The date and time reporting period ends"""
  reportingPeriodEnd: Datetime!

  """The date and time reporting period starts"""
  reportingPeriodStart: Datetime!

  """The current reporting year"""
  reportingYear: Int!

  """The Industrial GHG (SWRS) Reporting deadline"""
  swrsDeadline: Datetime!
}

"""
Represents an update to a `ReportingYear`. Fields that are set will be updated.
"""
input ReportingYearPatch {
  """The date and time the CIIP applications close"""
  applicationCloseTime: Datetime

  """The date and time the CIIP applications open"""
  applicationOpenTime: Datetime

  """The date and time reporting period ends"""
  reportingPeriodEnd: Datetime

  """The date and time reporting period starts"""
  reportingPeriodStart: Datetime

  """The current reporting year"""
  reportingYear: Int

  """The Industrial GHG (SWRS) Reporting deadline"""
  swrsDeadline: Datetime
}

"""
A connection to a list of `Product` values, with data from `Benchmark`.
"""
type ReportingYearProductsByBenchmarkEndReportingYearAndProductIdManyToManyConnection {
  """
  A list of edges which contains the `Product`, info from the `Benchmark`, and the cursor to aid in pagination.
  """
  edges: [ReportingYearProductsByBenchmarkEndReportingYearAndProductIdManyToManyEdge!]!

  """A list of `Product` objects."""
  nodes: [Product]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Product` you could get from the connection."""
  totalCount: Int!
}

"""A `Product` edge in the connection, with data from `Benchmark`."""
type ReportingYearProductsByBenchmarkEndReportingYearAndProductIdManyToManyEdge {
  """Reads and enables pagination through a set of `Benchmark`."""
  benchmarksByProductId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: BenchmarkCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: BenchmarkFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Benchmark`."""
    orderBy: [BenchmarksOrderBy!] = [PRIMARY_KEY_ASC]
  ): BenchmarksConnection!

  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Product` at the end of the edge."""
  node: Product
}

"""
A connection to a list of `Product` values, with data from `Benchmark`.
"""
type ReportingYearProductsByBenchmarkStartReportingYearAndProductIdManyToManyConnection {
  """
  A list of edges which contains the `Product`, info from the `Benchmark`, and the cursor to aid in pagination.
  """
  edges: [ReportingYearProductsByBenchmarkStartReportingYearAndProductIdManyToManyEdge!]!

  """A list of `Product` objects."""
  nodes: [Product]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Product` you could get from the connection."""
  totalCount: Int!
}

"""A `Product` edge in the connection, with data from `Benchmark`."""
type ReportingYearProductsByBenchmarkStartReportingYearAndProductIdManyToManyEdge {
  """Reads and enables pagination through a set of `Benchmark`."""
  benchmarksByProductId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: BenchmarkCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: BenchmarkFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Benchmark`."""
    orderBy: [BenchmarksOrderBy!] = [PRIMARY_KEY_ASC]
  ): BenchmarksConnection!

  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Product` at the end of the edge."""
  node: Product
}

"""
A connection to a list of `ReportingYear` values, with data from `Benchmark`.
"""
type ReportingYearReportingYearsByBenchmarkEndReportingYearAndStartReportingYearManyToManyConnection {
  """
  A list of edges which contains the `ReportingYear`, info from the `Benchmark`, and the cursor to aid in pagination.
  """
  edges: [ReportingYearReportingYearsByBenchmarkEndReportingYearAndStartReportingYearManyToManyEdge!]!

  """A list of `ReportingYear` objects."""
  nodes: [ReportingYear]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `ReportingYear` you could get from the connection."""
  totalCount: Int!
}

"""A `ReportingYear` edge in the connection, with data from `Benchmark`."""
type ReportingYearReportingYearsByBenchmarkEndReportingYearAndStartReportingYearManyToManyEdge {
  """Reads and enables pagination through a set of `Benchmark`."""
  benchmarksByStartReportingYear(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: BenchmarkCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: BenchmarkFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Benchmark`."""
    orderBy: [BenchmarksOrderBy!] = [PRIMARY_KEY_ASC]
  ): BenchmarksConnection!

  """A cursor for use in pagination."""
  cursor: Cursor

  """The `ReportingYear` at the end of the edge."""
  node: ReportingYear
}

"""
A connection to a list of `ReportingYear` values, with data from `Benchmark`.
"""
type ReportingYearReportingYearsByBenchmarkStartReportingYearAndEndReportingYearManyToManyConnection {
  """
  A list of edges which contains the `ReportingYear`, info from the `Benchmark`, and the cursor to aid in pagination.
  """
  edges: [ReportingYearReportingYearsByBenchmarkStartReportingYearAndEndReportingYearManyToManyEdge!]!

  """A list of `ReportingYear` objects."""
  nodes: [ReportingYear]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `ReportingYear` you could get from the connection."""
  totalCount: Int!
}

"""A `ReportingYear` edge in the connection, with data from `Benchmark`."""
type ReportingYearReportingYearsByBenchmarkStartReportingYearAndEndReportingYearManyToManyEdge {
  """Reads and enables pagination through a set of `Benchmark`."""
  benchmarksByEndReportingYear(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: BenchmarkCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: BenchmarkFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Benchmark`."""
    orderBy: [BenchmarksOrderBy!] = [PRIMARY_KEY_ASC]
  ): BenchmarksConnection!

  """A cursor for use in pagination."""
  cursor: Cursor

  """The `ReportingYear` at the end of the edge."""
  node: ReportingYear
}

"""A connection to a list of `ReportingYear` values."""
type ReportingYearsConnection {
  """
  A list of edges which contains the `ReportingYear` and cursor to aid in pagination.
  """
  edges: [ReportingYearsEdge!]!

  """A list of `ReportingYear` objects."""
  nodes: [ReportingYear]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `ReportingYear` you could get from the connection."""
  totalCount: Int!
}

"""A `ReportingYear` edge in the connection."""
type ReportingYearsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `ReportingYear` at the end of the edge."""
  node: ReportingYear
}

"""Methods to use when ordering `ReportingYear`."""
enum ReportingYearsOrderBy {
  APPLICATION_CLOSE_TIME_ASC
  APPLICATION_CLOSE_TIME_DESC
  APPLICATION_OPEN_TIME_ASC
  APPLICATION_OPEN_TIME_DESC
  NATURAL
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  REPORTING_PERIOD_END_ASC
  REPORTING_PERIOD_END_DESC
  REPORTING_PERIOD_START_ASC
  REPORTING_PERIOD_START_DESC
  REPORTING_YEAR_ASC
  REPORTING_YEAR_DESC
  SWRS_DEADLINE_ASC
  SWRS_DEADLINE_DESC
}

"""
A filter to be used against many `Application` object types. All fields are combined with a logical ‘and.’
"""
input ReportingYearToManyApplicationFilter {
  """
  Every related `Application` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: ApplicationFilter

  """
  No related `Application` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: ApplicationFilter

  """
  Some related `Application` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: ApplicationFilter
}

"""
A filter to be used against many `Benchmark` object types. All fields are combined with a logical ‘and.’
"""
input ReportingYearToManyBenchmarkFilter {
  """
  Every related `Benchmark` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: BenchmarkFilter

  """
  No related `Benchmark` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: BenchmarkFilter

  """
  Some related `Benchmark` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: BenchmarkFilter
}

"""Table containing the information for a CIIP review_comment"""
type ReviewComment implements Node {
  """Reads a single `Application` that is related to this `ReviewComment`."""
  applicationByApplicationId: Application

  """Foreign Key to application"""
  applicationId: Int!

  """Reads a single `CiipUser` that is related to this `ReviewComment`."""
  ciipUserByCreatedBy: CiipUser

  """Reads a single `CiipUser` that is related to this `ReviewComment`."""
  ciipUserByDeletedBy: CiipUser

  """Reads a single `CiipUser` that is related to this `ReviewComment`."""
  ciipUserByUpdatedBy: CiipUser

  """The type of the review_comment (determines who can see the comment)"""
  commentType: ReviewCommentType

  """Creation date of row"""
  createdAt: Datetime!

  """Creator of row"""
  createdBy: Int

  """Date of deletion"""
  deletedAt: Datetime

  """The user who deleted the row"""
  deletedBy: Int

  """The comment on the review_comment"""
  description: String

  """Foreign key to form_json"""
  formId: Int!

  """Reads a single `FormJson` that is related to this `ReviewComment`."""
  formJsonByFormId: FormJson

  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  id: ID!

  """The resolved status on the review_comment"""
  resolved: Boolean

  """Unique ID for the review_comment"""
  rowId: Int!

  """Updated date of row"""
  updatedAt: Datetime!

  """Updator of row"""
  updatedBy: Int
}

"""
A condition to be used against `ReviewComment` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input ReviewCommentCondition {
  """Checks for equality with the object’s `applicationId` field."""
  applicationId: Int

  """Checks for equality with the object’s `commentType` field."""
  commentType: ReviewCommentType

  """Checks for equality with the object’s `createdAt` field."""
  createdAt: Datetime

  """Checks for equality with the object’s `createdBy` field."""
  createdBy: Int

  """Checks for equality with the object’s `deletedAt` field."""
  deletedAt: Datetime

  """Checks for equality with the object’s `deletedBy` field."""
  deletedBy: Int

  """Checks for equality with the object’s `description` field."""
  description: String

  """Checks for equality with the object’s `formId` field."""
  formId: Int

  """Checks for equality with the object’s `resolved` field."""
  resolved: Boolean

  """Checks for equality with the object’s `rowId` field."""
  rowId: Int

  """Checks for equality with the object’s `updatedAt` field."""
  updatedAt: Datetime

  """Checks for equality with the object’s `updatedBy` field."""
  updatedBy: Int
}

"""
A filter to be used against `ReviewComment` object types. All fields are combined with a logical ‘and.’
"""
input ReviewCommentFilter {
  """Checks for all expressions in this list."""
  and: [ReviewCommentFilter!]

  """Filter by the object’s `applicationByApplicationId` relation."""
  applicationByApplicationId: ApplicationFilter

  """Filter by the object’s `applicationId` field."""
  applicationId: IntFilter

  """Filter by the object’s `ciipUserByCreatedBy` relation."""
  ciipUserByCreatedBy: CiipUserFilter

  """A related `ciipUserByCreatedBy` exists."""
  ciipUserByCreatedByExists: Boolean

  """Filter by the object’s `ciipUserByDeletedBy` relation."""
  ciipUserByDeletedBy: CiipUserFilter

  """A related `ciipUserByDeletedBy` exists."""
  ciipUserByDeletedByExists: Boolean

  """Filter by the object’s `ciipUserByUpdatedBy` relation."""
  ciipUserByUpdatedBy: CiipUserFilter

  """A related `ciipUserByUpdatedBy` exists."""
  ciipUserByUpdatedByExists: Boolean

  """Filter by the object’s `commentType` field."""
  commentType: ReviewCommentTypeFilter

  """Filter by the object’s `createdAt` field."""
  createdAt: DatetimeFilter

  """Filter by the object’s `createdBy` field."""
  createdBy: IntFilter

  """Filter by the object’s `deletedAt` field."""
  deletedAt: DatetimeFilter

  """Filter by the object’s `deletedBy` field."""
  deletedBy: IntFilter

  """Filter by the object’s `description` field."""
  description: StringFilter

  """Filter by the object’s `formId` field."""
  formId: IntFilter

  """Filter by the object’s `formJsonByFormId` relation."""
  formJsonByFormId: FormJsonFilter

  """Negates the expression."""
  not: ReviewCommentFilter

  """Checks for any expressions in this list."""
  or: [ReviewCommentFilter!]

  """Filter by the object’s `resolved` field."""
  resolved: BooleanFilter

  """Filter by the object’s `rowId` field."""
  rowId: IntFilter

  """Filter by the object’s `updatedAt` field."""
  updatedAt: DatetimeFilter

  """Filter by the object’s `updatedBy` field."""
  updatedBy: IntFilter
}

"""An input for mutations affecting `ReviewComment`"""
input ReviewCommentInput {
  """Foreign Key to application"""
  applicationId: Int!

  """The type of the review_comment (determines who can see the comment)"""
  commentType: ReviewCommentType

  """Creation date of row"""
  createdAt: Datetime

  """Creator of row"""
  createdBy: Int

  """Date of deletion"""
  deletedAt: Datetime

  """The user who deleted the row"""
  deletedBy: Int

  """The comment on the review_comment"""
  description: String

  """Foreign key to form_json"""
  formId: Int!

  """The resolved status on the review_comment"""
  resolved: Boolean

  """Updated date of row"""
  updatedAt: Datetime

  """Updator of row"""
  updatedBy: Int
}

"""
Represents an update to a `ReviewComment`. Fields that are set will be updated.
"""
input ReviewCommentPatch {
  """Foreign Key to application"""
  applicationId: Int

  """The type of the review_comment (determines who can see the comment)"""
  commentType: ReviewCommentType

  """Creation date of row"""
  createdAt: Datetime

  """Creator of row"""
  createdBy: Int

  """Date of deletion"""
  deletedAt: Datetime

  """The user who deleted the row"""
  deletedBy: Int

  """The comment on the review_comment"""
  description: String

  """Foreign key to form_json"""
  formId: Int

  """The resolved status on the review_comment"""
  resolved: Boolean

  """Updated date of row"""
  updatedAt: Datetime

  """Updator of row"""
  updatedBy: Int
}

"""A connection to a list of `ReviewComment` values."""
type ReviewCommentsConnection {
  """
  A list of edges which contains the `ReviewComment` and cursor to aid in pagination.
  """
  edges: [ReviewCommentsEdge!]!

  """A list of `ReviewComment` objects."""
  nodes: [ReviewComment]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `ReviewComment` you could get from the connection."""
  totalCount: Int!
}

"""A `ReviewComment` edge in the connection."""
type ReviewCommentsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `ReviewComment` at the end of the edge."""
  node: ReviewComment
}

"""Methods to use when ordering `ReviewComment`."""
enum ReviewCommentsOrderBy {
  APPLICATION_ID_ASC
  APPLICATION_ID_DESC
  COMMENT_TYPE_ASC
  COMMENT_TYPE_DESC
  CREATED_AT_ASC
  CREATED_AT_DESC
  CREATED_BY_ASC
  CREATED_BY_DESC
  DELETED_AT_ASC
  DELETED_AT_DESC
  DELETED_BY_ASC
  DELETED_BY_DESC
  DESCRIPTION_ASC
  DESCRIPTION_DESC
  FORM_ID_ASC
  FORM_ID_DESC
  ID_ASC
  ID_DESC
  NATURAL
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  RESOLVED_ASC
  RESOLVED_DESC
  UPDATED_AT_ASC
  UPDATED_AT_DESC
  UPDATED_BY_ASC
  UPDATED_BY_DESC
}

enum ReviewCommentType {
  APPROVAL
  GENERAL
  INTERNAL
  REQUESTED_CHANGE
}

"""
A filter to be used against ReviewCommentType fields. All fields are combined with a logical ‘and.’
"""
input ReviewCommentTypeFilter {
  """
  Not equal to the specified value, treating null like an ordinary value.
  """
  distinctFrom: ReviewCommentType

  """Equal to the specified value."""
  equalTo: ReviewCommentType

  """Greater than the specified value."""
  greaterThan: ReviewCommentType

  """Greater than or equal to the specified value."""
  greaterThanOrEqualTo: ReviewCommentType

  """Included in the specified list."""
  in: [ReviewCommentType!]

  """
  Is null (if `true` is specified) or is not null (if `false` is specified).
  """
  isNull: Boolean

  """Less than the specified value."""
  lessThan: ReviewCommentType

  """Less than or equal to the specified value."""
  lessThanOrEqualTo: ReviewCommentType

  """Equal to the specified value, treating null like an ordinary value."""
  notDistinctFrom: ReviewCommentType

  """Not equal to the specified value."""
  notEqualTo: ReviewCommentType

  """Not included in the specified list."""
  notIn: [ReviewCommentType!]
}

type SearchCertificationUrlResult {
  """
  Reads a single `Application` that is related to this `SearchCertificationUrlResult`.
  """
  applicationByApplicationId: Application
  applicationId: Int
  applicationRevisionStatus: CiipApplicationRevisionStatus

  """
  Reads a single `CertificationUrl` that is related to this `SearchCertificationUrlResult`.
  """
  certificationUrlByCertificationUrlId: CertificationUrl
  certificationUrlId: String
  certifiedAt: Datetime
  certifiedByFirstName: String
  certifiedByLastName: String
  certifierEmail: String
  facilityName: String
  operatorName: String
  rowId: BigInt
  totalRequestCount: Int
  versionNumber: Int
}

"""
A filter to be used against `SearchCertificationUrlResult` object types. All fields are combined with a logical ‘and.’
"""
input SearchCertificationUrlResultFilter {
  """Checks for all expressions in this list."""
  and: [SearchCertificationUrlResultFilter!]

  """Filter by the object’s `applicationByApplicationId` relation."""
  applicationByApplicationId: ApplicationFilter

  """A related `applicationByApplicationId` exists."""
  applicationByApplicationIdExists: Boolean

  """Filter by the object’s `applicationId` field."""
  applicationId: IntFilter

  """Filter by the object’s `applicationRevisionStatus` field."""
  applicationRevisionStatus: CiipApplicationRevisionStatusFilter

  """
  Filter by the object’s `certificationUrlByCertificationUrlId` relation.
  """
  certificationUrlByCertificationUrlId: CertificationUrlFilter

  """A related `certificationUrlByCertificationUrlId` exists."""
  certificationUrlByCertificationUrlIdExists: Boolean

  """Filter by the object’s `certificationUrlId` field."""
  certificationUrlId: StringFilter

  """Filter by the object’s `certifiedAt` field."""
  certifiedAt: DatetimeFilter

  """Filter by the object’s `certifiedByFirstName` field."""
  certifiedByFirstName: StringFilter

  """Filter by the object’s `certifiedByLastName` field."""
  certifiedByLastName: StringFilter

  """Filter by the object’s `certifierEmail` field."""
  certifierEmail: StringFilter

  """Filter by the object’s `facilityName` field."""
  facilityName: StringFilter

  """Negates the expression."""
  not: SearchCertificationUrlResultFilter

  """Filter by the object’s `operatorName` field."""
  operatorName: StringFilter

  """Checks for any expressions in this list."""
  or: [SearchCertificationUrlResultFilter!]

  """Filter by the object’s `rowId` field."""
  rowId: BigIntFilter

  """Filter by the object’s `totalRequestCount` field."""
  totalRequestCount: IntFilter

  """Filter by the object’s `versionNumber` field."""
  versionNumber: IntFilter
}

"""A connection to a list of `SearchCertificationUrlResult` values."""
type SearchCertificationUrlResultsConnection {
  """
  A list of edges which contains the `SearchCertificationUrlResult` and cursor to aid in pagination.
  """
  edges: [SearchCertificationUrlResultsEdge!]!

  """A list of `SearchCertificationUrlResult` objects."""
  nodes: [SearchCertificationUrlResult]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `SearchCertificationUrlResult` you could get from the connection.
  """
  totalCount: Int!
}

"""A `SearchCertificationUrlResult` edge in the connection."""
type SearchCertificationUrlResultsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `SearchCertificationUrlResult` at the end of the edge."""
  node: SearchCertificationUrlResult
}

"""
A filter to be used against String fields. All fields are combined with a logical ‘and.’
"""
input StringFilter {
  """
  Not equal to the specified value, treating null like an ordinary value.
  """
  distinctFrom: String

  """
  Not equal to the specified value, treating null like an ordinary value (case-insensitive).
  """
  distinctFromInsensitive: String

  """Ends with the specified string (case-sensitive)."""
  endsWith: String

  """Ends with the specified string (case-insensitive)."""
  endsWithInsensitive: String

  """Equal to the specified value."""
  equalTo: String

  """Equal to the specified value (case-insensitive)."""
  equalToInsensitive: String

  """Greater than the specified value."""
  greaterThan: String

  """Greater than the specified value (case-insensitive)."""
  greaterThanInsensitive: String

  """Greater than or equal to the specified value."""
  greaterThanOrEqualTo: String

  """Greater than or equal to the specified value (case-insensitive)."""
  greaterThanOrEqualToInsensitive: String

  """Included in the specified list."""
  in: [String!]

  """Contains the specified string (case-sensitive)."""
  includes: String

  """Contains the specified string (case-insensitive)."""
  includesInsensitive: String

  """Included in the specified list (case-insensitive)."""
  inInsensitive: [String!]

  """
  Is null (if `true` is specified) or is not null (if `false` is specified).
  """
  isNull: Boolean

  """Less than the specified value."""
  lessThan: String

  """Less than the specified value (case-insensitive)."""
  lessThanInsensitive: String

  """Less than or equal to the specified value."""
  lessThanOrEqualTo: String

  """Less than or equal to the specified value (case-insensitive)."""
  lessThanOrEqualToInsensitive: String

  """
  Matches the specified pattern (case-sensitive). An underscore (_) matches any
  single character; a percent sign (%) matches any sequence of zero or more characters.
  """
  like: String

  """
  Matches the specified pattern (case-insensitive). An underscore (_) matches
  any single character; a percent sign (%) matches any sequence of zero or more characters.
  """
  likeInsensitive: String

  """Equal to the specified value, treating null like an ordinary value."""
  notDistinctFrom: String

  """
  Equal to the specified value, treating null like an ordinary value (case-insensitive).
  """
  notDistinctFromInsensitive: String

  """Does not end with the specified string (case-sensitive)."""
  notEndsWith: String

  """Does not end with the specified string (case-insensitive)."""
  notEndsWithInsensitive: String

  """Not equal to the specified value."""
  notEqualTo: String

  """Not equal to the specified value (case-insensitive)."""
  notEqualToInsensitive: String

  """Not included in the specified list."""
  notIn: [String!]

  """Does not contain the specified string (case-sensitive)."""
  notIncludes: String

  """Does not contain the specified string (case-insensitive)."""
  notIncludesInsensitive: String

  """Not included in the specified list (case-insensitive)."""
  notInInsensitive: [String!]

  """
  Does not match the specified pattern (case-sensitive). An underscore (_)
  matches any single character; a percent sign (%) matches any sequence of zero
  or more characters.
  """
  notLike: String

  """
  Does not match the specified pattern (case-insensitive). An underscore (_)
  matches any single character; a percent sign (%) matches any sequence of zero
  or more characters.
  """
  notLikeInsensitive: String

  """Does not start with the specified string (case-sensitive)."""
  notStartsWith: String

  """Does not start with the specified string (case-insensitive)."""
  notStartsWithInsensitive: String

  """Starts with the specified string (case-sensitive)."""
  startsWith: String

  """Starts with the specified string (case-insensitive)."""
  startsWithInsensitive: String
}

"""
A filter to be used against String List fields. All fields are combined with a logical ‘and.’
"""
input StringListFilter {
  """Any array item is equal to the specified value."""
  anyEqualTo: String

  """Any array item is greater than the specified value."""
  anyGreaterThan: String

  """Any array item is greater than or equal to the specified value."""
  anyGreaterThanOrEqualTo: String

  """Any array item is less than the specified value."""
  anyLessThan: String

  """Any array item is less than or equal to the specified value."""
  anyLessThanOrEqualTo: String

  """Any array item is not equal to the specified value."""
  anyNotEqualTo: String

  """Contained by the specified list of values."""
  containedBy: [String]

  """Contains the specified list of values."""
  contains: [String]

  """
  Not equal to the specified value, treating null like an ordinary value.
  """
  distinctFrom: [String]

  """Equal to the specified value."""
  equalTo: [String]

  """Greater than the specified value."""
  greaterThan: [String]

  """Greater than or equal to the specified value."""
  greaterThanOrEqualTo: [String]

  """
  Is null (if `true` is specified) or is not null (if `false` is specified).
  """
  isNull: Boolean

  """Less than the specified value."""
  lessThan: [String]

  """Less than or equal to the specified value."""
  lessThanOrEqualTo: [String]

  """Equal to the specified value, treating null like an ordinary value."""
  notDistinctFrom: [String]

  """Not equal to the specified value."""
  notEqualTo: [String]

  """Overlaps the specified list of values."""
  overlaps: [String]
}

"""All input for the `updateApplicationByRowId` mutation."""
input UpdateApplicationByRowIdInput {
  """
  An object where the defined keys will be set on the `Application` being updated.
  """
  applicationPatch: ApplicationPatch!

  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The application id used for reference and join"""
  rowId: Int!
}

"""All input for the `updateApplication` mutation."""
input UpdateApplicationInput {
  """
  An object where the defined keys will be set on the `Application` being updated.
  """
  applicationPatch: ApplicationPatch!

  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Application` to be updated.
  """
  id: ID!
}

"""The output of our update `Application` mutation."""
type UpdateApplicationPayload {
  """The `Application` that was updated by this mutation."""
  application: Application

  """An edge for our `Application`. May be used by Relay 1."""
  applicationEdge(
    """The method to use when ordering `Application`."""
    orderBy: [ApplicationsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ApplicationsEdge

  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """Reads a single `Facility` that is related to this `Application`."""
  facilityByFacilityId: Facility

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `ReportingYear` that is related to this `Application`."""
  reportingYearByReportingYear: ReportingYear
}

"""
All input for the `updateApplicationRevisionByApplicationIdAndVersionNumber` mutation.
"""
input UpdateApplicationRevisionByApplicationIdAndVersionNumberInput {
  """
  The foreign key to the ciip application, also part of the composite primary key with version number
  """
  applicationId: Int!

  """
  An object where the defined keys will be set on the `ApplicationRevision` being updated.
  """
  applicationRevisionPatch: ApplicationRevisionPatch!

  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The version number of the revision, also part of the composite primary key with application_id
  """
  versionNumber: Int!
}

"""All input for the `updateApplicationRevision` mutation."""
input UpdateApplicationRevisionInput {
  """
  An object where the defined keys will be set on the `ApplicationRevision` being updated.
  """
  applicationRevisionPatch: ApplicationRevisionPatch!

  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `ApplicationRevision` to be updated.
  """
  id: ID!
}

"""The output of our update `ApplicationRevision` mutation."""
type UpdateApplicationRevisionPayload {
  """
  Reads a single `Application` that is related to this `ApplicationRevision`.
  """
  applicationByApplicationId: Application

  """The `ApplicationRevision` that was updated by this mutation."""
  applicationRevision: ApplicationRevision

  """An edge for our `ApplicationRevision`. May be used by Relay 1."""
  applicationRevisionEdge(
    """The method to use when ordering `ApplicationRevision`."""
    orderBy: [ApplicationRevisionsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ApplicationRevisionsEdge

  """
  Reads a single `CiipUser` that is related to this `ApplicationRevision`.
  """
  ciipUserByCreatedBy: CiipUser

  """
  Reads a single `CiipUser` that is related to this `ApplicationRevision`.
  """
  ciipUserByDeletedBy: CiipUser

  """
  Reads a single `CiipUser` that is related to this `ApplicationRevision`.
  """
  ciipUserByUpdatedBy: CiipUser

  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `updateApplicationRevisionStatusByRowId` mutation."""
input UpdateApplicationRevisionStatusByRowIdInput {
  """
  An object where the defined keys will be set on the `ApplicationRevisionStatus` being updated.
  """
  applicationRevisionStatusPatch: ApplicationRevisionStatusPatch!

  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The id used for reference and join"""
  rowId: Int!
}

"""All input for the `updateApplicationRevisionStatus` mutation."""
input UpdateApplicationRevisionStatusInput {
  """
  An object where the defined keys will be set on the `ApplicationRevisionStatus` being updated.
  """
  applicationRevisionStatusPatch: ApplicationRevisionStatusPatch!

  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `ApplicationRevisionStatus` to be updated.
  """
  id: ID!
}

"""The output of our update `ApplicationRevisionStatus` mutation."""
type UpdateApplicationRevisionStatusPayload {
  """
  Reads a single `ApplicationRevision` that is related to this `ApplicationRevisionStatus`.
  """
  applicationRevisionByApplicationIdAndVersionNumber: ApplicationRevision

  """The `ApplicationRevisionStatus` that was updated by this mutation."""
  applicationRevisionStatus: ApplicationRevisionStatus

  """An edge for our `ApplicationRevisionStatus`. May be used by Relay 1."""
  applicationRevisionStatusEdge(
    """The method to use when ordering `ApplicationRevisionStatus`."""
    orderBy: [ApplicationRevisionStatusesOrderBy!] = [PRIMARY_KEY_ASC]
  ): ApplicationRevisionStatusesEdge

  """
  Reads a single `CiipUser` that is related to this `ApplicationRevisionStatus`.
  """
  ciipUserByCreatedBy: CiipUser

  """
  Reads a single `CiipUser` that is related to this `ApplicationRevisionStatus`.
  """
  ciipUserByDeletedBy: CiipUser

  """
  Reads a single `CiipUser` that is related to this `ApplicationRevisionStatus`.
  """
  ciipUserByUpdatedBy: CiipUser

  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `updateBenchmarkByRowId` mutation."""
input UpdateBenchmarkByRowIdInput {
  """
  An object where the defined keys will be set on the `Benchmark` being updated.
  """
  benchmarkPatch: BenchmarkPatch!

  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """Unique ID for the benchmark"""
  rowId: Int!
}

"""All input for the `updateBenchmark` mutation."""
input UpdateBenchmarkInput {
  """
  An object where the defined keys will be set on the `Benchmark` being updated.
  """
  benchmarkPatch: BenchmarkPatch!

  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Benchmark` to be updated.
  """
  id: ID!
}

"""The output of our update `Benchmark` mutation."""
type UpdateBenchmarkPayload {
  """The `Benchmark` that was updated by this mutation."""
  benchmark: Benchmark

  """An edge for our `Benchmark`. May be used by Relay 1."""
  benchmarkEdge(
    """The method to use when ordering `Benchmark`."""
    orderBy: [BenchmarksOrderBy!] = [PRIMARY_KEY_ASC]
  ): BenchmarksEdge

  """Reads a single `CiipUser` that is related to this `Benchmark`."""
  ciipUserByCreatedBy: CiipUser

  """Reads a single `CiipUser` that is related to this `Benchmark`."""
  ciipUserByDeletedBy: CiipUser

  """Reads a single `CiipUser` that is related to this `Benchmark`."""
  ciipUserByUpdatedBy: CiipUser

  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """Reads a single `Product` that is related to this `Benchmark`."""
  productByProductId: Product

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `ReportingYear` that is related to this `Benchmark`."""
  reportingYearByEndReportingYear: ReportingYear

  """Reads a single `ReportingYear` that is related to this `Benchmark`."""
  reportingYearByStartReportingYear: ReportingYear
}

"""All input for the `updateCertificationUrlByRowId` mutation."""
input UpdateCertificationUrlByRowIdInput {
  """
  An object where the defined keys will be set on the `CertificationUrl` being updated.
  """
  certificationUrlPatch: CertificationUrlPatch!

  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """Unique ID for the certification_url"""
  rowId: String!
}

"""All input for the `updateCertificationUrl` mutation."""
input UpdateCertificationUrlInput {
  """
  An object where the defined keys will be set on the `CertificationUrl` being updated.
  """
  certificationUrlPatch: CertificationUrlPatch!

  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `CertificationUrl` to be updated.
  """
  id: ID!
}

"""The output of our update `CertificationUrl` mutation."""
type UpdateCertificationUrlPayload {
  """
  Reads a single `Application` that is related to this `CertificationUrl`.
  """
  applicationByApplicationId: Application

  """
  Reads a single `ApplicationRevision` that is related to this `CertificationUrl`.
  """
  applicationRevisionByApplicationIdAndVersionNumber: ApplicationRevision

  """The `CertificationUrl` that was updated by this mutation."""
  certificationUrl: CertificationUrl

  """An edge for our `CertificationUrl`. May be used by Relay 1."""
  certificationUrlEdge(
    """The method to use when ordering `CertificationUrl`."""
    orderBy: [CertificationUrlsOrderBy!] = [PRIMARY_KEY_ASC]
  ): CertificationUrlsEdge

  """Reads a single `CiipUser` that is related to this `CertificationUrl`."""
  ciipUserByCertifiedBy: CiipUser

  """Reads a single `CiipUser` that is related to this `CertificationUrl`."""
  ciipUserByCreatedBy: CiipUser

  """Reads a single `CiipUser` that is related to this `CertificationUrl`."""
  ciipUserByDeletedBy: CiipUser

  """Reads a single `CiipUser` that is related to this `CertificationUrl`."""
  ciipUserByUpdatedBy: CiipUser

  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `updateCiipApplicationWizardByFormId` mutation."""
input UpdateCiipApplicationWizardByFormIdInput {
  """
  An object where the defined keys will be set on the `CiipApplicationWizard` being updated.
  """
  ciipApplicationWizardPatch: CiipApplicationWizardPatch!

  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The id of the form"""
  formId: Int!
}

"""All input for the `updateCiipApplicationWizard` mutation."""
input UpdateCiipApplicationWizardInput {
  """
  An object where the defined keys will be set on the `CiipApplicationWizard` being updated.
  """
  ciipApplicationWizardPatch: CiipApplicationWizardPatch!

  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `CiipApplicationWizard` to be updated.
  """
  id: ID!
}

"""The output of our update `CiipApplicationWizard` mutation."""
type UpdateCiipApplicationWizardPayload {
  """The `CiipApplicationWizard` that was updated by this mutation."""
  ciipApplicationWizard: CiipApplicationWizard

  """An edge for our `CiipApplicationWizard`. May be used by Relay 1."""
  ciipApplicationWizardEdge(
    """The method to use when ordering `CiipApplicationWizard`."""
    orderBy: [CiipApplicationWizardsOrderBy!] = [PRIMARY_KEY_ASC]
  ): CiipApplicationWizardsEdge

  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Reads a single `FormJson` that is related to this `CiipApplicationWizard`.
  """
  formJsonByFormId: FormJson

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `updateCiipUserByRowId` mutation."""
input UpdateCiipUserByRowIdInput {
  """
  An object where the defined keys will be set on the `CiipUser` being updated.
  """
  ciipUserPatch: CiipUserPatch!

  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """Unique ID for the user"""
  rowId: Int!
}

"""All input for the `updateCiipUser` mutation."""
input UpdateCiipUserInput {
  """
  An object where the defined keys will be set on the `CiipUser` being updated.
  """
  ciipUserPatch: CiipUserPatch!

  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `CiipUser` to be updated.
  """
  id: ID!
}

"""All input for the `updateCiipUserOrganisationByRowId` mutation."""
input UpdateCiipUserOrganisationByRowIdInput {
  """
  An object where the defined keys will be set on the `CiipUserOrganisation` being updated.
  """
  ciipUserOrganisationPatch: CiipUserOrganisationPatch!

  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """ciip_user_organisation primary key"""
  rowId: Int!
}

"""All input for the `updateCiipUserOrganisation` mutation."""
input UpdateCiipUserOrganisationInput {
  """
  An object where the defined keys will be set on the `CiipUserOrganisation` being updated.
  """
  ciipUserOrganisationPatch: CiipUserOrganisationPatch!

  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `CiipUserOrganisation` to be updated.
  """
  id: ID!
}

"""The output of our update `CiipUserOrganisation` mutation."""
type UpdateCiipUserOrganisationPayload {
  """
  Reads a single `CiipUser` that is related to this `CiipUserOrganisation`.
  """
  ciipUserByUserId: CiipUser

  """The `CiipUserOrganisation` that was updated by this mutation."""
  ciipUserOrganisation: CiipUserOrganisation

  """An edge for our `CiipUserOrganisation`. May be used by Relay 1."""
  ciipUserOrganisationEdge(
    """The method to use when ordering `CiipUserOrganisation`."""
    orderBy: [CiipUserOrganisationsOrderBy!] = [PRIMARY_KEY_ASC]
  ): CiipUserOrganisationsEdge

  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Reads a single `Organisation` that is related to this `CiipUserOrganisation`.
  """
  organisationByOrganisationId: Organisation

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""The output of our update `CiipUser` mutation."""
type UpdateCiipUserPayload {
  """The `CiipUser` that was updated by this mutation."""
  ciipUser: CiipUser

  """Reads a single `CiipUser` that is related to this `CiipUser`."""
  ciipUserByCreatedBy: CiipUser

  """Reads a single `CiipUser` that is related to this `CiipUser`."""
  ciipUserByDeletedBy: CiipUser

  """Reads a single `CiipUser` that is related to this `CiipUser`."""
  ciipUserByUpdatedBy: CiipUser

  """An edge for our `CiipUser`. May be used by Relay 1."""
  ciipUserEdge(
    """The method to use when ordering `CiipUser`."""
    orderBy: [CiipUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): CiipUsersEdge

  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `updateEmissionCategoryByRowId` mutation."""
input UpdateEmissionCategoryByRowIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `EmissionCategory` being updated.
  """
  emissionCategoryPatch: EmissionCategoryPatch!

  """Unique ID for the emission_category"""
  rowId: Int!
}

"""All input for the `updateEmissionCategoryGasByRowId` mutation."""
input UpdateEmissionCategoryGasByRowIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `EmissionCategoryGas` being updated.
  """
  emissionCategoryGasPatch: EmissionCategoryGasPatch!

  """Unique ID for the emission_category_gas"""
  rowId: Int!
}

"""All input for the `updateEmissionCategoryGas` mutation."""
input UpdateEmissionCategoryGasInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `EmissionCategoryGas` being updated.
  """
  emissionCategoryGasPatch: EmissionCategoryGasPatch!

  """
  The globally unique `ID` which will identify a single `EmissionCategoryGas` to be updated.
  """
  id: ID!
}

"""The output of our update `EmissionCategoryGas` mutation."""
type UpdateEmissionCategoryGasPayload {
  """
  Reads a single `CiipUser` that is related to this `EmissionCategoryGas`.
  """
  ciipUserByCreatedBy: CiipUser

  """
  Reads a single `CiipUser` that is related to this `EmissionCategoryGas`.
  """
  ciipUserByDeletedBy: CiipUser

  """
  Reads a single `CiipUser` that is related to this `EmissionCategoryGas`.
  """
  ciipUserByUpdatedBy: CiipUser

  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Reads a single `EmissionCategory` that is related to this `EmissionCategoryGas`.
  """
  emissionCategoryByEmissionCategoryId: EmissionCategory

  """The `EmissionCategoryGas` that was updated by this mutation."""
  emissionCategoryGas: EmissionCategoryGas

  """An edge for our `EmissionCategoryGas`. May be used by Relay 1."""
  emissionCategoryGasEdge(
    """The method to use when ordering `EmissionCategoryGas`."""
    orderBy: [EmissionCategoryGasesOrderBy!] = [PRIMARY_KEY_ASC]
  ): EmissionCategoryGasesEdge

  """Reads a single `Gas` that is related to this `EmissionCategoryGas`."""
  gasByGasId: Gas

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `updateEmissionCategory` mutation."""
input UpdateEmissionCategoryInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `EmissionCategory` being updated.
  """
  emissionCategoryPatch: EmissionCategoryPatch!

  """
  The globally unique `ID` which will identify a single `EmissionCategory` to be updated.
  """
  id: ID!
}

"""The output of our update `EmissionCategory` mutation."""
type UpdateEmissionCategoryPayload {
  """Reads a single `CiipUser` that is related to this `EmissionCategory`."""
  ciipUserByCreatedBy: CiipUser

  """Reads a single `CiipUser` that is related to this `EmissionCategory`."""
  ciipUserByDeletedBy: CiipUser

  """Reads a single `CiipUser` that is related to this `EmissionCategory`."""
  ciipUserByUpdatedBy: CiipUser

  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `EmissionCategory` that was updated by this mutation."""
  emissionCategory: EmissionCategory

  """An edge for our `EmissionCategory`. May be used by Relay 1."""
  emissionCategoryEdge(
    """The method to use when ordering `EmissionCategory`."""
    orderBy: [EmissionCategoriesOrderBy!] = [PRIMARY_KEY_ASC]
  ): EmissionCategoriesEdge

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `updateFacilityByRowId` mutation."""
input UpdateFacilityByRowIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `Facility` being updated.
  """
  facilityPatch: FacilityPatch!

  """unique id for the facility"""
  rowId: Int!
}

"""All input for the `updateFacility` mutation."""
input UpdateFacilityInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `Facility` being updated.
  """
  facilityPatch: FacilityPatch!

  """
  The globally unique `ID` which will identify a single `Facility` to be updated.
  """
  id: ID!
}

"""The output of our update `Facility` mutation."""
type UpdateFacilityPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Facility` that was updated by this mutation."""
  facility: Facility

  """An edge for our `Facility`. May be used by Relay 1."""
  facilityEdge(
    """The method to use when ordering `Facility`."""
    orderBy: [FacilitiesOrderBy!] = [PRIMARY_KEY_ASC]
  ): FacilitiesEdge

  """Reads a single `Organisation` that is related to this `Facility`."""
  organisationByOrganisationId: Organisation

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `updateFormJsonByRowId` mutation."""
input UpdateFormJsonByRowIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `FormJson` being updated.
  """
  formJsonPatch: FormJsonPatch!

  """Unique ID for the form"""
  rowId: Int!
}

"""All input for the `updateFormJson` mutation."""
input UpdateFormJsonInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `FormJson` being updated.
  """
  formJsonPatch: FormJsonPatch!

  """
  The globally unique `ID` which will identify a single `FormJson` to be updated.
  """
  id: ID!
}

"""The output of our update `FormJson` mutation."""
type UpdateFormJsonPayload {
  """Reads a single `CiipUser` that is related to this `FormJson`."""
  ciipUserByCreatedBy: CiipUser

  """Reads a single `CiipUser` that is related to this `FormJson`."""
  ciipUserByDeletedBy: CiipUser

  """Reads a single `CiipUser` that is related to this `FormJson`."""
  ciipUserByUpdatedBy: CiipUser

  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `FormJson` that was updated by this mutation."""
  formJson: FormJson

  """An edge for our `FormJson`. May be used by Relay 1."""
  formJsonEdge(
    """The method to use when ordering `FormJson`."""
    orderBy: [FormJsonsOrderBy!] = [PRIMARY_KEY_ASC]
  ): FormJsonsEdge

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""
All input for the `updateFormResultByFormIdAndApplicationIdAndVersionNumber` mutation.
"""
input UpdateFormResultByFormIdAndApplicationIdAndVersionNumberInput {
  """The Unique ID of the Application"""
  applicationId: Int!

  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The Unique ID of the form"""
  formId: Int!

  """
  An object where the defined keys will be set on the `FormResult` being updated.
  """
  formResultPatch: FormResultPatch!

  """The application version this form result is attached to"""
  versionNumber: Int!
}

"""All input for the `updateFormResultByRowId` mutation."""
input UpdateFormResultByRowIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `FormResult` being updated.
  """
  formResultPatch: FormResultPatch!

  """Unique ID for the form"""
  rowId: Int!
}

"""All input for the `updateFormResult` mutation."""
input UpdateFormResultInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `FormResult` being updated.
  """
  formResultPatch: FormResultPatch!

  """
  The globally unique `ID` which will identify a single `FormResult` to be updated.
  """
  id: ID!
}

"""The output of our update `FormResult` mutation."""
type UpdateFormResultPayload {
  """Reads a single `Application` that is related to this `FormResult`."""
  applicationByApplicationId: Application

  """
  Reads a single `ApplicationRevision` that is related to this `FormResult`.
  """
  applicationRevisionByApplicationIdAndVersionNumber: ApplicationRevision

  """Reads a single `CiipUser` that is related to this `FormResult`."""
  ciipUserByCreatedBy: CiipUser

  """Reads a single `CiipUser` that is related to this `FormResult`."""
  ciipUserByDeletedBy: CiipUser

  """Reads a single `CiipUser` that is related to this `FormResult`."""
  ciipUserByUpdatedBy: CiipUser

  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """Reads a single `FormJson` that is related to this `FormResult`."""
  formJsonByFormId: FormJson

  """The `FormResult` that was updated by this mutation."""
  formResult: FormResult

  """An edge for our `FormResult`. May be used by Relay 1."""
  formResultEdge(
    """The method to use when ordering `FormResult`."""
    orderBy: [FormResultsOrderBy!] = [PRIMARY_KEY_ASC]
  ): FormResultsEdge

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `updateFormResultStatusByRowId` mutation."""
input UpdateFormResultStatusByRowIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `FormResultStatus` being updated.
  """
  formResultStatusPatch: FormResultStatusPatch!

  """The id used for reference and join"""
  rowId: Int!
}

"""All input for the `updateFormResultStatus` mutation."""
input UpdateFormResultStatusInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `FormResultStatus` being updated.
  """
  formResultStatusPatch: FormResultStatusPatch!

  """
  The globally unique `ID` which will identify a single `FormResultStatus` to be updated.
  """
  id: ID!
}

"""The output of our update `FormResultStatus` mutation."""
type UpdateFormResultStatusPayload {
  """
  Reads a single `Application` that is related to this `FormResultStatus`.
  """
  applicationByApplicationId: Application

  """Reads a single `CiipUser` that is related to this `FormResultStatus`."""
  ciipUserByCreatedBy: CiipUser

  """Reads a single `CiipUser` that is related to this `FormResultStatus`."""
  ciipUserByDeletedBy: CiipUser

  """Reads a single `CiipUser` that is related to this `FormResultStatus`."""
  ciipUserByUpdatedBy: CiipUser

  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `FormResultStatus` that was updated by this mutation."""
  formResultStatus: FormResultStatus

  """An edge for our `FormResultStatus`. May be used by Relay 1."""
  formResultStatusEdge(
    """The method to use when ordering `FormResultStatus`."""
    orderBy: [FormResultStatusesOrderBy!] = [PRIMARY_KEY_ASC]
  ): FormResultStatusesEdge

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `updateFuelByRowId` mutation."""
input UpdateFuelByRowIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `Fuel` being updated.
  """
  fuelPatch: FuelPatch!

  """Unique ID for the fuel"""
  rowId: Int!
}

"""All input for the `updateFuel` mutation."""
input UpdateFuelInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `Fuel` being updated.
  """
  fuelPatch: FuelPatch!

  """
  The globally unique `ID` which will identify a single `Fuel` to be updated.
  """
  id: ID!
}

"""The output of our update `Fuel` mutation."""
type UpdateFuelPayload {
  """Reads a single `CiipUser` that is related to this `Fuel`."""
  ciipUserByCreatedBy: CiipUser

  """Reads a single `CiipUser` that is related to this `Fuel`."""
  ciipUserByDeletedBy: CiipUser

  """Reads a single `CiipUser` that is related to this `Fuel`."""
  ciipUserByUpdatedBy: CiipUser

  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Fuel` that was updated by this mutation."""
  fuel: Fuel

  """An edge for our `Fuel`. May be used by Relay 1."""
  fuelEdge(
    """The method to use when ordering `Fuel`."""
    orderBy: [FuelsOrderBy!] = [PRIMARY_KEY_ASC]
  ): FuelsEdge

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `updateGasByRowId` mutation."""
input UpdateGasByRowIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `Gas` being updated.
  """
  gasPatch: GasPatch!

  """Unique ID for the gas"""
  rowId: Int!
}

"""All input for the `updateGas` mutation."""
input UpdateGasInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `Gas` being updated.
  """
  gasPatch: GasPatch!

  """
  The globally unique `ID` which will identify a single `Gas` to be updated.
  """
  id: ID!
}

"""The output of our update `Gas` mutation."""
type UpdateGasPayload {
  """Reads a single `CiipUser` that is related to this `Gas`."""
  ciipUserByCreatedBy: CiipUser

  """Reads a single `CiipUser` that is related to this `Gas`."""
  ciipUserByDeletedBy: CiipUser

  """Reads a single `CiipUser` that is related to this `Gas`."""
  ciipUserByUpdatedBy: CiipUser

  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Gas` that was updated by this mutation."""
  gas: Gas

  """An edge for our `Gas`. May be used by Relay 1."""
  gasEdge(
    """The method to use when ordering `Gas`."""
    orderBy: [GasesOrderBy!] = [PRIMARY_KEY_ASC]
  ): GasesEdge

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `updateLinkedProductByRowId` mutation."""
input UpdateLinkedProductByRowIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `LinkedProduct` being updated.
  """
  linkedProductPatch: LinkedProductPatch!

  """Unique ID for the product link"""
  rowId: Int!
}

"""All input for the `updateLinkedProduct` mutation."""
input UpdateLinkedProductInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `LinkedProduct` to be updated.
  """
  id: ID!

  """
  An object where the defined keys will be set on the `LinkedProduct` being updated.
  """
  linkedProductPatch: LinkedProductPatch!
}

"""The output of our update `LinkedProduct` mutation."""
type UpdateLinkedProductPayload {
  """Reads a single `CiipUser` that is related to this `LinkedProduct`."""
  ciipUserByCreatedBy: CiipUser

  """Reads a single `CiipUser` that is related to this `LinkedProduct`."""
  ciipUserByDeletedBy: CiipUser

  """Reads a single `CiipUser` that is related to this `LinkedProduct`."""
  ciipUserByUpdatedBy: CiipUser

  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `LinkedProduct` that was updated by this mutation."""
  linkedProduct: LinkedProduct

  """An edge for our `LinkedProduct`. May be used by Relay 1."""
  linkedProductEdge(
    """The method to use when ordering `LinkedProduct`."""
    orderBy: [LinkedProductsOrderBy!] = [PRIMARY_KEY_ASC]
  ): LinkedProductsEdge

  """Reads a single `Product` that is related to this `LinkedProduct`."""
  productByLinkedProductId: Product

  """Reads a single `Product` that is related to this `LinkedProduct`."""
  productByProductId: Product

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `updateOrganisationByRowId` mutation."""
input UpdateOrganisationByRowIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `Organisation` being updated.
  """
  organisationPatch: OrganisationPatch!

  """unique if for the organisation"""
  rowId: Int!
}

"""All input for the `updateOrganisation` mutation."""
input UpdateOrganisationInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Organisation` to be updated.
  """
  id: ID!

  """
  An object where the defined keys will be set on the `Organisation` being updated.
  """
  organisationPatch: OrganisationPatch!
}

"""The output of our update `Organisation` mutation."""
type UpdateOrganisationPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Organisation` that was updated by this mutation."""
  organisation: Organisation

  """An edge for our `Organisation`. May be used by Relay 1."""
  organisationEdge(
    """The method to use when ordering `Organisation`."""
    orderBy: [OrganisationsOrderBy!] = [PRIMARY_KEY_ASC]
  ): OrganisationsEdge

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `updateProductByRowId` mutation."""
input UpdateProductByRowIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `Product` being updated.
  """
  productPatch: ProductPatch!

  """Unique ID for the product"""
  rowId: Int!
}

"""All input for the `updateProduct` mutation."""
input UpdateProductInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Product` to be updated.
  """
  id: ID!

  """
  An object where the defined keys will be set on the `Product` being updated.
  """
  productPatch: ProductPatch!
}

"""The output of our update `Product` mutation."""
type UpdateProductPayload {
  """Reads a single `CiipUser` that is related to this `Product`."""
  ciipUserByCreatedBy: CiipUser

  """Reads a single `CiipUser` that is related to this `Product`."""
  ciipUserByDeletedBy: CiipUser

  """Reads a single `CiipUser` that is related to this `Product`."""
  ciipUserByUpdatedBy: CiipUser

  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Product` that was updated by this mutation."""
  product: Product

  """An edge for our `Product`. May be used by Relay 1."""
  productEdge(
    """The method to use when ordering `Product`."""
    orderBy: [ProductsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ProductsEdge

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `updateReportingYearByReportingYear` mutation."""
input UpdateReportingYearByReportingYearInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The current reporting year"""
  reportingYear: Int!

  """
  An object where the defined keys will be set on the `ReportingYear` being updated.
  """
  reportingYearPatch: ReportingYearPatch!
}

"""All input for the `updateReportingYear` mutation."""
input UpdateReportingYearInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `ReportingYear` to be updated.
  """
  id: ID!

  """
  An object where the defined keys will be set on the `ReportingYear` being updated.
  """
  reportingYearPatch: ReportingYearPatch!
}

"""The output of our update `ReportingYear` mutation."""
type UpdateReportingYearPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """The `ReportingYear` that was updated by this mutation."""
  reportingYear: ReportingYear

  """An edge for our `ReportingYear`. May be used by Relay 1."""
  reportingYearEdge(
    """The method to use when ordering `ReportingYear`."""
    orderBy: [ReportingYearsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ReportingYearsEdge
}

"""All input for the `updateReviewCommentByRowId` mutation."""
input UpdateReviewCommentByRowIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `ReviewComment` being updated.
  """
  reviewCommentPatch: ReviewCommentPatch!

  """Unique ID for the review_comment"""
  rowId: Int!
}

"""All input for the `updateReviewComment` mutation."""
input UpdateReviewCommentInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `ReviewComment` to be updated.
  """
  id: ID!

  """
  An object where the defined keys will be set on the `ReviewComment` being updated.
  """
  reviewCommentPatch: ReviewCommentPatch!
}

"""The output of our update `ReviewComment` mutation."""
type UpdateReviewCommentPayload {
  """Reads a single `Application` that is related to this `ReviewComment`."""
  applicationByApplicationId: Application

  """Reads a single `CiipUser` that is related to this `ReviewComment`."""
  ciipUserByCreatedBy: CiipUser

  """Reads a single `CiipUser` that is related to this `ReviewComment`."""
  ciipUserByDeletedBy: CiipUser

  """Reads a single `CiipUser` that is related to this `ReviewComment`."""
  ciipUserByUpdatedBy: CiipUser

  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """Reads a single `FormJson` that is related to this `ReviewComment`."""
  formJsonByFormId: FormJson

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """The `ReviewComment` that was updated by this mutation."""
  reviewComment: ReviewComment

  """An edge for our `ReviewComment`. May be used by Relay 1."""
  reviewCommentEdge(
    """The method to use when ordering `ReviewComment`."""
    orderBy: [ReviewCommentsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ReviewCommentsEdge
}

"""
A universally unique identifier as defined by [RFC 4122](https://tools.ietf.org/html/rfc4122).
"""
scalar UUID

"""
A filter to be used against UUID fields. All fields are combined with a logical ‘and.’
"""
input UUIDFilter {
  """
  Not equal to the specified value, treating null like an ordinary value.
  """
  distinctFrom: UUID

  """Equal to the specified value."""
  equalTo: UUID

  """Greater than the specified value."""
  greaterThan: UUID

  """Greater than or equal to the specified value."""
  greaterThanOrEqualTo: UUID

  """Included in the specified list."""
  in: [UUID!]

  """
  Is null (if `true` is specified) or is not null (if `false` is specified).
  """
  isNull: Boolean

  """Less than the specified value."""
  lessThan: UUID

  """Less than or equal to the specified value."""
  lessThanOrEqualTo: UUID

  """Equal to the specified value, treating null like an ordinary value."""
  notDistinctFrom: UUID

  """Not equal to the specified value."""
  notEqualTo: UUID

  """Not included in the specified list."""
  notIn: [UUID!]
}
