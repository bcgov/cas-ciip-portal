"""The application data"""
type Application implements Node {
  applicationStatus: ApplicationStatus

  """Reads and enables pagination through a set of `ApplicationStatus`."""
  applicationStatusesByApplicationId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ApplicationStatusCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `ApplicationStatus`."""
    orderBy: [ApplicationStatusesOrderBy!] = [PRIMARY_KEY_ASC]
  ): ApplicationStatusesConnection!

  """Reads and enables pagination through a set of `CertificationUrl`."""
  certificationUrlsByApplicationId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CertificationUrlCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CertificationUrl`."""
    orderBy: [CertificationUrlsOrderBy!] = [PRIMARY_KEY_ASC]
  ): CertificationUrlsConnection!

  """
  Reads a single `CiipApplication` that is related to this `Application`.
  """
  ciipApplicationByRowId: CiipApplication

  """Reads and enables pagination through a set of `CiipApplication`."""
  ciipApplicationsByRowId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CiipApplicationCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CiipApplication`."""
    orderBy: [CiipApplicationsOrderBy!] = [PRIMARY_KEY_ASC]
  ): CiipApplicationsConnection! @deprecated(reason: "Please use ciipApplicationByRowId instead")

  """Reads a single `Facility` that is related to this `Application`."""
  facilityByFacilityId: Facility

  """The foreign key to ggircs_portal.facility, references id"""
  facilityId: Int!

  """Reads and enables pagination through a set of `FormResult`."""
  formResultsByApplicationId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: FormResultCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `FormResult`."""
    orderBy: [FormResultsOrderBy!] = [PRIMARY_KEY_ASC]
  ): FormResultsConnection!

  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  id: ID!

  """Reads and enables pagination through a set of `FormResult`."""
  orderedFormResults(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int
  ): FormResultsConnection!

  """
  The foreign key to ggircs_portal.reporting_year, references reporting_year
  """
  reportingYear: Int

  """Reads a single `ReportingYear` that is related to this `Application`."""
  reportingYearByReportingYear: ReportingYear

  """The application id used for reference and join"""
  rowId: Int!
}

"""
A condition to be used against `Application` object types. All fields are tested
for equality and combined with a logical ‘and.’
"""
input ApplicationCondition {
  """Checks for equality with the object’s `facilityId` field."""
  facilityId: Int

  """Checks for equality with the object’s `reportingYear` field."""
  reportingYear: Int

  """Checks for equality with the object’s `rowId` field."""
  rowId: Int
}

"""An input for mutations affecting `Application`"""
input ApplicationInput {
  """The foreign key to ggircs_portal.facility, references id"""
  facilityId: Int!

  """
  The foreign key to ggircs_portal.reporting_year, references reporting_year
  """
  reportingYear: Int
}

"""
Represents an update to a `Application`. Fields that are set will be updated.
"""
input ApplicationPatch {
  """The foreign key to ggircs_portal.facility, references id"""
  facilityId: Int

  """
  The foreign key to ggircs_portal.reporting_year, references reporting_year
  """
  reportingYear: Int
}

"""The application review done by analyst"""
type ApplicationReview implements Node {
  """Creation date of row"""
  createdAt: Datetime!

  """Creator of row"""
  createdBy: String

  """Date of deletion"""
  deletedAt: Datetime

  """The user who deleted the row"""
  deletedBy: String

  """
  Reads a single `FormResult` that is related to this `ApplicationReview`.
  """
  formResultByFormResultId: FormResult

  """The foreign key to form_result for reference and join"""
  formResultId: Int!

  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  id: ID!

  """Reads and enables pagination through a set of `ReviewComment`."""
  reviewCommentsByApplicationReviewId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ReviewCommentCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `ReviewComment`."""
    orderBy: [ReviewCommentsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ReviewCommentsConnection!

  """The foreign key to form_json for reference and join"""
  reviewStatus: ApplicationReviewStatus

  """The application_review id used for reference and join"""
  rowId: Int!

  """Updated date of row"""
  updatedAt: Datetime!

  """Updator of row"""
  updatedBy: String
}

"""
A condition to be used against `ApplicationReview` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input ApplicationReviewCondition {
  """Checks for equality with the object’s `createdAt` field."""
  createdAt: Datetime

  """Checks for equality with the object’s `createdBy` field."""
  createdBy: String

  """Checks for equality with the object’s `deletedAt` field."""
  deletedAt: Datetime

  """Checks for equality with the object’s `deletedBy` field."""
  deletedBy: String

  """Checks for equality with the object’s `formResultId` field."""
  formResultId: Int

  """Checks for equality with the object’s `reviewStatus` field."""
  reviewStatus: ApplicationReviewStatus

  """Checks for equality with the object’s `rowId` field."""
  rowId: Int

  """Checks for equality with the object’s `updatedAt` field."""
  updatedAt: Datetime

  """Checks for equality with the object’s `updatedBy` field."""
  updatedBy: String
}

"""An input for mutations affecting `ApplicationReview`"""
input ApplicationReviewInput {
  """Creation date of row"""
  createdAt: Datetime

  """Creator of row"""
  createdBy: String

  """Date of deletion"""
  deletedAt: Datetime

  """The user who deleted the row"""
  deletedBy: String

  """The foreign key to form_result for reference and join"""
  formResultId: Int!

  """The foreign key to form_json for reference and join"""
  reviewStatus: ApplicationReviewStatus

  """Updated date of row"""
  updatedAt: Datetime

  """Updator of row"""
  updatedBy: String
}

"""
Represents an update to a `ApplicationReview`. Fields that are set will be updated.
"""
input ApplicationReviewPatch {
  """Creation date of row"""
  createdAt: Datetime

  """Creator of row"""
  createdBy: String

  """Date of deletion"""
  deletedAt: Datetime

  """The user who deleted the row"""
  deletedBy: String

  """The foreign key to form_result for reference and join"""
  formResultId: Int

  """The foreign key to form_json for reference and join"""
  reviewStatus: ApplicationReviewStatus

  """Updated date of row"""
  updatedAt: Datetime

  """Updator of row"""
  updatedBy: String
}

"""A connection to a list of `ApplicationReview` values."""
type ApplicationReviewsConnection {
  """
  A list of edges which contains the `ApplicationReview` and cursor to aid in pagination.
  """
  edges: [ApplicationReviewsEdge!]!

  """A list of `ApplicationReview` objects."""
  nodes: [ApplicationReview]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `ApplicationReview` you could get from the connection.
  """
  totalCount: Int!
}

"""A `ApplicationReview` edge in the connection."""
type ApplicationReviewsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `ApplicationReview` at the end of the edge."""
  node: ApplicationReview
}

"""Methods to use when ordering `ApplicationReview`."""
enum ApplicationReviewsOrderBy {
  CREATED_AT_ASC
  CREATED_AT_DESC
  CREATED_BY_ASC
  CREATED_BY_DESC
  DELETED_AT_ASC
  DELETED_AT_DESC
  DELETED_BY_ASC
  DELETED_BY_DESC
  FORM_RESULT_ID_ASC
  FORM_RESULT_ID_DESC
  ID_ASC
  ID_DESC
  NATURAL
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  REVIEW_STATUS_ASC
  REVIEW_STATUS_DESC
  UPDATED_AT_ASC
  UPDATED_AT_DESC
  UPDATED_BY_ASC
  UPDATED_BY_DESC
}

enum ApplicationReviewStatus {
  APPROVED
  CHANGES_SUBMITTED
  IN_REVIEW
  PENDING
  REQUESTED_CHANGES
}

"""A connection to a list of `Application` values."""
type ApplicationsConnection {
  """
  A list of edges which contains the `Application` and cursor to aid in pagination.
  """
  edges: [ApplicationsEdge!]!

  """A list of `Application` objects."""
  nodes: [Application]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Application` you could get from the connection."""
  totalCount: Int!
}

"""A `Application` edge in the connection."""
type ApplicationsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Application` at the end of the edge."""
  node: Application
}

"""Methods to use when ordering `Application`."""
enum ApplicationsOrderBy {
  FACILITY_ID_ASC
  FACILITY_ID_DESC
  ID_ASC
  ID_DESC
  NATURAL
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  REPORTING_YEAR_ASC
  REPORTING_YEAR_DESC
}

"""The application status data"""
type ApplicationStatus implements Node {
  """
  Reads a single `Application` that is related to this `ApplicationStatus`.
  """
  applicationByApplicationId: Application

  """The foreign key to application used for reference and join"""
  applicationId: Int!

  """The application status"""
  applicationStatus: CiipApplicationStatus

  """Reads a single `CiipUser` that is related to this `ApplicationStatus`."""
  ciipUserByDeletedBy: CiipUser

  """The date the application status was updated"""
  createdAt: Datetime!

  """The person who updated the application status"""
  createdBy: String

  """The date the application status was deleted"""
  deletedAt: Datetime

  """The person who deleted the application status"""
  deletedBy: Int

  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  id: ID!

  """The id used for reference and join"""
  rowId: Int!

  """The date the application status was updated"""
  updatedAt: Datetime!

  """The person who updated the application status"""
  updatedBy: String
}

"""
A condition to be used against `ApplicationStatus` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input ApplicationStatusCondition {
  """Checks for equality with the object’s `applicationId` field."""
  applicationId: Int

  """Checks for equality with the object’s `applicationStatus` field."""
  applicationStatus: CiipApplicationStatus

  """Checks for equality with the object’s `createdAt` field."""
  createdAt: Datetime

  """Checks for equality with the object’s `createdBy` field."""
  createdBy: String

  """Checks for equality with the object’s `deletedAt` field."""
  deletedAt: Datetime

  """Checks for equality with the object’s `deletedBy` field."""
  deletedBy: Int

  """Checks for equality with the object’s `rowId` field."""
  rowId: Int

  """Checks for equality with the object’s `updatedAt` field."""
  updatedAt: Datetime

  """Checks for equality with the object’s `updatedBy` field."""
  updatedBy: String
}

"""A connection to a list of `ApplicationStatus` values."""
type ApplicationStatusesConnection {
  """
  A list of edges which contains the `ApplicationStatus` and cursor to aid in pagination.
  """
  edges: [ApplicationStatusesEdge!]!

  """A list of `ApplicationStatus` objects."""
  nodes: [ApplicationStatus]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `ApplicationStatus` you could get from the connection.
  """
  totalCount: Int!
}

"""A `ApplicationStatus` edge in the connection."""
type ApplicationStatusesEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `ApplicationStatus` at the end of the edge."""
  node: ApplicationStatus
}

"""Methods to use when ordering `ApplicationStatus`."""
enum ApplicationStatusesOrderBy {
  APPLICATION_ID_ASC
  APPLICATION_ID_DESC
  APPLICATION_STATUS_ASC
  APPLICATION_STATUS_DESC
  CREATED_AT_ASC
  CREATED_AT_DESC
  CREATED_BY_ASC
  CREATED_BY_DESC
  DELETED_AT_ASC
  DELETED_AT_DESC
  DELETED_BY_ASC
  DELETED_BY_DESC
  ID_ASC
  ID_DESC
  NATURAL
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  UPDATED_AT_ASC
  UPDATED_AT_DESC
  UPDATED_BY_ASC
  UPDATED_BY_DESC
}

"""An input for mutations affecting `ApplicationStatus`"""
input ApplicationStatusInput {
  """The foreign key to application used for reference and join"""
  applicationId: Int!

  """The application status"""
  applicationStatus: CiipApplicationStatus

  """The date the application status was updated"""
  createdAt: Datetime

  """The person who updated the application status"""
  createdBy: String

  """The date the application status was deleted"""
  deletedAt: Datetime

  """The person who deleted the application status"""
  deletedBy: Int

  """The date the application status was updated"""
  updatedAt: Datetime

  """The person who updated the application status"""
  updatedBy: String
}

"""
Represents an update to a `ApplicationStatus`. Fields that are set will be updated.
"""
input ApplicationStatusPatch {
  """The foreign key to application used for reference and join"""
  applicationId: Int

  """The application status"""
  applicationStatus: CiipApplicationStatus

  """The date the application status was updated"""
  createdAt: Datetime

  """The person who updated the application status"""
  createdBy: String

  """The date the application status was deleted"""
  deletedAt: Datetime

  """The person who deleted the application status"""
  deletedBy: Int

  """The date the application status was updated"""
  updatedAt: Datetime

  """The person who updated the application status"""
  updatedBy: String
}

"""Table containing the benchmark and eligibility threshold for a product"""
type Benchmark implements Node {
  """The value of the benchmark"""
  benchmark: Int!

  """Reads a single `CiipUser` that is related to this `Benchmark`."""
  ciipUserByDeletedBy: CiipUser

  """Creation date of row"""
  createdAt: Datetime!

  """Creator of row"""
  createdBy: String

  """Deletion date of row"""
  deletedAt: Datetime

  """The user who deleted the row"""
  deletedBy: Int

  """The value of eligibility_threshold"""
  eligibilityThreshold: Int!

  """The date when this benchmark became/becomes inactive"""
  endDate: Datetime

  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  id: ID!

  """Reads a single `Product` that is related to this `Benchmark`."""
  productByProductId: Product

  """Foreign key to the product"""
  productId: Int!

  """Unique ID for the benchmark"""
  rowId: Int!

  """The date when this benchmark became/becomes active"""
  startDate: Datetime

  """Last update date of row"""
  updatedAt: Datetime!

  """The user who last updated the row"""
  updatedBy: String
}

"""
A condition to be used against `Benchmark` object types. All fields are tested
for equality and combined with a logical ‘and.’
"""
input BenchmarkCondition {
  """Checks for equality with the object’s `benchmark` field."""
  benchmark: Int

  """Checks for equality with the object’s `createdAt` field."""
  createdAt: Datetime

  """Checks for equality with the object’s `createdBy` field."""
  createdBy: String

  """Checks for equality with the object’s `deletedAt` field."""
  deletedAt: Datetime

  """Checks for equality with the object’s `deletedBy` field."""
  deletedBy: Int

  """Checks for equality with the object’s `eligibilityThreshold` field."""
  eligibilityThreshold: Int

  """Checks for equality with the object’s `endDate` field."""
  endDate: Datetime

  """Checks for equality with the object’s `productId` field."""
  productId: Int

  """Checks for equality with the object’s `rowId` field."""
  rowId: Int

  """Checks for equality with the object’s `startDate` field."""
  startDate: Datetime

  """Checks for equality with the object’s `updatedAt` field."""
  updatedAt: Datetime

  """Checks for equality with the object’s `updatedBy` field."""
  updatedBy: String
}

"""An input for mutations affecting `Benchmark`"""
input BenchmarkInput {
  """The value of the benchmark"""
  benchmark: Int!

  """Creation date of row"""
  createdAt: Datetime

  """Creator of row"""
  createdBy: String

  """Deletion date of row"""
  deletedAt: Datetime

  """The user who deleted the row"""
  deletedBy: Int

  """The value of eligibility_threshold"""
  eligibilityThreshold: Int!

  """The date when this benchmark became/becomes inactive"""
  endDate: Datetime

  """Foreign key to the product"""
  productId: Int!

  """The date when this benchmark became/becomes active"""
  startDate: Datetime

  """Last update date of row"""
  updatedAt: Datetime

  """The user who last updated the row"""
  updatedBy: String
}

"""
Represents an update to a `Benchmark`. Fields that are set will be updated.
"""
input BenchmarkPatch {
  """The value of the benchmark"""
  benchmark: Int

  """Creation date of row"""
  createdAt: Datetime

  """Creator of row"""
  createdBy: String

  """Deletion date of row"""
  deletedAt: Datetime

  """The user who deleted the row"""
  deletedBy: Int

  """The value of eligibility_threshold"""
  eligibilityThreshold: Int

  """The date when this benchmark became/becomes inactive"""
  endDate: Datetime

  """Foreign key to the product"""
  productId: Int

  """The date when this benchmark became/becomes active"""
  startDate: Datetime

  """Last update date of row"""
  updatedAt: Datetime

  """The user who last updated the row"""
  updatedBy: String
}

"""A connection to a list of `Benchmark` values."""
type BenchmarksConnection {
  """
  A list of edges which contains the `Benchmark` and cursor to aid in pagination.
  """
  edges: [BenchmarksEdge!]!

  """A list of `Benchmark` objects."""
  nodes: [Benchmark]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Benchmark` you could get from the connection."""
  totalCount: Int!
}

"""A `Benchmark` edge in the connection."""
type BenchmarksEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Benchmark` at the end of the edge."""
  node: Benchmark
}

"""Methods to use when ordering `Benchmark`."""
enum BenchmarksOrderBy {
  BENCHMARK_ASC
  BENCHMARK_DESC
  CREATED_AT_ASC
  CREATED_AT_DESC
  CREATED_BY_ASC
  CREATED_BY_DESC
  DELETED_AT_ASC
  DELETED_AT_DESC
  DELETED_BY_ASC
  DELETED_BY_DESC
  ELIGIBILITY_THRESHOLD_ASC
  ELIGIBILITY_THRESHOLD_DESC
  END_DATE_ASC
  END_DATE_DESC
  ID_ASC
  ID_DESC
  NATURAL
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  PRODUCT_ID_ASC
  PRODUCT_ID_DESC
  START_DATE_ASC
  START_DATE_DESC
  UPDATED_AT_ASC
  UPDATED_AT_DESC
  UPDATED_BY_ASC
  UPDATED_BY_DESC
}

"""
A floating point number that requires more precision than IEEE 754 binary 64
"""
scalar BigFloat

"""A connection to a list of `CarbonTaxDatum` values."""
type CarbonTaxDataConnection {
  """
  A list of edges which contains the `CarbonTaxDatum` and cursor to aid in pagination.
  """
  edges: [CarbonTaxDataEdge!]!

  """A list of `CarbonTaxDatum` objects."""
  nodes: [CarbonTaxDatum]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CarbonTaxDatum` you could get from the connection."""
  totalCount: Int!
}

"""A `CarbonTaxDatum` edge in the connection."""
type CarbonTaxDataEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CarbonTaxDatum` at the end of the edge."""
  node: CarbonTaxDatum
}

type CarbonTaxDatum {
  carbonTaxed: Boolean
  ctaRateUnits: String
  fuelCharge: BigFloat
  fuelMappingId: Int
  rateEndDate: Date
  rateStartDate: Date
  unitConversionFactor: Int
}

"""Table containing the certification_url for an application"""
type CertificationUrl implements Node {
  """
  Reads a single `Application` that is related to this `CertificationUrl`.
  """
  applicationByApplicationId: Application

  """Foreign key to the application"""
  applicationId: Int!

  """The value of the certification_url"""
  certificationUrlString: String!

  """Reads a single `CiipUser` that is related to this `CertificationUrl`."""
  ciipUserByDeletedBy: CiipUser

  """Creation date of row"""
  createdAt: Datetime!

  """Creator of row"""
  createdBy: String

  """Deletion date of row"""
  deletedAt: Datetime

  """The user who deleted the row"""
  deletedBy: Int

  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  id: ID!

  """Unique ID for the certification_url"""
  rowId: Int!

  """Last update date of row"""
  updatedAt: Datetime!

  """The user who last updated the row"""
  updatedBy: String
}

"""
A condition to be used against `CertificationUrl` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input CertificationUrlCondition {
  """Checks for equality with the object’s `applicationId` field."""
  applicationId: Int

  """Checks for equality with the object’s `certificationUrlString` field."""
  certificationUrlString: String

  """Checks for equality with the object’s `createdAt` field."""
  createdAt: Datetime

  """Checks for equality with the object’s `createdBy` field."""
  createdBy: String

  """Checks for equality with the object’s `deletedAt` field."""
  deletedAt: Datetime

  """Checks for equality with the object’s `deletedBy` field."""
  deletedBy: Int

  """Checks for equality with the object’s `rowId` field."""
  rowId: Int

  """Checks for equality with the object’s `updatedAt` field."""
  updatedAt: Datetime

  """Checks for equality with the object’s `updatedBy` field."""
  updatedBy: String
}

"""An input for mutations affecting `CertificationUrl`"""
input CertificationUrlInput {
  """Foreign key to the application"""
  applicationId: Int!

  """The value of the certification_url"""
  certificationUrlString: String!

  """Creation date of row"""
  createdAt: Datetime

  """Creator of row"""
  createdBy: String

  """Deletion date of row"""
  deletedAt: Datetime

  """The user who deleted the row"""
  deletedBy: Int

  """Last update date of row"""
  updatedAt: Datetime

  """The user who last updated the row"""
  updatedBy: String
}

"""
Represents an update to a `CertificationUrl`. Fields that are set will be updated.
"""
input CertificationUrlPatch {
  """Foreign key to the application"""
  applicationId: Int

  """The value of the certification_url"""
  certificationUrlString: String

  """Creation date of row"""
  createdAt: Datetime

  """Creator of row"""
  createdBy: String

  """Deletion date of row"""
  deletedAt: Datetime

  """The user who deleted the row"""
  deletedBy: Int

  """Last update date of row"""
  updatedAt: Datetime

  """The user who last updated the row"""
  updatedBy: String
}

"""A connection to a list of `CertificationUrl` values."""
type CertificationUrlsConnection {
  """
  A list of edges which contains the `CertificationUrl` and cursor to aid in pagination.
  """
  edges: [CertificationUrlsEdge!]!

  """A list of `CertificationUrl` objects."""
  nodes: [CertificationUrl]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `CertificationUrl` you could get from the connection.
  """
  totalCount: Int!
}

"""A `CertificationUrl` edge in the connection."""
type CertificationUrlsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CertificationUrl` at the end of the edge."""
  node: CertificationUrl
}

"""Methods to use when ordering `CertificationUrl`."""
enum CertificationUrlsOrderBy {
  APPLICATION_ID_ASC
  APPLICATION_ID_DESC
  CERTIFICATION_URL_STRING_ASC
  CERTIFICATION_URL_STRING_DESC
  CREATED_AT_ASC
  CREATED_AT_DESC
  CREATED_BY_ASC
  CREATED_BY_DESC
  DELETED_AT_ASC
  DELETED_AT_DESC
  DELETED_BY_ASC
  DELETED_BY_DESC
  ID_ASC
  ID_DESC
  NATURAL
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  UPDATED_AT_ASC
  UPDATED_AT_DESC
  UPDATED_BY_ASC
  UPDATED_BY_DESC
}

type CiipApplication implements Node {
  """
  Reads a single `Application` that is related to this `CiipApplication`.
  """
  applicationByRowId: Application
  applicationStatus: CiipApplicationStatus
  bcghgid: BigFloat
  facilityName: String

  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  id: ID!
  operatorName: String
  reportingYear: String
  rowId: Int!
  submissionDate: Datetime
}

"""
A condition to be used against `CiipApplication` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input CiipApplicationCondition {
  """Checks for equality with the object’s `applicationStatus` field."""
  applicationStatus: CiipApplicationStatus

  """Checks for equality with the object’s `bcghgid` field."""
  bcghgid: BigFloat

  """Checks for equality with the object’s `facilityName` field."""
  facilityName: String

  """Checks for equality with the object’s `operatorName` field."""
  operatorName: String

  """Checks for equality with the object’s `reportingYear` field."""
  reportingYear: String

  """Checks for equality with the object’s `rowId` field."""
  rowId: Int

  """Checks for equality with the object’s `submissionDate` field."""
  submissionDate: Datetime
}

"""A connection to a list of `CiipApplication` values."""
type CiipApplicationsConnection {
  """
  A list of edges which contains the `CiipApplication` and cursor to aid in pagination.
  """
  edges: [CiipApplicationsEdge!]!

  """A list of `CiipApplication` objects."""
  nodes: [CiipApplication]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `CiipApplication` you could get from the connection.
  """
  totalCount: Int!
}

"""A `CiipApplication` edge in the connection."""
type CiipApplicationsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CiipApplication` at the end of the edge."""
  node: CiipApplication
}

"""Methods to use when ordering `CiipApplication`."""
enum CiipApplicationsOrderBy {
  APPLICATION_STATUS_ASC
  APPLICATION_STATUS_DESC
  BCGHGID_ASC
  BCGHGID_DESC
  FACILITY_NAME_ASC
  FACILITY_NAME_DESC
  ID_ASC
  ID_DESC
  NATURAL
  OPERATOR_NAME_ASC
  OPERATOR_NAME_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  REPORTING_YEAR_ASC
  REPORTING_YEAR_DESC
  SUBMISSION_DATE_ASC
  SUBMISSION_DATE_DESC
}

enum CiipApplicationStatus {
  APPROVED
  CHANGES_SUBMITTED
  DRAFT
  PENDING
  REJECTED
  REQUESTED_CHANGES
}

"""
A table defining which forms are in the application wizard and their order
"""
type CiipApplicationWizard implements Node {
  """The id of the form"""
  formId: Int!

  """
  Reads a single `FormJson` that is related to this `CiipApplicationWizard`.
  """
  formJsonByFormId: FormJson

  """The zero-indexed position of the form in the wizard"""
  formPosition: Int!

  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  id: ID!
}

"""
A condition to be used against `CiipApplicationWizard` object types. All fields
are tested for equality and combined with a logical ‘and.’
"""
input CiipApplicationWizardCondition {
  """Checks for equality with the object’s `formId` field."""
  formId: Int

  """Checks for equality with the object’s `formPosition` field."""
  formPosition: Int
}

"""An input for mutations affecting `CiipApplicationWizard`"""
input CiipApplicationWizardInput {
  """The id of the form"""
  formId: Int!

  """The zero-indexed position of the form in the wizard"""
  formPosition: Int!
}

"""
Represents an update to a `CiipApplicationWizard`. Fields that are set will be updated.
"""
input CiipApplicationWizardPatch {
  """The id of the form"""
  formId: Int

  """The zero-indexed position of the form in the wizard"""
  formPosition: Int
}

"""A connection to a list of `CiipApplicationWizard` values."""
type CiipApplicationWizardsConnection {
  """
  A list of edges which contains the `CiipApplicationWizard` and cursor to aid in pagination.
  """
  edges: [CiipApplicationWizardsEdge!]!

  """A list of `CiipApplicationWizard` objects."""
  nodes: [CiipApplicationWizard]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `CiipApplicationWizard` you could get from the connection.
  """
  totalCount: Int!
}

"""A `CiipApplicationWizard` edge in the connection."""
type CiipApplicationWizardsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CiipApplicationWizard` at the end of the edge."""
  node: CiipApplicationWizard
}

"""Methods to use when ordering `CiipApplicationWizard`."""
enum CiipApplicationWizardsOrderBy {
  FORM_ID_ASC
  FORM_ID_DESC
  FORM_POSITION_ASC
  FORM_POSITION_DESC
  NATURAL
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""The view for calculating carbon tax based on ciip data"""
type CiipCarbonTaxCalculation {
  applicationId: Int
  calculatedCarbonTax: BigFloat
  carbonTaxed: Boolean
  ctaRateUnits: String
  fuelCharge: BigFloat
  fuelMappingId: Int
  fuelType: String
  quantity: BigFloat
  rateEndDate: Date
  rateStartDate: Date
  reportingYear: Int
  unitConversionFactor: Int
  units: String
}

"""
A condition to be used against `CiipCarbonTaxCalculation` object types. All
fields are tested for equality and combined with a logical ‘and.’
"""
input CiipCarbonTaxCalculationCondition {
  """Checks for equality with the object’s `applicationId` field."""
  applicationId: Int

  """Checks for equality with the object’s `calculatedCarbonTax` field."""
  calculatedCarbonTax: BigFloat

  """Checks for equality with the object’s `carbonTaxed` field."""
  carbonTaxed: Boolean

  """Checks for equality with the object’s `ctaRateUnits` field."""
  ctaRateUnits: String

  """Checks for equality with the object’s `fuelCharge` field."""
  fuelCharge: BigFloat

  """Checks for equality with the object’s `fuelMappingId` field."""
  fuelMappingId: Int

  """Checks for equality with the object’s `fuelType` field."""
  fuelType: String

  """Checks for equality with the object’s `quantity` field."""
  quantity: BigFloat

  """Checks for equality with the object’s `rateEndDate` field."""
  rateEndDate: Date

  """Checks for equality with the object’s `rateStartDate` field."""
  rateStartDate: Date

  """Checks for equality with the object’s `reportingYear` field."""
  reportingYear: Int

  """Checks for equality with the object’s `unitConversionFactor` field."""
  unitConversionFactor: Int

  """Checks for equality with the object’s `units` field."""
  units: String
}

"""A connection to a list of `CiipCarbonTaxCalculation` values."""
type CiipCarbonTaxCalculationsConnection {
  """
  A list of edges which contains the `CiipCarbonTaxCalculation` and cursor to aid in pagination.
  """
  edges: [CiipCarbonTaxCalculationsEdge!]!

  """A list of `CiipCarbonTaxCalculation` objects."""
  nodes: [CiipCarbonTaxCalculation]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `CiipCarbonTaxCalculation` you could get from the connection.
  """
  totalCount: Int!
}

"""A `CiipCarbonTaxCalculation` edge in the connection."""
type CiipCarbonTaxCalculationsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CiipCarbonTaxCalculation` at the end of the edge."""
  node: CiipCarbonTaxCalculation
}

"""Methods to use when ordering `CiipCarbonTaxCalculation`."""
enum CiipCarbonTaxCalculationsOrderBy {
  APPLICATION_ID_ASC
  APPLICATION_ID_DESC
  CALCULATED_CARBON_TAX_ASC
  CALCULATED_CARBON_TAX_DESC
  CARBON_TAXED_ASC
  CARBON_TAXED_DESC
  CTA_RATE_UNITS_ASC
  CTA_RATE_UNITS_DESC
  FUEL_CHARGE_ASC
  FUEL_CHARGE_DESC
  FUEL_MAPPING_ID_ASC
  FUEL_MAPPING_ID_DESC
  FUEL_TYPE_ASC
  FUEL_TYPE_DESC
  NATURAL
  QUANTITY_ASC
  QUANTITY_DESC
  RATE_END_DATE_ASC
  RATE_END_DATE_DESC
  RATE_START_DATE_ASC
  RATE_START_DATE_DESC
  REPORTING_YEAR_ASC
  REPORTING_YEAR_DESC
  UNIT_CONVERSION_FACTOR_ASC
  UNIT_CONVERSION_FACTOR_DESC
  UNITS_ASC
  UNITS_DESC
}

type CiipCertifier implements Node {
  certificationDate: Date
  certifierName: String
  emailAddress: String
  fax: String
  firstName: String

  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  id: ID!
  lastName: String
  phone: String
  position: String
  rowId: Int!
}

"""
A condition to be used against `CiipCertifier` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input CiipCertifierCondition {
  """Checks for equality with the object’s `certificationDate` field."""
  certificationDate: Date

  """Checks for equality with the object’s `certifierName` field."""
  certifierName: String

  """Checks for equality with the object’s `emailAddress` field."""
  emailAddress: String

  """Checks for equality with the object’s `fax` field."""
  fax: String

  """Checks for equality with the object’s `firstName` field."""
  firstName: String

  """Checks for equality with the object’s `lastName` field."""
  lastName: String

  """Checks for equality with the object’s `phone` field."""
  phone: String

  """Checks for equality with the object’s `position` field."""
  position: String

  """Checks for equality with the object’s `rowId` field."""
  rowId: Int
}

"""A connection to a list of `CiipCertifier` values."""
type CiipCertifiersConnection {
  """
  A list of edges which contains the `CiipCertifier` and cursor to aid in pagination.
  """
  edges: [CiipCertifiersEdge!]!

  """A list of `CiipCertifier` objects."""
  nodes: [CiipCertifier]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CiipCertifier` you could get from the connection."""
  totalCount: Int!
}

"""A `CiipCertifier` edge in the connection."""
type CiipCertifiersEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CiipCertifier` at the end of the edge."""
  node: CiipCertifier
}

"""Methods to use when ordering `CiipCertifier`."""
enum CiipCertifiersOrderBy {
  CERTIFICATION_DATE_ASC
  CERTIFICATION_DATE_DESC
  CERTIFIER_NAME_ASC
  CERTIFIER_NAME_DESC
  EMAIL_ADDRESS_ASC
  EMAIL_ADDRESS_DESC
  FAX_ASC
  FAX_DESC
  FIRST_NAME_ASC
  FIRST_NAME_DESC
  ID_ASC
  ID_DESC
  LAST_NAME_ASC
  LAST_NAME_DESC
  NATURAL
  PHONE_ASC
  PHONE_DESC
  POSITION_ASC
  POSITION_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

type CiipContact implements Node {
  emailAddress: String
  fax: String
  firstName: String

  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  id: ID!
  lastName: String
  phone: String
  position: String
  rowId: Int!
}

"""
A condition to be used against `CiipContact` object types. All fields are tested
for equality and combined with a logical ‘and.’
"""
input CiipContactCondition {
  """Checks for equality with the object’s `emailAddress` field."""
  emailAddress: String

  """Checks for equality with the object’s `fax` field."""
  fax: String

  """Checks for equality with the object’s `firstName` field."""
  firstName: String

  """Checks for equality with the object’s `lastName` field."""
  lastName: String

  """Checks for equality with the object’s `phone` field."""
  phone: String

  """Checks for equality with the object’s `position` field."""
  position: String

  """Checks for equality with the object’s `rowId` field."""
  rowId: Int
}

"""A connection to a list of `CiipContact` values."""
type CiipContactsConnection {
  """
  A list of edges which contains the `CiipContact` and cursor to aid in pagination.
  """
  edges: [CiipContactsEdge!]!

  """A list of `CiipContact` objects."""
  nodes: [CiipContact]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CiipContact` you could get from the connection."""
  totalCount: Int!
}

"""A `CiipContact` edge in the connection."""
type CiipContactsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CiipContact` at the end of the edge."""
  node: CiipContact
}

"""Methods to use when ordering `CiipContact`."""
enum CiipContactsOrderBy {
  EMAIL_ADDRESS_ASC
  EMAIL_ADDRESS_DESC
  FAX_ASC
  FAX_DESC
  FIRST_NAME_ASC
  FIRST_NAME_DESC
  ID_ASC
  ID_DESC
  LAST_NAME_ASC
  LAST_NAME_DESC
  NATURAL
  PHONE_ASC
  PHONE_DESC
  POSITION_ASC
  POSITION_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

type CiipElectricityAndHeat implements Node {
  consumedOnsite: BigFloat
  consumptionType: String
  generatedOnsite: BigFloat

  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  id: ID!
  onsiteEmissions: BigFloat
  purchased: BigFloat
  rowId: Int!
  sold: BigFloat
}

"""
A condition to be used against `CiipElectricityAndHeat` object types. All fields
are tested for equality and combined with a logical ‘and.’
"""
input CiipElectricityAndHeatCondition {
  """Checks for equality with the object’s `consumedOnsite` field."""
  consumedOnsite: BigFloat

  """Checks for equality with the object’s `consumptionType` field."""
  consumptionType: String

  """Checks for equality with the object’s `generatedOnsite` field."""
  generatedOnsite: BigFloat

  """Checks for equality with the object’s `onsiteEmissions` field."""
  onsiteEmissions: BigFloat

  """Checks for equality with the object’s `purchased` field."""
  purchased: BigFloat

  """Checks for equality with the object’s `rowId` field."""
  rowId: Int

  """Checks for equality with the object’s `sold` field."""
  sold: BigFloat
}

"""A connection to a list of `CiipElectricityAndHeat` values."""
type CiipElectricityAndHeatsConnection {
  """
  A list of edges which contains the `CiipElectricityAndHeat` and cursor to aid in pagination.
  """
  edges: [CiipElectricityAndHeatsEdge!]!

  """A list of `CiipElectricityAndHeat` objects."""
  nodes: [CiipElectricityAndHeat]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `CiipElectricityAndHeat` you could get from the connection.
  """
  totalCount: Int!
}

"""A `CiipElectricityAndHeat` edge in the connection."""
type CiipElectricityAndHeatsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CiipElectricityAndHeat` at the end of the edge."""
  node: CiipElectricityAndHeat
}

"""Methods to use when ordering `CiipElectricityAndHeat`."""
enum CiipElectricityAndHeatsOrderBy {
  CONSUMED_ONSITE_ASC
  CONSUMED_ONSITE_DESC
  CONSUMPTION_TYPE_ASC
  CONSUMPTION_TYPE_DESC
  GENERATED_ONSITE_ASC
  GENERATED_ONSITE_DESC
  ID_ASC
  ID_DESC
  NATURAL
  ONSITE_EMISSIONS_ASC
  ONSITE_EMISSIONS_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  PURCHASED_ASC
  PURCHASED_DESC
  SOLD_ASC
  SOLD_DESC
}

"""A connection to a list of `CiipFacility` values."""
type CiipFacilitiesConnection {
  """
  A list of edges which contains the `CiipFacility` and cursor to aid in pagination.
  """
  edges: [CiipFacilitiesEdge!]!

  """A list of `CiipFacility` objects."""
  nodes: [CiipFacility]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CiipFacility` you could get from the connection."""
  totalCount: Int!
}

"""A `CiipFacility` edge in the connection."""
type CiipFacilitiesEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CiipFacility` at the end of the edge."""
  node: CiipFacility
}

"""Methods to use when ordering `CiipFacility`."""
enum CiipFacilitiesOrderBy {
  BCGHGID_ASC
  BCGHGID_DESC
  FACILITY_NAME_ASC
  FACILITY_NAME_DESC
  FACILITY_TYPE_ASC
  FACILITY_TYPE_DESC
  ID_ASC
  ID_DESC
  LATITUDE_ASC
  LATITUDE_DESC
  LONGITUDE_ASC
  LONGITUDE_DESC
  NAICS_CODE_ASC
  NAICS_CODE_DESC
  NATURAL
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

type CiipFacility implements Node {
  bcghgid: BigFloat
  facilityName: String
  facilityType: String

  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  id: ID!
  latitude: BigFloat
  longitude: BigFloat
  naicsCode: BigFloat
  rowId: Int!
}

"""
A condition to be used against `CiipFacility` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input CiipFacilityCondition {
  """Checks for equality with the object’s `bcghgid` field."""
  bcghgid: BigFloat

  """Checks for equality with the object’s `facilityName` field."""
  facilityName: String

  """Checks for equality with the object’s `facilityType` field."""
  facilityType: String

  """Checks for equality with the object’s `latitude` field."""
  latitude: BigFloat

  """Checks for equality with the object’s `longitude` field."""
  longitude: BigFloat

  """Checks for equality with the object’s `naicsCode` field."""
  naicsCode: BigFloat

  """Checks for equality with the object’s `rowId` field."""
  rowId: Int
}

type CiipFuel implements Node {
  fuelType: String
  fuelUnits: String

  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  id: ID!
  methodology: String
  quantity: BigFloat
  rowId: Int!
}

"""
A condition to be used against `CiipFuel` object types. All fields are tested
for equality and combined with a logical ‘and.’
"""
input CiipFuelCondition {
  """Checks for equality with the object’s `fuelType` field."""
  fuelType: String

  """Checks for equality with the object’s `fuelUnits` field."""
  fuelUnits: String

  """Checks for equality with the object’s `methodology` field."""
  methodology: String

  """Checks for equality with the object’s `quantity` field."""
  quantity: BigFloat

  """Checks for equality with the object’s `rowId` field."""
  rowId: Int
}

"""A connection to a list of `CiipFuel` values."""
type CiipFuelsConnection {
  """
  A list of edges which contains the `CiipFuel` and cursor to aid in pagination.
  """
  edges: [CiipFuelsEdge!]!

  """A list of `CiipFuel` objects."""
  nodes: [CiipFuel]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CiipFuel` you could get from the connection."""
  totalCount: Int!
}

"""A `CiipFuel` edge in the connection."""
type CiipFuelsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CiipFuel` at the end of the edge."""
  node: CiipFuel
}

"""Methods to use when ordering `CiipFuel`."""
enum CiipFuelsOrderBy {
  FUEL_TYPE_ASC
  FUEL_TYPE_DESC
  FUEL_UNITS_ASC
  FUEL_UNITS_DESC
  ID_ASC
  ID_DESC
  METHODOLOGY_ASC
  METHODOLOGY_DESC
  NATURAL
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  QUANTITY_ASC
  QUANTITY_DESC
}

type CiipOperator implements Node {
  bcCorporateRegistryNumber: BigFloat
  dunsNumber: BigFloat

  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  id: ID!
  naicsCode: BigFloat
  operatorName: String
  operatorTradeName: String
  rowId: Int!
}

"""
A condition to be used against `CiipOperator` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input CiipOperatorCondition {
  """
  Checks for equality with the object’s `bcCorporateRegistryNumber` field.
  """
  bcCorporateRegistryNumber: BigFloat

  """Checks for equality with the object’s `dunsNumber` field."""
  dunsNumber: BigFloat

  """Checks for equality with the object’s `naicsCode` field."""
  naicsCode: BigFloat

  """Checks for equality with the object’s `operatorName` field."""
  operatorName: String

  """Checks for equality with the object’s `operatorTradeName` field."""
  operatorTradeName: String

  """Checks for equality with the object’s `rowId` field."""
  rowId: Int
}

"""A connection to a list of `CiipOperator` values."""
type CiipOperatorsConnection {
  """
  A list of edges which contains the `CiipOperator` and cursor to aid in pagination.
  """
  edges: [CiipOperatorsEdge!]!

  """A list of `CiipOperator` objects."""
  nodes: [CiipOperator]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CiipOperator` you could get from the connection."""
  totalCount: Int!
}

"""A `CiipOperator` edge in the connection."""
type CiipOperatorsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CiipOperator` at the end of the edge."""
  node: CiipOperator
}

"""Methods to use when ordering `CiipOperator`."""
enum CiipOperatorsOrderBy {
  BC_CORPORATE_REGISTRY_NUMBER_ASC
  BC_CORPORATE_REGISTRY_NUMBER_DESC
  DUNS_NUMBER_ASC
  DUNS_NUMBER_DESC
  ID_ASC
  ID_DESC
  NAICS_CODE_ASC
  NAICS_CODE_DESC
  NATURAL
  OPERATOR_NAME_ASC
  OPERATOR_NAME_DESC
  OPERATOR_TRADE_NAME_ASC
  OPERATOR_TRADE_NAME_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

type CiipProduction implements Node {
  associatedEmissions: BigFloat
  bcghgid: BigFloat
  comments: String
  fuelUnits: String

  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  id: ID!
  product: String
  quantity: BigFloat
  rowId: Int!
}

"""
A condition to be used against `CiipProduction` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input CiipProductionCondition {
  """Checks for equality with the object’s `associatedEmissions` field."""
  associatedEmissions: BigFloat

  """Checks for equality with the object’s `bcghgid` field."""
  bcghgid: BigFloat

  """Checks for equality with the object’s `comments` field."""
  comments: String

  """Checks for equality with the object’s `fuelUnits` field."""
  fuelUnits: String

  """Checks for equality with the object’s `product` field."""
  product: String

  """Checks for equality with the object’s `quantity` field."""
  quantity: BigFloat

  """Checks for equality with the object’s `rowId` field."""
  rowId: Int
}

"""A connection to a list of `CiipProduction` values."""
type CiipProductionsConnection {
  """
  A list of edges which contains the `CiipProduction` and cursor to aid in pagination.
  """
  edges: [CiipProductionsEdge!]!

  """A list of `CiipProduction` objects."""
  nodes: [CiipProduction]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CiipProduction` you could get from the connection."""
  totalCount: Int!
}

"""A `CiipProduction` edge in the connection."""
type CiipProductionsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CiipProduction` at the end of the edge."""
  node: CiipProduction
}

"""Methods to use when ordering `CiipProduction`."""
enum CiipProductionsOrderBy {
  ASSOCIATED_EMISSIONS_ASC
  ASSOCIATED_EMISSIONS_DESC
  BCGHGID_ASC
  BCGHGID_DESC
  COMMENTS_ASC
  COMMENTS_DESC
  FUEL_UNITS_ASC
  FUEL_UNITS_DESC
  ID_ASC
  ID_DESC
  NATURAL
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  PRODUCT_ASC
  PRODUCT_DESC
  QUANTITY_ASC
  QUANTITY_DESC
}

"""Table containing the benchmark and eligibility threshold for a product"""
type CiipUser implements Node {
  """Reads and enables pagination through a set of `ApplicationStatus`."""
  applicationStatusesByDeletedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ApplicationStatusCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `ApplicationStatus`."""
    orderBy: [ApplicationStatusesOrderBy!] = [PRIMARY_KEY_ASC]
  ): ApplicationStatusesConnection!

  """Reads and enables pagination through a set of `Benchmark`."""
  benchmarksByDeletedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: BenchmarkCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Benchmark`."""
    orderBy: [BenchmarksOrderBy!] = [PRIMARY_KEY_ASC]
  ): BenchmarksConnection!

  """Reads and enables pagination through a set of `CertificationUrl`."""
  certificationUrlsByDeletedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CertificationUrlCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CertificationUrl`."""
    orderBy: [CertificationUrlsOrderBy!] = [PRIMARY_KEY_ASC]
  ): CertificationUrlsConnection!

  """Reads a single `CiipUser` that is related to this `CiipUser`."""
  ciipUserByDeletedBy: CiipUser

  """Reads and enables pagination through a set of `CiipUserOrganisation`."""
  ciipUserOrganisationsByUserId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CiipUserOrganisationCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CiipUserOrganisation`."""
    orderBy: [CiipUserOrganisationsOrderBy!] = [PRIMARY_KEY_ASC]
  ): CiipUserOrganisationsConnection!

  """Reads and enables pagination through a set of `CiipUser`."""
  ciipUsersByDeletedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CiipUserCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CiipUser`."""
    orderBy: [CiipUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): CiipUsersConnection!

  """The date the user was updated"""
  createdAt: Datetime!

  """The person who updated the user"""
  createdBy: String

  """The date the user was deleted"""
  deletedAt: Datetime

  """The person who deleted the user"""
  deletedBy: Int

  """User's email address"""
  emailAddress: String

  """User's first name"""
  firstName: String

  """Reads and enables pagination through a set of `FormJson`."""
  formJsonsByDeletedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: FormJsonCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `FormJson`."""
    orderBy: [FormJsonsOrderBy!] = [PRIMARY_KEY_ASC]
  ): FormJsonsConnection!

  """Reads and enables pagination through a set of `FormResult`."""
  formResultsByDeletedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: FormResultCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `FormResult`."""
    orderBy: [FormResultsOrderBy!] = [PRIMARY_KEY_ASC]
  ): FormResultsConnection!

  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  id: ID!

  """User's last name"""
  lastName: String

  """User's occupation"""
  occupation: String

  """User's phone number"""
  phoneNumber: String

  """Unique ID for the user"""
  rowId: Int!

  """The date the user was updated"""
  updatedAt: Datetime!

  """The person who updated the user"""
  updatedBy: String

  """Universally Unique ID for the user used for auth"""
  uuid: UUID!
}

"""
A condition to be used against `CiipUser` object types. All fields are tested
for equality and combined with a logical ‘and.’
"""
input CiipUserCondition {
  """Checks for equality with the object’s `createdAt` field."""
  createdAt: Datetime

  """Checks for equality with the object’s `createdBy` field."""
  createdBy: String

  """Checks for equality with the object’s `deletedAt` field."""
  deletedAt: Datetime

  """Checks for equality with the object’s `deletedBy` field."""
  deletedBy: Int

  """Checks for equality with the object’s `emailAddress` field."""
  emailAddress: String

  """Checks for equality with the object’s `firstName` field."""
  firstName: String

  """Checks for equality with the object’s `lastName` field."""
  lastName: String

  """Checks for equality with the object’s `occupation` field."""
  occupation: String

  """Checks for equality with the object’s `phoneNumber` field."""
  phoneNumber: String

  """Checks for equality with the object’s `rowId` field."""
  rowId: Int

  """Checks for equality with the object’s `updatedAt` field."""
  updatedAt: Datetime

  """Checks for equality with the object’s `updatedBy` field."""
  updatedBy: String

  """Checks for equality with the object’s `uuid` field."""
  uuid: UUID
}

"""An input for mutations affecting `CiipUser`"""
input CiipUserInput {
  """The date the user was updated"""
  createdAt: Datetime

  """The person who updated the user"""
  createdBy: String

  """The date the user was deleted"""
  deletedAt: Datetime

  """The person who deleted the user"""
  deletedBy: Int

  """User's email address"""
  emailAddress: String

  """User's first name"""
  firstName: String

  """User's last name"""
  lastName: String

  """User's occupation"""
  occupation: String

  """User's phone number"""
  phoneNumber: String

  """The date the user was updated"""
  updatedAt: Datetime

  """The person who updated the user"""
  updatedBy: String

  """Universally Unique ID for the user used for auth"""
  uuid: UUID!
}

"""
Table containing the access rights for a user to report on behalf of an organisation
"""
type CiipUserOrganisation implements Node {
  """
  Reads a single `CiipUser` that is related to this `CiipUserOrganisation`.
  """
  ciipUserByUserId: CiipUser

  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  id: ID!

  """
  Reads a single `Organisation` that is related to this `CiipUserOrganisation`.
  """
  organisationByOrganisationId: Organisation

  """foreign key that references the organisation table"""
  organisationId: Int!

  """the status of the request to report on behalf of an organisation"""
  status: CiipUserOrganisationStatus

  """foreign key that references the user table"""
  userId: Int!
}

"""
A condition to be used against `CiipUserOrganisation` object types. All fields
are tested for equality and combined with a logical ‘and.’
"""
input CiipUserOrganisationCondition {
  """Checks for equality with the object’s `organisationId` field."""
  organisationId: Int

  """Checks for equality with the object’s `status` field."""
  status: CiipUserOrganisationStatus

  """Checks for equality with the object’s `userId` field."""
  userId: Int
}

"""An input for mutations affecting `CiipUserOrganisation`"""
input CiipUserOrganisationInput {
  """foreign key that references the organisation table"""
  organisationId: Int!

  """the status of the request to report on behalf of an organisation"""
  status: CiipUserOrganisationStatus

  """foreign key that references the user table"""
  userId: Int!
}

"""
Represents an update to a `CiipUserOrganisation`. Fields that are set will be updated.
"""
input CiipUserOrganisationPatch {
  """foreign key that references the organisation table"""
  organisationId: Int

  """the status of the request to report on behalf of an organisation"""
  status: CiipUserOrganisationStatus

  """foreign key that references the user table"""
  userId: Int
}

"""A connection to a list of `CiipUserOrganisation` values."""
type CiipUserOrganisationsConnection {
  """
  A list of edges which contains the `CiipUserOrganisation` and cursor to aid in pagination.
  """
  edges: [CiipUserOrganisationsEdge!]!

  """A list of `CiipUserOrganisation` objects."""
  nodes: [CiipUserOrganisation]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `CiipUserOrganisation` you could get from the connection.
  """
  totalCount: Int!
}

"""A `CiipUserOrganisation` edge in the connection."""
type CiipUserOrganisationsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CiipUserOrganisation` at the end of the edge."""
  node: CiipUserOrganisation
}

"""Methods to use when ordering `CiipUserOrganisation`."""
enum CiipUserOrganisationsOrderBy {
  NATURAL
  ORGANISATION_ID_ASC
  ORGANISATION_ID_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  STATUS_ASC
  STATUS_DESC
  USER_ID_ASC
  USER_ID_DESC
}

enum CiipUserOrganisationStatus {
  APPROVED
  PENDING
  REJECTED
}

"""
Represents an update to a `CiipUser`. Fields that are set will be updated.
"""
input CiipUserPatch {
  """The date the user was updated"""
  createdAt: Datetime

  """The person who updated the user"""
  createdBy: String

  """The date the user was deleted"""
  deletedAt: Datetime

  """The person who deleted the user"""
  deletedBy: Int

  """User's email address"""
  emailAddress: String

  """User's first name"""
  firstName: String

  """User's last name"""
  lastName: String

  """User's occupation"""
  occupation: String

  """User's phone number"""
  phoneNumber: String

  """The date the user was updated"""
  updatedAt: Datetime

  """The person who updated the user"""
  updatedBy: String

  """Universally Unique ID for the user used for auth"""
  uuid: UUID
}

"""A connection to a list of `CiipUser` values."""
type CiipUsersConnection {
  """
  A list of edges which contains the `CiipUser` and cursor to aid in pagination.
  """
  edges: [CiipUsersEdge!]!

  """A list of `CiipUser` objects."""
  nodes: [CiipUser]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CiipUser` you could get from the connection."""
  totalCount: Int!
}

"""A `CiipUser` edge in the connection."""
type CiipUsersEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CiipUser` at the end of the edge."""
  node: CiipUser
}

"""Methods to use when ordering `CiipUser`."""
enum CiipUsersOrderBy {
  CREATED_AT_ASC
  CREATED_AT_DESC
  CREATED_BY_ASC
  CREATED_BY_DESC
  DELETED_AT_ASC
  DELETED_AT_DESC
  DELETED_BY_ASC
  DELETED_BY_DESC
  EMAIL_ADDRESS_ASC
  EMAIL_ADDRESS_DESC
  FIRST_NAME_ASC
  FIRST_NAME_DESC
  ID_ASC
  ID_DESC
  LAST_NAME_ASC
  LAST_NAME_DESC
  NATURAL
  OCCUPATION_ASC
  OCCUPATION_DESC
  PHONE_NUMBER_ASC
  PHONE_NUMBER_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  UPDATED_AT_ASC
  UPDATED_AT_DESC
  UPDATED_BY_ASC
  UPDATED_BY_DESC
  UUID_ASC
  UUID_DESC
}

"""All input for the create `Application` mutation."""
input CreateApplicationInput {
  """The `Application` to be created by this mutation."""
  application: ApplicationInput!

  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
}

"""All input for the `createApplicationMutationChain` mutation."""
input CreateApplicationMutationChainInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  facilityIdInput: Int!
}

"""The output of our `createApplicationMutationChain` mutation."""
type CreateApplicationMutationChainPayload {
  application: Application

  """An edge for our `Application`. May be used by Relay 1."""
  applicationEdge(
    """The method to use when ordering `Application`."""
    orderBy: [ApplicationsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ApplicationsEdge

  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """Reads a single `Facility` that is related to this `Application`."""
  facilityByFacilityId: Facility

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `ReportingYear` that is related to this `Application`."""
  reportingYearByReportingYear: ReportingYear
}

"""The output of our create `Application` mutation."""
type CreateApplicationPayload {
  """The `Application` that was created by this mutation."""
  application: Application

  """An edge for our `Application`. May be used by Relay 1."""
  applicationEdge(
    """The method to use when ordering `Application`."""
    orderBy: [ApplicationsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ApplicationsEdge

  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """Reads a single `Facility` that is related to this `Application`."""
  facilityByFacilityId: Facility

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `ReportingYear` that is related to this `Application`."""
  reportingYearByReportingYear: ReportingYear
}

"""All input for the create `ApplicationReview` mutation."""
input CreateApplicationReviewInput {
  """The `ApplicationReview` to be created by this mutation."""
  applicationReview: ApplicationReviewInput!

  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
}

"""All input for the `createApplicationReviewMutationChain` mutation."""
input CreateApplicationReviewMutationChainInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  formResultIdInput: Int!
  reviewCommentInput: String!
  reviewStatusInput: ApplicationReviewStatus!
}

"""The output of our `createApplicationReviewMutationChain` mutation."""
type CreateApplicationReviewMutationChainPayload {
  applicationReview: ApplicationReview

  """An edge for our `ApplicationReview`. May be used by Relay 1."""
  applicationReviewEdge(
    """The method to use when ordering `ApplicationReview`."""
    orderBy: [ApplicationReviewsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ApplicationReviewsEdge

  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Reads a single `FormResult` that is related to this `ApplicationReview`.
  """
  formResultByFormResultId: FormResult

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""The output of our create `ApplicationReview` mutation."""
type CreateApplicationReviewPayload {
  """The `ApplicationReview` that was created by this mutation."""
  applicationReview: ApplicationReview

  """An edge for our `ApplicationReview`. May be used by Relay 1."""
  applicationReviewEdge(
    """The method to use when ordering `ApplicationReview`."""
    orderBy: [ApplicationReviewsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ApplicationReviewsEdge

  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Reads a single `FormResult` that is related to this `ApplicationReview`.
  """
  formResultByFormResultId: FormResult

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the create `ApplicationStatus` mutation."""
input CreateApplicationStatusInput {
  """The `ApplicationStatus` to be created by this mutation."""
  applicationStatus: ApplicationStatusInput!

  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
}

"""The output of our create `ApplicationStatus` mutation."""
type CreateApplicationStatusPayload {
  """
  Reads a single `Application` that is related to this `ApplicationStatus`.
  """
  applicationByApplicationId: Application

  """The `ApplicationStatus` that was created by this mutation."""
  applicationStatus: ApplicationStatus

  """An edge for our `ApplicationStatus`. May be used by Relay 1."""
  applicationStatusEdge(
    """The method to use when ordering `ApplicationStatus`."""
    orderBy: [ApplicationStatusesOrderBy!] = [PRIMARY_KEY_ASC]
  ): ApplicationStatusesEdge

  """Reads a single `CiipUser` that is related to this `ApplicationStatus`."""
  ciipUserByDeletedBy: CiipUser

  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the create `Benchmark` mutation."""
input CreateBenchmarkInput {
  """The `Benchmark` to be created by this mutation."""
  benchmark: BenchmarkInput!

  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
}

"""All input for the `createBenchmarkMutationChain` mutation."""
input CreateBenchmarkMutationChainInput {
  benchmarkInput: Int

  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  eligibilityThresholdInput: Int
  endDateInput: Datetime
  prevBenchmarkIdInput: Int
  productIdInput: Int
  startDateInput: Datetime
}

"""The output of our `createBenchmarkMutationChain` mutation."""
type CreateBenchmarkMutationChainPayload {
  benchmark: Benchmark

  """An edge for our `Benchmark`. May be used by Relay 1."""
  benchmarkEdge(
    """The method to use when ordering `Benchmark`."""
    orderBy: [BenchmarksOrderBy!] = [PRIMARY_KEY_ASC]
  ): BenchmarksEdge

  """Reads a single `CiipUser` that is related to this `Benchmark`."""
  ciipUserByDeletedBy: CiipUser

  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """Reads a single `Product` that is related to this `Benchmark`."""
  productByProductId: Product

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""The output of our create `Benchmark` mutation."""
type CreateBenchmarkPayload {
  """The `Benchmark` that was created by this mutation."""
  benchmark: Benchmark

  """An edge for our `Benchmark`. May be used by Relay 1."""
  benchmarkEdge(
    """The method to use when ordering `Benchmark`."""
    orderBy: [BenchmarksOrderBy!] = [PRIMARY_KEY_ASC]
  ): BenchmarksEdge

  """Reads a single `CiipUser` that is related to this `Benchmark`."""
  ciipUserByDeletedBy: CiipUser

  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """Reads a single `Product` that is related to this `Benchmark`."""
  productByProductId: Product

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the create `CertificationUrl` mutation."""
input CreateCertificationUrlInput {
  """The `CertificationUrl` to be created by this mutation."""
  certificationUrl: CertificationUrlInput!

  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
}

"""The output of our create `CertificationUrl` mutation."""
type CreateCertificationUrlPayload {
  """
  Reads a single `Application` that is related to this `CertificationUrl`.
  """
  applicationByApplicationId: Application

  """The `CertificationUrl` that was created by this mutation."""
  certificationUrl: CertificationUrl

  """An edge for our `CertificationUrl`. May be used by Relay 1."""
  certificationUrlEdge(
    """The method to use when ordering `CertificationUrl`."""
    orderBy: [CertificationUrlsOrderBy!] = [PRIMARY_KEY_ASC]
  ): CertificationUrlsEdge

  """Reads a single `CiipUser` that is related to this `CertificationUrl`."""
  ciipUserByDeletedBy: CiipUser

  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the create `CiipApplicationWizard` mutation."""
input CreateCiipApplicationWizardInput {
  """The `CiipApplicationWizard` to be created by this mutation."""
  ciipApplicationWizard: CiipApplicationWizardInput!

  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
}

"""The output of our create `CiipApplicationWizard` mutation."""
type CreateCiipApplicationWizardPayload {
  """The `CiipApplicationWizard` that was created by this mutation."""
  ciipApplicationWizard: CiipApplicationWizard

  """An edge for our `CiipApplicationWizard`. May be used by Relay 1."""
  ciipApplicationWizardEdge(
    """The method to use when ordering `CiipApplicationWizard`."""
    orderBy: [CiipApplicationWizardsOrderBy!] = [PRIMARY_KEY_ASC]
  ): CiipApplicationWizardsEdge

  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Reads a single `FormJson` that is related to this `CiipApplicationWizard`.
  """
  formJsonByFormId: FormJson

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the create `CiipUser` mutation."""
input CreateCiipUserInput {
  """The `CiipUser` to be created by this mutation."""
  ciipUser: CiipUserInput!

  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
}

"""All input for the create `CiipUserOrganisation` mutation."""
input CreateCiipUserOrganisationInput {
  """The `CiipUserOrganisation` to be created by this mutation."""
  ciipUserOrganisation: CiipUserOrganisationInput!

  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
}

"""The output of our create `CiipUserOrganisation` mutation."""
type CreateCiipUserOrganisationPayload {
  """
  Reads a single `CiipUser` that is related to this `CiipUserOrganisation`.
  """
  ciipUserByUserId: CiipUser

  """The `CiipUserOrganisation` that was created by this mutation."""
  ciipUserOrganisation: CiipUserOrganisation

  """An edge for our `CiipUserOrganisation`. May be used by Relay 1."""
  ciipUserOrganisationEdge(
    """The method to use when ordering `CiipUserOrganisation`."""
    orderBy: [CiipUserOrganisationsOrderBy!] = [PRIMARY_KEY_ASC]
  ): CiipUserOrganisationsEdge

  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Reads a single `Organisation` that is related to this `CiipUserOrganisation`.
  """
  organisationByOrganisationId: Organisation

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""The output of our create `CiipUser` mutation."""
type CreateCiipUserPayload {
  """The `CiipUser` that was created by this mutation."""
  ciipUser: CiipUser

  """Reads a single `CiipUser` that is related to this `CiipUser`."""
  ciipUserByDeletedBy: CiipUser

  """An edge for our `CiipUser`. May be used by Relay 1."""
  ciipUserEdge(
    """The method to use when ordering `CiipUser`."""
    orderBy: [CiipUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): CiipUsersEdge

  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the create `EmissionCategoryGas` mutation."""
input CreateEmissionCategoryGasInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `EmissionCategoryGas` to be created by this mutation."""
  emissionCategoryGas: EmissionCategoryGasInput!
}

"""The output of our create `EmissionCategoryGas` mutation."""
type CreateEmissionCategoryGasPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `EmissionCategoryGas` that was created by this mutation."""
  emissionCategoryGas: EmissionCategoryGas

  """An edge for our `EmissionCategoryGas`. May be used by Relay 1."""
  emissionCategoryGasEdge(
    """The method to use when ordering `EmissionCategoryGas`."""
    orderBy: [EmissionCategoryGasesOrderBy!] = [PRIMARY_KEY_ASC]
  ): EmissionCategoryGasesEdge

  """Reads a single `Gas` that is related to this `EmissionCategoryGas`."""
  gasByGasId: Gas

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the create `Facility` mutation."""
input CreateFacilityInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `Facility` to be created by this mutation."""
  facility: FacilityInput!
}

"""The output of our create `Facility` mutation."""
type CreateFacilityPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Facility` that was created by this mutation."""
  facility: Facility

  """An edge for our `Facility`. May be used by Relay 1."""
  facilityEdge(
    """The method to use when ordering `Facility`."""
    orderBy: [FacilitiesOrderBy!] = [PRIMARY_KEY_ASC]
  ): FacilitiesEdge

  """Reads a single `Organisation` that is related to this `Facility`."""
  organisationByOrganisationId: Organisation

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the create `FormJson` mutation."""
input CreateFormJsonInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `FormJson` to be created by this mutation."""
  formJson: FormJsonInput!
}

"""The output of our create `FormJson` mutation."""
type CreateFormJsonPayload {
  """Reads a single `CiipUser` that is related to this `FormJson`."""
  ciipUserByDeletedBy: CiipUser

  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `FormJson` that was created by this mutation."""
  formJson: FormJson

  """An edge for our `FormJson`. May be used by Relay 1."""
  formJsonEdge(
    """The method to use when ordering `FormJson`."""
    orderBy: [FormJsonsOrderBy!] = [PRIMARY_KEY_ASC]
  ): FormJsonsEdge

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the create `FormResult` mutation."""
input CreateFormResultInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `FormResult` to be created by this mutation."""
  formResult: FormResultInput!
}

"""The output of our create `FormResult` mutation."""
type CreateFormResultPayload {
  """Reads a single `Application` that is related to this `FormResult`."""
  applicationByApplicationId: Application

  """Reads a single `CiipUser` that is related to this `FormResult`."""
  ciipUserByDeletedBy: CiipUser

  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """Reads a single `FormJson` that is related to this `FormResult`."""
  formJsonByFormId: FormJson

  """The `FormResult` that was created by this mutation."""
  formResult: FormResult

  """An edge for our `FormResult`. May be used by Relay 1."""
  formResultEdge(
    """The method to use when ordering `FormResult`."""
    orderBy: [FormResultsOrderBy!] = [PRIMARY_KEY_ASC]
  ): FormResultsEdge

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the create `Fuel` mutation."""
input CreateFuelInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `Fuel` to be created by this mutation."""
  fuel: FuelInput!
}

"""The output of our create `Fuel` mutation."""
type CreateFuelPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Fuel` that was created by this mutation."""
  fuel: Fuel

  """An edge for our `Fuel`. May be used by Relay 1."""
  fuelEdge(
    """The method to use when ordering `Fuel`."""
    orderBy: [FuelsOrderBy!] = [PRIMARY_KEY_ASC]
  ): FuelsEdge

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the create `Gas` mutation."""
input CreateGasInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `Gas` to be created by this mutation."""
  gas: GasInput!
}

"""The output of our create `Gas` mutation."""
type CreateGasPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Gas` that was created by this mutation."""
  gas: Gas

  """An edge for our `Gas`. May be used by Relay 1."""
  gasEdge(
    """The method to use when ordering `Gas`."""
    orderBy: [GasesOrderBy!] = [PRIMARY_KEY_ASC]
  ): GasesEdge

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the create `Organisation` mutation."""
input CreateOrganisationInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `Organisation` to be created by this mutation."""
  organisation: OrganisationInput!
}

"""The output of our create `Organisation` mutation."""
type CreateOrganisationPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Organisation` that was created by this mutation."""
  organisation: Organisation

  """An edge for our `Organisation`. May be used by Relay 1."""
  organisationEdge(
    """The method to use when ordering `Organisation`."""
    orderBy: [OrganisationsOrderBy!] = [PRIMARY_KEY_ASC]
  ): OrganisationsEdge

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the create `ProductForm` mutation."""
input CreateProductFormInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `ProductForm` to be created by this mutation."""
  productForm: ProductFormInput!
}

"""The output of our create `ProductForm` mutation."""
type CreateProductFormPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `ProductForm` that was created by this mutation."""
  productForm: ProductForm

  """An edge for our `ProductForm`. May be used by Relay 1."""
  productFormEdge(
    """The method to use when ordering `ProductForm`."""
    orderBy: [ProductFormsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ProductFormsEdge

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the create `Product` mutation."""
input CreateProductInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `Product` to be created by this mutation."""
  product: ProductInput!
}

"""The output of our create `Product` mutation."""
type CreateProductPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Product` that was created by this mutation."""
  product: Product

  """An edge for our `Product`. May be used by Relay 1."""
  productEdge(
    """The method to use when ordering `Product`."""
    orderBy: [ProductsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ProductsEdge

  """Reads a single `ProductForm` that is related to this `Product`."""
  productFormByProductFormId: ProductForm

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the create `ReportingYear` mutation."""
input CreateReportingYearInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `ReportingYear` to be created by this mutation."""
  reportingYear: ReportingYearInput!
}

"""The output of our create `ReportingYear` mutation."""
type CreateReportingYearPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """The `ReportingYear` that was created by this mutation."""
  reportingYear: ReportingYear

  """An edge for our `ReportingYear`. May be used by Relay 1."""
  reportingYearEdge(
    """The method to use when ordering `ReportingYear`."""
    orderBy: [ReportingYearsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ReportingYearsEdge
}

"""All input for the create `ReviewComment` mutation."""
input CreateReviewCommentInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `ReviewComment` to be created by this mutation."""
  reviewComment: ReviewCommentInput!
}

"""The output of our create `ReviewComment` mutation."""
type CreateReviewCommentPayload {
  """
  Reads a single `ApplicationReview` that is related to this `ReviewComment`.
  """
  applicationReviewByApplicationReviewId: ApplicationReview

  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """The `ReviewComment` that was created by this mutation."""
  reviewComment: ReviewComment

  """An edge for our `ReviewComment`. May be used by Relay 1."""
  reviewCommentEdge(
    """The method to use when ordering `ReviewComment`."""
    orderBy: [ReviewCommentsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ReviewCommentsEdge
}

"""A location in a connection that can be used for resuming pagination."""
scalar Cursor

"""The day, does not include a time."""
scalar Date

"""
A point in time as described by the [ISO
8601](https://en.wikipedia.org/wiki/ISO_8601) standard. May or may not include a timezone.
"""
scalar Datetime

"""All input for the `deleteApplicationByRowId` mutation."""
input DeleteApplicationByRowIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The application id used for reference and join"""
  rowId: Int!
}

"""All input for the `deleteApplication` mutation."""
input DeleteApplicationInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Application` to be deleted.
  """
  id: ID!
}

"""The output of our delete `Application` mutation."""
type DeleteApplicationPayload {
  """The `Application` that was deleted by this mutation."""
  application: Application

  """An edge for our `Application`. May be used by Relay 1."""
  applicationEdge(
    """The method to use when ordering `Application`."""
    orderBy: [ApplicationsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ApplicationsEdge

  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  deletedApplicationId: ID

  """Reads a single `Facility` that is related to this `Application`."""
  facilityByFacilityId: Facility

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `ReportingYear` that is related to this `Application`."""
  reportingYearByReportingYear: ReportingYear
}

"""All input for the `deleteApplicationReviewByRowId` mutation."""
input DeleteApplicationReviewByRowIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The application_review id used for reference and join"""
  rowId: Int!
}

"""All input for the `deleteApplicationReview` mutation."""
input DeleteApplicationReviewInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `ApplicationReview` to be deleted.
  """
  id: ID!
}

"""The output of our delete `ApplicationReview` mutation."""
type DeleteApplicationReviewPayload {
  """The `ApplicationReview` that was deleted by this mutation."""
  applicationReview: ApplicationReview

  """An edge for our `ApplicationReview`. May be used by Relay 1."""
  applicationReviewEdge(
    """The method to use when ordering `ApplicationReview`."""
    orderBy: [ApplicationReviewsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ApplicationReviewsEdge

  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  deletedApplicationReviewId: ID

  """
  Reads a single `FormResult` that is related to this `ApplicationReview`.
  """
  formResultByFormResultId: FormResult

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `deleteApplicationStatusByRowId` mutation."""
input DeleteApplicationStatusByRowIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The id used for reference and join"""
  rowId: Int!
}

"""All input for the `deleteApplicationStatus` mutation."""
input DeleteApplicationStatusInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `ApplicationStatus` to be deleted.
  """
  id: ID!
}

"""The output of our delete `ApplicationStatus` mutation."""
type DeleteApplicationStatusPayload {
  """
  Reads a single `Application` that is related to this `ApplicationStatus`.
  """
  applicationByApplicationId: Application

  """The `ApplicationStatus` that was deleted by this mutation."""
  applicationStatus: ApplicationStatus

  """An edge for our `ApplicationStatus`. May be used by Relay 1."""
  applicationStatusEdge(
    """The method to use when ordering `ApplicationStatus`."""
    orderBy: [ApplicationStatusesOrderBy!] = [PRIMARY_KEY_ASC]
  ): ApplicationStatusesEdge

  """Reads a single `CiipUser` that is related to this `ApplicationStatus`."""
  ciipUserByDeletedBy: CiipUser

  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  deletedApplicationStatusId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `deleteBenchmarkByRowId` mutation."""
input DeleteBenchmarkByRowIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """Unique ID for the benchmark"""
  rowId: Int!
}

"""All input for the `deleteBenchmark` mutation."""
input DeleteBenchmarkInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Benchmark` to be deleted.
  """
  id: ID!
}

"""The output of our delete `Benchmark` mutation."""
type DeleteBenchmarkPayload {
  """The `Benchmark` that was deleted by this mutation."""
  benchmark: Benchmark

  """An edge for our `Benchmark`. May be used by Relay 1."""
  benchmarkEdge(
    """The method to use when ordering `Benchmark`."""
    orderBy: [BenchmarksOrderBy!] = [PRIMARY_KEY_ASC]
  ): BenchmarksEdge

  """Reads a single `CiipUser` that is related to this `Benchmark`."""
  ciipUserByDeletedBy: CiipUser

  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  deletedBenchmarkId: ID

  """Reads a single `Product` that is related to this `Benchmark`."""
  productByProductId: Product

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `deleteCertificationUrlByRowId` mutation."""
input DeleteCertificationUrlByRowIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """Unique ID for the certification_url"""
  rowId: Int!
}

"""All input for the `deleteCertificationUrl` mutation."""
input DeleteCertificationUrlInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `CertificationUrl` to be deleted.
  """
  id: ID!
}

"""The output of our delete `CertificationUrl` mutation."""
type DeleteCertificationUrlPayload {
  """
  Reads a single `Application` that is related to this `CertificationUrl`.
  """
  applicationByApplicationId: Application

  """The `CertificationUrl` that was deleted by this mutation."""
  certificationUrl: CertificationUrl

  """An edge for our `CertificationUrl`. May be used by Relay 1."""
  certificationUrlEdge(
    """The method to use when ordering `CertificationUrl`."""
    orderBy: [CertificationUrlsOrderBy!] = [PRIMARY_KEY_ASC]
  ): CertificationUrlsEdge

  """Reads a single `CiipUser` that is related to this `CertificationUrl`."""
  ciipUserByDeletedBy: CiipUser

  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  deletedCertificationUrlId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `deleteCiipApplicationWizardByFormId` mutation."""
input DeleteCiipApplicationWizardByFormIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The id of the form"""
  formId: Int!
}

"""All input for the `deleteCiipApplicationWizard` mutation."""
input DeleteCiipApplicationWizardInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `CiipApplicationWizard` to be deleted.
  """
  id: ID!
}

"""The output of our delete `CiipApplicationWizard` mutation."""
type DeleteCiipApplicationWizardPayload {
  """The `CiipApplicationWizard` that was deleted by this mutation."""
  ciipApplicationWizard: CiipApplicationWizard

  """An edge for our `CiipApplicationWizard`. May be used by Relay 1."""
  ciipApplicationWizardEdge(
    """The method to use when ordering `CiipApplicationWizard`."""
    orderBy: [CiipApplicationWizardsOrderBy!] = [PRIMARY_KEY_ASC]
  ): CiipApplicationWizardsEdge

  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  deletedCiipApplicationWizardId: ID

  """
  Reads a single `FormJson` that is related to this `CiipApplicationWizard`.
  """
  formJsonByFormId: FormJson

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `deleteCiipUserByRowId` mutation."""
input DeleteCiipUserByRowIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """Unique ID for the user"""
  rowId: Int!
}

"""All input for the `deleteCiipUser` mutation."""
input DeleteCiipUserInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `CiipUser` to be deleted.
  """
  id: ID!
}

"""
All input for the `deleteCiipUserOrganisationByUserIdAndOrganisationId` mutation.
"""
input DeleteCiipUserOrganisationByUserIdAndOrganisationIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """foreign key that references the organisation table"""
  organisationId: Int!

  """foreign key that references the user table"""
  userId: Int!
}

"""All input for the `deleteCiipUserOrganisation` mutation."""
input DeleteCiipUserOrganisationInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `CiipUserOrganisation` to be deleted.
  """
  id: ID!
}

"""The output of our delete `CiipUserOrganisation` mutation."""
type DeleteCiipUserOrganisationPayload {
  """
  Reads a single `CiipUser` that is related to this `CiipUserOrganisation`.
  """
  ciipUserByUserId: CiipUser

  """The `CiipUserOrganisation` that was deleted by this mutation."""
  ciipUserOrganisation: CiipUserOrganisation

  """An edge for our `CiipUserOrganisation`. May be used by Relay 1."""
  ciipUserOrganisationEdge(
    """The method to use when ordering `CiipUserOrganisation`."""
    orderBy: [CiipUserOrganisationsOrderBy!] = [PRIMARY_KEY_ASC]
  ): CiipUserOrganisationsEdge

  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  deletedCiipUserOrganisationId: ID

  """
  Reads a single `Organisation` that is related to this `CiipUserOrganisation`.
  """
  organisationByOrganisationId: Organisation

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""The output of our delete `CiipUser` mutation."""
type DeleteCiipUserPayload {
  """The `CiipUser` that was deleted by this mutation."""
  ciipUser: CiipUser

  """Reads a single `CiipUser` that is related to this `CiipUser`."""
  ciipUserByDeletedBy: CiipUser

  """An edge for our `CiipUser`. May be used by Relay 1."""
  ciipUserEdge(
    """The method to use when ordering `CiipUser`."""
    orderBy: [CiipUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): CiipUsersEdge

  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  deletedCiipUserId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `deleteEmissionCategoryGasByRowId` mutation."""
input DeleteEmissionCategoryGasByRowIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """Unique ID for the emission_category_gas"""
  rowId: Int!
}

"""All input for the `deleteEmissionCategoryGas` mutation."""
input DeleteEmissionCategoryGasInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `EmissionCategoryGas` to be deleted.
  """
  id: ID!
}

"""The output of our delete `EmissionCategoryGas` mutation."""
type DeleteEmissionCategoryGasPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  deletedEmissionCategoryGasId: ID

  """The `EmissionCategoryGas` that was deleted by this mutation."""
  emissionCategoryGas: EmissionCategoryGas

  """An edge for our `EmissionCategoryGas`. May be used by Relay 1."""
  emissionCategoryGasEdge(
    """The method to use when ordering `EmissionCategoryGas`."""
    orderBy: [EmissionCategoryGasesOrderBy!] = [PRIMARY_KEY_ASC]
  ): EmissionCategoryGasesEdge

  """Reads a single `Gas` that is related to this `EmissionCategoryGas`."""
  gasByGasId: Gas

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `deleteFacilityByRowId` mutation."""
input DeleteFacilityByRowIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """unique id for the facility"""
  rowId: Int!
}

"""All input for the `deleteFacility` mutation."""
input DeleteFacilityInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Facility` to be deleted.
  """
  id: ID!
}

"""The output of our delete `Facility` mutation."""
type DeleteFacilityPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  deletedFacilityId: ID

  """The `Facility` that was deleted by this mutation."""
  facility: Facility

  """An edge for our `Facility`. May be used by Relay 1."""
  facilityEdge(
    """The method to use when ordering `Facility`."""
    orderBy: [FacilitiesOrderBy!] = [PRIMARY_KEY_ASC]
  ): FacilitiesEdge

  """Reads a single `Organisation` that is related to this `Facility`."""
  organisationByOrganisationId: Organisation

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `deleteFormJsonByRowId` mutation."""
input DeleteFormJsonByRowIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """Unique ID for the form"""
  rowId: Int!
}

"""All input for the `deleteFormJson` mutation."""
input DeleteFormJsonInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `FormJson` to be deleted.
  """
  id: ID!
}

"""The output of our delete `FormJson` mutation."""
type DeleteFormJsonPayload {
  """Reads a single `CiipUser` that is related to this `FormJson`."""
  ciipUserByDeletedBy: CiipUser

  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  deletedFormJsonId: ID

  """The `FormJson` that was deleted by this mutation."""
  formJson: FormJson

  """An edge for our `FormJson`. May be used by Relay 1."""
  formJsonEdge(
    """The method to use when ordering `FormJson`."""
    orderBy: [FormJsonsOrderBy!] = [PRIMARY_KEY_ASC]
  ): FormJsonsEdge

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `deleteFormResultByRowId` mutation."""
input DeleteFormResultByRowIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """Unique ID for the form"""
  rowId: Int!
}

"""All input for the `deleteFormResult` mutation."""
input DeleteFormResultInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `FormResult` to be deleted.
  """
  id: ID!
}

"""The output of our delete `FormResult` mutation."""
type DeleteFormResultPayload {
  """Reads a single `Application` that is related to this `FormResult`."""
  applicationByApplicationId: Application

  """Reads a single `CiipUser` that is related to this `FormResult`."""
  ciipUserByDeletedBy: CiipUser

  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  deletedFormResultId: ID

  """Reads a single `FormJson` that is related to this `FormResult`."""
  formJsonByFormId: FormJson

  """The `FormResult` that was deleted by this mutation."""
  formResult: FormResult

  """An edge for our `FormResult`. May be used by Relay 1."""
  formResultEdge(
    """The method to use when ordering `FormResult`."""
    orderBy: [FormResultsOrderBy!] = [PRIMARY_KEY_ASC]
  ): FormResultsEdge

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `deleteFuelByRowId` mutation."""
input DeleteFuelByRowIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """Unique ID for the fuel"""
  rowId: Int!
}

"""All input for the `deleteFuel` mutation."""
input DeleteFuelInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Fuel` to be deleted.
  """
  id: ID!
}

"""The output of our delete `Fuel` mutation."""
type DeleteFuelPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  deletedFuelId: ID

  """The `Fuel` that was deleted by this mutation."""
  fuel: Fuel

  """An edge for our `Fuel`. May be used by Relay 1."""
  fuelEdge(
    """The method to use when ordering `Fuel`."""
    orderBy: [FuelsOrderBy!] = [PRIMARY_KEY_ASC]
  ): FuelsEdge

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `deleteGasByRowId` mutation."""
input DeleteGasByRowIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """Unique ID for the gas"""
  rowId: Int!
}

"""All input for the `deleteGas` mutation."""
input DeleteGasInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Gas` to be deleted.
  """
  id: ID!
}

"""The output of our delete `Gas` mutation."""
type DeleteGasPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  deletedGasId: ID

  """The `Gas` that was deleted by this mutation."""
  gas: Gas

  """An edge for our `Gas`. May be used by Relay 1."""
  gasEdge(
    """The method to use when ordering `Gas`."""
    orderBy: [GasesOrderBy!] = [PRIMARY_KEY_ASC]
  ): GasesEdge

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `deleteOrganisationByRowId` mutation."""
input DeleteOrganisationByRowIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """unique if for the organisation"""
  rowId: Int!
}

"""All input for the `deleteOrganisation` mutation."""
input DeleteOrganisationInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Organisation` to be deleted.
  """
  id: ID!
}

"""The output of our delete `Organisation` mutation."""
type DeleteOrganisationPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  deletedOrganisationId: ID

  """The `Organisation` that was deleted by this mutation."""
  organisation: Organisation

  """An edge for our `Organisation`. May be used by Relay 1."""
  organisationEdge(
    """The method to use when ordering `Organisation`."""
    orderBy: [OrganisationsOrderBy!] = [PRIMARY_KEY_ASC]
  ): OrganisationsEdge

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `deleteProductByRowId` mutation."""
input DeleteProductByRowIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """Unique ID for the product"""
  rowId: Int!
}

"""All input for the `deleteProductFormByRowId` mutation."""
input DeleteProductFormByRowIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """A generated primary key id for the row"""
  rowId: Int!
}

"""All input for the `deleteProductForm` mutation."""
input DeleteProductFormInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `ProductForm` to be deleted.
  """
  id: ID!
}

"""The output of our delete `ProductForm` mutation."""
type DeleteProductFormPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  deletedProductFormId: ID

  """The `ProductForm` that was deleted by this mutation."""
  productForm: ProductForm

  """An edge for our `ProductForm`. May be used by Relay 1."""
  productFormEdge(
    """The method to use when ordering `ProductForm`."""
    orderBy: [ProductFormsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ProductFormsEdge

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `deleteProduct` mutation."""
input DeleteProductInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Product` to be deleted.
  """
  id: ID!
}

"""The output of our delete `Product` mutation."""
type DeleteProductPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  deletedProductId: ID

  """The `Product` that was deleted by this mutation."""
  product: Product

  """An edge for our `Product`. May be used by Relay 1."""
  productEdge(
    """The method to use when ordering `Product`."""
    orderBy: [ProductsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ProductsEdge

  """Reads a single `ProductForm` that is related to this `Product`."""
  productFormByProductFormId: ProductForm

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `deleteReportingYearByReportingYear` mutation."""
input DeleteReportingYearByReportingYearInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The current reporting year"""
  reportingYear: Int!
}

"""All input for the `deleteReportingYear` mutation."""
input DeleteReportingYearInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `ReportingYear` to be deleted.
  """
  id: ID!
}

"""The output of our delete `ReportingYear` mutation."""
type DeleteReportingYearPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  deletedReportingYearId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """The `ReportingYear` that was deleted by this mutation."""
  reportingYear: ReportingYear

  """An edge for our `ReportingYear`. May be used by Relay 1."""
  reportingYearEdge(
    """The method to use when ordering `ReportingYear`."""
    orderBy: [ReportingYearsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ReportingYearsEdge
}

"""All input for the `deleteReviewCommentByRowId` mutation."""
input DeleteReviewCommentByRowIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """Unique ID for the review_comment"""
  rowId: Int!
}

"""All input for the `deleteReviewComment` mutation."""
input DeleteReviewCommentInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `ReviewComment` to be deleted.
  """
  id: ID!
}

"""The output of our delete `ReviewComment` mutation."""
type DeleteReviewCommentPayload {
  """
  Reads a single `ApplicationReview` that is related to this `ReviewComment`.
  """
  applicationReviewByApplicationReviewId: ApplicationReview

  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  deletedReviewCommentId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """The `ReviewComment` that was deleted by this mutation."""
  reviewComment: ReviewComment

  """An edge for our `ReviewComment`. May be used by Relay 1."""
  reviewCommentEdge(
    """The method to use when ordering `ReviewComment`."""
    orderBy: [ReviewCommentsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ReviewCommentsEdge
}

"""Table of emission categories used in the CIIP program"""
type EmissionCategoryGas implements Node {
  """Creation date of row"""
  createdAt: Datetime!

  """Creator of row"""
  createdBy: String

  """Date of deletion"""
  deletedAt: Datetime

  """The user who deleted the row"""
  deletedBy: String

  """The emission category"""
  emissionCategory: String

  """The description of the emission category"""
  emissionCategoryDescription: String

  """Reads a single `Gas` that is related to this `EmissionCategoryGas`."""
  gasByGasId: Gas

  """Foreign key to gas"""
  gasId: Int

  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  id: ID!

  """Unique ID for the emission_category_gas"""
  rowId: Int!

  """Updated date of row"""
  updatedAt: Datetime!

  """Updator of row"""
  updatedBy: String
}

"""
A condition to be used against `EmissionCategoryGas` object types. All fields
are tested for equality and combined with a logical ‘and.’
"""
input EmissionCategoryGasCondition {
  """Checks for equality with the object’s `createdAt` field."""
  createdAt: Datetime

  """Checks for equality with the object’s `createdBy` field."""
  createdBy: String

  """Checks for equality with the object’s `deletedAt` field."""
  deletedAt: Datetime

  """Checks for equality with the object’s `deletedBy` field."""
  deletedBy: String

  """Checks for equality with the object’s `emissionCategory` field."""
  emissionCategory: String

  """
  Checks for equality with the object’s `emissionCategoryDescription` field.
  """
  emissionCategoryDescription: String

  """Checks for equality with the object’s `gasId` field."""
  gasId: Int

  """Checks for equality with the object’s `rowId` field."""
  rowId: Int

  """Checks for equality with the object’s `updatedAt` field."""
  updatedAt: Datetime

  """Checks for equality with the object’s `updatedBy` field."""
  updatedBy: String
}

"""A connection to a list of `EmissionCategoryGas` values."""
type EmissionCategoryGasesConnection {
  """
  A list of edges which contains the `EmissionCategoryGas` and cursor to aid in pagination.
  """
  edges: [EmissionCategoryGasesEdge!]!

  """A list of `EmissionCategoryGas` objects."""
  nodes: [EmissionCategoryGas]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `EmissionCategoryGas` you could get from the connection.
  """
  totalCount: Int!
}

"""A `EmissionCategoryGas` edge in the connection."""
type EmissionCategoryGasesEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `EmissionCategoryGas` at the end of the edge."""
  node: EmissionCategoryGas
}

"""Methods to use when ordering `EmissionCategoryGas`."""
enum EmissionCategoryGasesOrderBy {
  CREATED_AT_ASC
  CREATED_AT_DESC
  CREATED_BY_ASC
  CREATED_BY_DESC
  DELETED_AT_ASC
  DELETED_AT_DESC
  DELETED_BY_ASC
  DELETED_BY_DESC
  EMISSION_CATEGORY_ASC
  EMISSION_CATEGORY_DESC
  EMISSION_CATEGORY_DESCRIPTION_ASC
  EMISSION_CATEGORY_DESCRIPTION_DESC
  GAS_ID_ASC
  GAS_ID_DESC
  ID_ASC
  ID_DESC
  NATURAL
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  UPDATED_AT_ASC
  UPDATED_AT_DESC
  UPDATED_BY_ASC
  UPDATED_BY_DESC
}

"""An input for mutations affecting `EmissionCategoryGas`"""
input EmissionCategoryGasInput {
  """Creation date of row"""
  createdAt: Datetime

  """Creator of row"""
  createdBy: String

  """Date of deletion"""
  deletedAt: Datetime

  """The user who deleted the row"""
  deletedBy: String

  """The emission category"""
  emissionCategory: String

  """The description of the emission category"""
  emissionCategoryDescription: String

  """Foreign key to gas"""
  gasId: Int

  """Updated date of row"""
  updatedAt: Datetime

  """Updator of row"""
  updatedBy: String
}

"""
Represents an update to a `EmissionCategoryGas`. Fields that are set will be updated.
"""
input EmissionCategoryGasPatch {
  """Creation date of row"""
  createdAt: Datetime

  """Creator of row"""
  createdBy: String

  """Date of deletion"""
  deletedAt: Datetime

  """The user who deleted the row"""
  deletedBy: String

  """The emission category"""
  emissionCategory: String

  """The description of the emission category"""
  emissionCategoryDescription: String

  """Foreign key to gas"""
  gasId: Int

  """Updated date of row"""
  updatedAt: Datetime

  """Updator of row"""
  updatedBy: String
}

"""A connection to a list of `EmissionDatum` values."""
type EmissionDataConnection {
  """
  A list of edges which contains the `EmissionDatum` and cursor to aid in pagination.
  """
  edges: [EmissionDataEdge!]!

  """A list of `EmissionDatum` objects."""
  nodes: [EmissionDatum]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `EmissionDatum` you could get from the connection."""
  totalCount: Int!
}

"""A `EmissionDatum` edge in the connection."""
type EmissionDataEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `EmissionDatum` at the end of the edge."""
  node: EmissionDatum
}

type EmissionDatum {
  calculatedQuantity: BigFloat
  emissionCategory: String
  gasType: String
  quantity: BigFloat
  reportId: Int
}

"""The estimated carbon tax paid for a reporting_period_duration"""
type EstimatedCarbonTaxPaid {
  activityId: Int
  bcghgid: String
  calculatedCarbonTax: BigFloat
  emissionId: Int
  facilityId: Int
  flatCalculation: String
  fuelAmount: BigFloat
  fuelCharge: BigFloat
  fuelId: Int
  fuelType: String
  naicsId: Int
  organisationId: Int
  proRatedCalculatedCarbonTax: BigFloat
  proRatedCalculation: String
  proRatedFuelCharge: BigFloat
  reportId: Int
  reportingPeriodDuration: String
  unitConversionFactor: Int
  year: Int
}

"""
A condition to be used against `EstimatedCarbonTaxPaid` object types. All fields
are tested for equality and combined with a logical ‘and.’
"""
input EstimatedCarbonTaxPaidCondition {
  """Checks for equality with the object’s `activityId` field."""
  activityId: Int

  """Checks for equality with the object’s `bcghgid` field."""
  bcghgid: String

  """Checks for equality with the object’s `calculatedCarbonTax` field."""
  calculatedCarbonTax: BigFloat

  """Checks for equality with the object’s `emissionId` field."""
  emissionId: Int

  """Checks for equality with the object’s `facilityId` field."""
  facilityId: Int

  """Checks for equality with the object’s `flatCalculation` field."""
  flatCalculation: String

  """Checks for equality with the object’s `fuelAmount` field."""
  fuelAmount: BigFloat

  """Checks for equality with the object’s `fuelCharge` field."""
  fuelCharge: BigFloat

  """Checks for equality with the object’s `fuelId` field."""
  fuelId: Int

  """Checks for equality with the object’s `fuelType` field."""
  fuelType: String

  """Checks for equality with the object’s `naicsId` field."""
  naicsId: Int

  """Checks for equality with the object’s `organisationId` field."""
  organisationId: Int

  """
  Checks for equality with the object’s `proRatedCalculatedCarbonTax` field.
  """
  proRatedCalculatedCarbonTax: BigFloat

  """Checks for equality with the object’s `proRatedCalculation` field."""
  proRatedCalculation: String

  """Checks for equality with the object’s `proRatedFuelCharge` field."""
  proRatedFuelCharge: BigFloat

  """Checks for equality with the object’s `reportId` field."""
  reportId: Int

  """Checks for equality with the object’s `reportingPeriodDuration` field."""
  reportingPeriodDuration: String

  """Checks for equality with the object’s `unitConversionFactor` field."""
  unitConversionFactor: Int

  """Checks for equality with the object’s `year` field."""
  year: Int
}

"""A connection to a list of `EstimatedCarbonTaxPaid` values."""
type EstimatedCarbonTaxPaidsConnection {
  """
  A list of edges which contains the `EstimatedCarbonTaxPaid` and cursor to aid in pagination.
  """
  edges: [EstimatedCarbonTaxPaidsEdge!]!

  """A list of `EstimatedCarbonTaxPaid` objects."""
  nodes: [EstimatedCarbonTaxPaid]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `EstimatedCarbonTaxPaid` you could get from the connection.
  """
  totalCount: Int!
}

"""A `EstimatedCarbonTaxPaid` edge in the connection."""
type EstimatedCarbonTaxPaidsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `EstimatedCarbonTaxPaid` at the end of the edge."""
  node: EstimatedCarbonTaxPaid
}

"""Methods to use when ordering `EstimatedCarbonTaxPaid`."""
enum EstimatedCarbonTaxPaidsOrderBy {
  ACTIVITY_ID_ASC
  ACTIVITY_ID_DESC
  BCGHGID_ASC
  BCGHGID_DESC
  CALCULATED_CARBON_TAX_ASC
  CALCULATED_CARBON_TAX_DESC
  EMISSION_ID_ASC
  EMISSION_ID_DESC
  FACILITY_ID_ASC
  FACILITY_ID_DESC
  FLAT_CALCULATION_ASC
  FLAT_CALCULATION_DESC
  FUEL_AMOUNT_ASC
  FUEL_AMOUNT_DESC
  FUEL_CHARGE_ASC
  FUEL_CHARGE_DESC
  FUEL_ID_ASC
  FUEL_ID_DESC
  FUEL_TYPE_ASC
  FUEL_TYPE_DESC
  NAICS_ID_ASC
  NAICS_ID_DESC
  NATURAL
  ORGANISATION_ID_ASC
  ORGANISATION_ID_DESC
  PRO_RATED_CALCULATED_CARBON_TAX_ASC
  PRO_RATED_CALCULATED_CARBON_TAX_DESC
  PRO_RATED_CALCULATION_ASC
  PRO_RATED_CALCULATION_DESC
  PRO_RATED_FUEL_CHARGE_ASC
  PRO_RATED_FUEL_CHARGE_DESC
  REPORT_ID_ASC
  REPORT_ID_DESC
  REPORTING_PERIOD_DURATION_ASC
  REPORTING_PERIOD_DURATION_DESC
  UNIT_CONVERSION_FACTOR_ASC
  UNIT_CONVERSION_FACTOR_DESC
  YEAR_ASC
  YEAR_DESC
}

"""A connection to a list of `Facility` values."""
type FacilitiesConnection {
  """
  A list of edges which contains the `Facility` and cursor to aid in pagination.
  """
  edges: [FacilitiesEdge!]!

  """A list of `Facility` objects."""
  nodes: [Facility]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Facility` you could get from the connection."""
  totalCount: Int!
}

"""A `Facility` edge in the connection."""
type FacilitiesEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Facility` at the end of the edge."""
  node: Facility
}

"""Methods to use when ordering `Facility`."""
enum FacilitiesOrderBy {
  BCGHGID_ASC
  BCGHGID_DESC
  FACILITY_CITY_ASC
  FACILITY_CITY_DESC
  FACILITY_COUNTRY_ASC
  FACILITY_COUNTRY_DESC
  FACILITY_MAILING_ADDRESS_ASC
  FACILITY_MAILING_ADDRESS_DESC
  FACILITY_NAME_ASC
  FACILITY_NAME_DESC
  FACILITY_POSTAL_CODE_ASC
  FACILITY_POSTAL_CODE_DESC
  FACILITY_PROVINCE_ASC
  FACILITY_PROVINCE_DESC
  FACILITY_TYPE_ASC
  FACILITY_TYPE_DESC
  ID_ASC
  ID_DESC
  LATITUDE_ASC
  LATITUDE_DESC
  LONGITUDE_ASC
  LONGITUDE_DESC
  NAICS_CLASSIFICATION_ASC
  NAICS_CLASSIFICATION_DESC
  NAICS_CODE_ASC
  NAICS_CODE_DESC
  NATURAL
  ORGANISATION_ID_ASC
  ORGANISATION_ID_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  REPORT_ID_ASC
  REPORT_ID_DESC
  REPORTING_YEAR_ASC
  REPORTING_YEAR_DESC
  SWRS_FACILITY_ID_ASC
  SWRS_FACILITY_ID_DESC
  SWRS_ORGANISATION_ID_ASC
  SWRS_ORGANISATION_ID_DESC
  SWRS_REPORT_ID_ASC
  SWRS_REPORT_ID_DESC
}

"""Table containing information on an facility that has applied for CIIP"""
type Facility implements Node {
  """Reads and enables pagination through a set of `Application`."""
  applicationsByFacilityId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ApplicationCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Application`."""
    orderBy: [ApplicationsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ApplicationsConnection!

  """CAS internal identifier"""
  bcghgid: String

  """facility city"""
  facilityCity: String

  """facility country"""
  facilityCountry: String

  """facility mailing address"""
  facilityMailingAddress: String

  """the facility name"""
  facilityName: String

  """facility postal code"""
  facilityPostalCode: String

  """facility province"""
  facilityProvince: String

  """type of facility based on emission quantity"""
  facilityType: String
  hasSwrsReport(reportingYear: String): Boolean

  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  id: ID!

  """facility latitude"""
  latitude: BigFloat

  """facility longitude"""
  longitude: BigFloat

  """description of the naics code"""
  naicsClassification: String

  """The NAICS code / sector"""
  naicsCode: Int

  """Reads a single `Organisation` that is related to this `Facility`."""
  organisationByOrganisationId: Organisation

  """the id of the organization responsible for that facility"""
  organisationId: Int!

  """report id from swrs"""
  reportId: Int

  """the reporting year"""
  reportingYear: String

  """unique id for the facility"""
  rowId: Int!

  """swrs facility id from swrs"""
  swrsFacilityId: Int

  """swrs organisation id"""
  swrsOrganisationId: Int

  """swrs report id from swrs"""
  swrsReportId: Int
}

"""
A condition to be used against `Facility` object types. All fields are tested
for equality and combined with a logical ‘and.’
"""
input FacilityCondition {
  """Checks for equality with the object’s `bcghgid` field."""
  bcghgid: String

  """Checks for equality with the object’s `facilityCity` field."""
  facilityCity: String

  """Checks for equality with the object’s `facilityCountry` field."""
  facilityCountry: String

  """Checks for equality with the object’s `facilityMailingAddress` field."""
  facilityMailingAddress: String

  """Checks for equality with the object’s `facilityName` field."""
  facilityName: String

  """Checks for equality with the object’s `facilityPostalCode` field."""
  facilityPostalCode: String

  """Checks for equality with the object’s `facilityProvince` field."""
  facilityProvince: String

  """Checks for equality with the object’s `facilityType` field."""
  facilityType: String

  """Checks for equality with the object’s `latitude` field."""
  latitude: BigFloat

  """Checks for equality with the object’s `longitude` field."""
  longitude: BigFloat

  """Checks for equality with the object’s `naicsClassification` field."""
  naicsClassification: String

  """Checks for equality with the object’s `naicsCode` field."""
  naicsCode: Int

  """Checks for equality with the object’s `organisationId` field."""
  organisationId: Int

  """Checks for equality with the object’s `reportId` field."""
  reportId: Int

  """Checks for equality with the object’s `reportingYear` field."""
  reportingYear: String

  """Checks for equality with the object’s `rowId` field."""
  rowId: Int

  """Checks for equality with the object’s `swrsFacilityId` field."""
  swrsFacilityId: Int

  """Checks for equality with the object’s `swrsOrganisationId` field."""
  swrsOrganisationId: Int

  """Checks for equality with the object’s `swrsReportId` field."""
  swrsReportId: Int
}

type FacilityDatum {
  bcghgid: String
  facilityCity: String
  facilityCountry: String
  facilityMailingAddress: String
  facilityName: String
  facilityPostalCode: String
  facilityProvince: String
  facilityType: String
  latitude: BigFloat
  longitude: BigFloat
  naicsClassification: String
  naicsCode: Int
  reportId: Int
  reportingYear: String
  swrsFacilityId: Int
  swrsOrganisationId: Int
  swrsReportId: Int
}

"""An input for mutations affecting `Facility`"""
input FacilityInput {
  """CAS internal identifier"""
  bcghgid: String

  """facility city"""
  facilityCity: String

  """facility country"""
  facilityCountry: String

  """facility mailing address"""
  facilityMailingAddress: String

  """the facility name"""
  facilityName: String

  """facility postal code"""
  facilityPostalCode: String

  """facility province"""
  facilityProvince: String

  """type of facility based on emission quantity"""
  facilityType: String

  """facility latitude"""
  latitude: BigFloat

  """facility longitude"""
  longitude: BigFloat

  """description of the naics code"""
  naicsClassification: String

  """The NAICS code / sector"""
  naicsCode: Int

  """the id of the organization responsible for that facility"""
  organisationId: Int!

  """report id from swrs"""
  reportId: Int

  """the reporting year"""
  reportingYear: String

  """swrs facility id from swrs"""
  swrsFacilityId: Int

  """swrs organisation id"""
  swrsOrganisationId: Int

  """swrs report id from swrs"""
  swrsReportId: Int
}

"""
Represents an update to a `Facility`. Fields that are set will be updated.
"""
input FacilityPatch {
  """CAS internal identifier"""
  bcghgid: String

  """facility city"""
  facilityCity: String

  """facility country"""
  facilityCountry: String

  """facility mailing address"""
  facilityMailingAddress: String

  """the facility name"""
  facilityName: String

  """facility postal code"""
  facilityPostalCode: String

  """facility province"""
  facilityProvince: String

  """type of facility based on emission quantity"""
  facilityType: String

  """facility latitude"""
  latitude: BigFloat

  """facility longitude"""
  longitude: BigFloat

  """description of the naics code"""
  naicsClassification: String

  """The NAICS code / sector"""
  naicsCode: Int

  """the id of the organization responsible for that facility"""
  organisationId: Int

  """report id from swrs"""
  reportId: Int

  """the reporting year"""
  reportingYear: String

  """swrs facility id from swrs"""
  swrsFacilityId: Int

  """swrs organisation id"""
  swrsOrganisationId: Int

  """swrs report id from swrs"""
  swrsReportId: Int
}

"""
Table containing the structure of each form to be filled out when applying for CIIP
"""
type FormJson implements Node {
  """
  Reads a single `CiipApplicationWizard` that is related to this `FormJson`.
  """
  ciipApplicationWizardByFormId: CiipApplicationWizard

  """Reads and enables pagination through a set of `CiipApplicationWizard`."""
  ciipApplicationWizardsByFormId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CiipApplicationWizardCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CiipApplicationWizard`."""
    orderBy: [CiipApplicationWizardsOrderBy!] = [PRIMARY_KEY_ASC]
  ): CiipApplicationWizardsConnection! @deprecated(reason: "Please use ciipApplicationWizardByFormId instead")

  """Reads a single `CiipUser` that is related to this `FormJson`."""
  ciipUserByDeletedBy: CiipUser

  """The date the form was updated"""
  createdAt: Datetime!

  """The person who updated the form"""
  createdBy: String

  """The date the form was deleted"""
  deletedAt: Datetime

  """The person who deleted the form"""
  deletedBy: Int

  """description for the form"""
  description: String!

  """The JSON object that creates the form"""
  formJson: JSON!

  """The function used for init"""
  formResultInitFunction: String

  """Reads and enables pagination through a set of `FormResult`."""
  formResultsByFormId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: FormResultCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `FormResult`."""
    orderBy: [FormResultsOrderBy!] = [PRIMARY_KEY_ASC]
  ): FormResultsConnection!

  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  id: ID!

  """Name for the form"""
  name: String!

  """
  Whether the form is initialized with data submitted in the previous year's application
  """
  prepopulateFromCiip: Boolean!

  """
  Whether the form is initialized with data submitted in the previous year's application
  """
  prepopulateFromSwrs: Boolean!

  """Unique ID for the form"""
  rowId: Int!

  """short name for the form"""
  shortName: String!

  """slug for the use as classname"""
  slug: String!

  """The date the form was updated"""
  updatedAt: Datetime!

  """The person who updated the form"""
  updatedBy: String
}

"""
A condition to be used against `FormJson` object types. All fields are tested
for equality and combined with a logical ‘and.’
"""
input FormJsonCondition {
  """Checks for equality with the object’s `createdAt` field."""
  createdAt: Datetime

  """Checks for equality with the object’s `createdBy` field."""
  createdBy: String

  """Checks for equality with the object’s `deletedAt` field."""
  deletedAt: Datetime

  """Checks for equality with the object’s `deletedBy` field."""
  deletedBy: Int

  """Checks for equality with the object’s `description` field."""
  description: String

  """Checks for equality with the object’s `formJson` field."""
  formJson: JSON

  """Checks for equality with the object’s `formResultInitFunction` field."""
  formResultInitFunction: String

  """Checks for equality with the object’s `name` field."""
  name: String

  """Checks for equality with the object’s `prepopulateFromCiip` field."""
  prepopulateFromCiip: Boolean

  """Checks for equality with the object’s `prepopulateFromSwrs` field."""
  prepopulateFromSwrs: Boolean

  """Checks for equality with the object’s `rowId` field."""
  rowId: Int

  """Checks for equality with the object’s `shortName` field."""
  shortName: String

  """Checks for equality with the object’s `slug` field."""
  slug: String

  """Checks for equality with the object’s `updatedAt` field."""
  updatedAt: Datetime

  """Checks for equality with the object’s `updatedBy` field."""
  updatedBy: String
}

"""An input for mutations affecting `FormJson`"""
input FormJsonInput {
  """The date the form was updated"""
  createdAt: Datetime

  """The person who updated the form"""
  createdBy: String

  """The date the form was deleted"""
  deletedAt: Datetime

  """The person who deleted the form"""
  deletedBy: Int

  """description for the form"""
  description: String!

  """The JSON object that creates the form"""
  formJson: JSON!

  """The function used for init"""
  formResultInitFunction: String

  """Name for the form"""
  name: String!

  """
  Whether the form is initialized with data submitted in the previous year's application
  """
  prepopulateFromCiip: Boolean!

  """
  Whether the form is initialized with data submitted in the previous year's application
  """
  prepopulateFromSwrs: Boolean!

  """short name for the form"""
  shortName: String!

  """slug for the use as classname"""
  slug: String!

  """The date the form was updated"""
  updatedAt: Datetime

  """The person who updated the form"""
  updatedBy: String
}

"""
Represents an update to a `FormJson`. Fields that are set will be updated.
"""
input FormJsonPatch {
  """The date the form was updated"""
  createdAt: Datetime

  """The person who updated the form"""
  createdBy: String

  """The date the form was deleted"""
  deletedAt: Datetime

  """The person who deleted the form"""
  deletedBy: Int

  """description for the form"""
  description: String

  """The JSON object that creates the form"""
  formJson: JSON

  """The function used for init"""
  formResultInitFunction: String

  """Name for the form"""
  name: String

  """
  Whether the form is initialized with data submitted in the previous year's application
  """
  prepopulateFromCiip: Boolean

  """
  Whether the form is initialized with data submitted in the previous year's application
  """
  prepopulateFromSwrs: Boolean

  """short name for the form"""
  shortName: String

  """slug for the use as classname"""
  slug: String

  """The date the form was updated"""
  updatedAt: Datetime

  """The person who updated the form"""
  updatedBy: String
}

"""A connection to a list of `FormJson` values."""
type FormJsonsConnection {
  """
  A list of edges which contains the `FormJson` and cursor to aid in pagination.
  """
  edges: [FormJsonsEdge!]!

  """A list of `FormJson` objects."""
  nodes: [FormJson]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `FormJson` you could get from the connection."""
  totalCount: Int!
}

"""A `FormJson` edge in the connection."""
type FormJsonsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `FormJson` at the end of the edge."""
  node: FormJson
}

"""Methods to use when ordering `FormJson`."""
enum FormJsonsOrderBy {
  CREATED_AT_ASC
  CREATED_AT_DESC
  CREATED_BY_ASC
  CREATED_BY_DESC
  DELETED_AT_ASC
  DELETED_AT_DESC
  DELETED_BY_ASC
  DELETED_BY_DESC
  DESCRIPTION_ASC
  DESCRIPTION_DESC
  FORM_JSON_ASC
  FORM_JSON_DESC
  FORM_RESULT_INIT_FUNCTION_ASC
  FORM_RESULT_INIT_FUNCTION_DESC
  ID_ASC
  ID_DESC
  NAME_ASC
  NAME_DESC
  NATURAL
  PREPOPULATE_FROM_CIIP_ASC
  PREPOPULATE_FROM_CIIP_DESC
  PREPOPULATE_FROM_SWRS_ASC
  PREPOPULATE_FROM_SWRS_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  SHORT_NAME_ASC
  SHORT_NAME_DESC
  SLUG_ASC
  SLUG_DESC
  UPDATED_AT_ASC
  UPDATED_AT_DESC
  UPDATED_BY_ASC
  UPDATED_BY_DESC
}

"""Table containing CIIP application data received from a user"""
type FormResult implements Node {
  """Reads a single `Application` that is related to this `FormResult`."""
  applicationByApplicationId: Application

  """The Unique ID of the Application"""
  applicationId: Int!
  applicationReview: ApplicationReview

  """Reads and enables pagination through a set of `ApplicationReview`."""
  applicationReviewsByFormResultId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ApplicationReviewCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `ApplicationReview`."""
    orderBy: [ApplicationReviewsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ApplicationReviewsConnection!

  """Reads a single `CiipUser` that is related to this `FormResult`."""
  ciipUserByDeletedBy: CiipUser

  """The date the form was updated"""
  createdAt: Datetime!

  """The person who updated the form"""
  createdBy: String

  """The date the form was deleted"""
  deletedAt: Datetime

  """The person who deleted the form"""
  deletedBy: Int

  """The Unique ID of the form"""
  formId: Int!

  """Reads a single `FormJson` that is related to this `FormResult`."""
  formJsonByFormId: FormJson

  """JSON dump of form data"""
  formResult: JSON!

  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  id: ID!

  """Unique ID for the form"""
  rowId: Int!

  """The submission date of the Application"""
  submissionDate: Datetime

  """The date the form was updated"""
  updatedAt: Datetime!

  """The person who updated the form"""
  updatedBy: String
}

"""
A condition to be used against `FormResult` object types. All fields are tested
for equality and combined with a logical ‘and.’
"""
input FormResultCondition {
  """Checks for equality with the object’s `applicationId` field."""
  applicationId: Int

  """Checks for equality with the object’s `createdAt` field."""
  createdAt: Datetime

  """Checks for equality with the object’s `createdBy` field."""
  createdBy: String

  """Checks for equality with the object’s `deletedAt` field."""
  deletedAt: Datetime

  """Checks for equality with the object’s `deletedBy` field."""
  deletedBy: Int

  """Checks for equality with the object’s `formId` field."""
  formId: Int

  """Checks for equality with the object’s `formResult` field."""
  formResult: JSON

  """Checks for equality with the object’s `rowId` field."""
  rowId: Int

  """Checks for equality with the object’s `submissionDate` field."""
  submissionDate: Datetime

  """Checks for equality with the object’s `updatedAt` field."""
  updatedAt: Datetime

  """Checks for equality with the object’s `updatedBy` field."""
  updatedBy: String
}

"""An input for mutations affecting `FormResult`"""
input FormResultInput {
  """The Unique ID of the Application"""
  applicationId: Int!

  """The date the form was updated"""
  createdAt: Datetime

  """The person who updated the form"""
  createdBy: String

  """The date the form was deleted"""
  deletedAt: Datetime

  """The person who deleted the form"""
  deletedBy: Int

  """The Unique ID of the form"""
  formId: Int!

  """JSON dump of form data"""
  formResult: JSON!

  """The submission date of the Application"""
  submissionDate: Datetime

  """The date the form was updated"""
  updatedAt: Datetime

  """The person who updated the form"""
  updatedBy: String
}

"""
Represents an update to a `FormResult`. Fields that are set will be updated.
"""
input FormResultPatch {
  """The Unique ID of the Application"""
  applicationId: Int

  """The date the form was updated"""
  createdAt: Datetime

  """The person who updated the form"""
  createdBy: String

  """The date the form was deleted"""
  deletedAt: Datetime

  """The person who deleted the form"""
  deletedBy: Int

  """The Unique ID of the form"""
  formId: Int

  """JSON dump of form data"""
  formResult: JSON

  """The submission date of the Application"""
  submissionDate: Datetime

  """The date the form was updated"""
  updatedAt: Datetime

  """The person who updated the form"""
  updatedBy: String
}

"""A connection to a list of `FormResult` values."""
type FormResultsConnection {
  """
  A list of edges which contains the `FormResult` and cursor to aid in pagination.
  """
  edges: [FormResultsEdge!]!

  """A list of `FormResult` objects."""
  nodes: [FormResult]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `FormResult` you could get from the connection."""
  totalCount: Int!
}

"""A `FormResult` edge in the connection."""
type FormResultsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `FormResult` at the end of the edge."""
  node: FormResult
}

"""Methods to use when ordering `FormResult`."""
enum FormResultsOrderBy {
  APPLICATION_ID_ASC
  APPLICATION_ID_DESC
  CREATED_AT_ASC
  CREATED_AT_DESC
  CREATED_BY_ASC
  CREATED_BY_DESC
  DELETED_AT_ASC
  DELETED_AT_DESC
  DELETED_BY_ASC
  DELETED_BY_DESC
  FORM_ID_ASC
  FORM_ID_DESC
  FORM_RESULT_ASC
  FORM_RESULT_DESC
  ID_ASC
  ID_DESC
  NATURAL
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  SUBMISSION_DATE_ASC
  SUBMISSION_DATE_DESC
  UPDATED_AT_ASC
  UPDATED_AT_DESC
  UPDATED_BY_ASC
  UPDATED_BY_DESC
}

"""Table containing information on fuel"""
type Fuel implements Node {
  """Creation date of row"""
  createdAt: Datetime!

  """Creator of row"""
  createdBy: String

  """Date of deletion"""
  deletedAt: Datetime

  """The user who deleted the row"""
  deletedBy: String

  """The description of the fuel"""
  description: String

  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  id: ID!

  """The name of the fuel"""
  name: String!

  """The parent ID(s) (previous state) of the fuel"""
  parent: [Int]

  """Unique ID for the fuel"""
  rowId: Int!

  """
  The current state of the fuel within the lifecycle (created, split, merged, redefined, archived, unarchived)
  """
  state: String

  """
  The foreign key to the fuel_mapping table in swrs (used for carbon tax calculation)
  """
  swrsFuelMappingId: Int!

  """The unit of measure for the fuel"""
  units: String

  """Updated date of row"""
  updatedAt: Datetime!

  """Updator of row"""
  updatedBy: String
}

"""
A condition to be used against `Fuel` object types. All fields are tested for equality and combined with a logical ‘and.’
"""
input FuelCondition {
  """Checks for equality with the object’s `createdAt` field."""
  createdAt: Datetime

  """Checks for equality with the object’s `createdBy` field."""
  createdBy: String

  """Checks for equality with the object’s `deletedAt` field."""
  deletedAt: Datetime

  """Checks for equality with the object’s `deletedBy` field."""
  deletedBy: String

  """Checks for equality with the object’s `description` field."""
  description: String

  """Checks for equality with the object’s `name` field."""
  name: String

  """Checks for equality with the object’s `parent` field."""
  parent: [Int]

  """Checks for equality with the object’s `rowId` field."""
  rowId: Int

  """Checks for equality with the object’s `state` field."""
  state: String

  """Checks for equality with the object’s `swrsFuelMappingId` field."""
  swrsFuelMappingId: Int

  """Checks for equality with the object’s `units` field."""
  units: String

  """Checks for equality with the object’s `updatedAt` field."""
  updatedAt: Datetime

  """Checks for equality with the object’s `updatedBy` field."""
  updatedBy: String
}

"""A connection to a list of `FuelDatum` values."""
type FuelDataConnection {
  """
  A list of edges which contains the `FuelDatum` and cursor to aid in pagination.
  """
  edges: [FuelDataEdge!]!

  """A list of `FuelDatum` objects."""
  nodes: [FuelDatum]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `FuelDatum` you could get from the connection."""
  totalCount: Int!
}

"""A `FuelDatum` edge in the connection."""
type FuelDataEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `FuelDatum` at the end of the edge."""
  node: FuelDatum
}

type FuelDatum {
  alternativeMethodolodyDescription: String
  annualFuelAmount: BigFloat
  annualWeightedAvgCarbonContent: BigFloat
  annualWeightedAvgHhv: BigFloat
  fuelClassification: String
  fuelDescription: String
  fuelType: String
  fuelUnits: String
  reportId: Int
}

"""An input for mutations affecting `Fuel`"""
input FuelInput {
  """Creation date of row"""
  createdAt: Datetime

  """Creator of row"""
  createdBy: String

  """Date of deletion"""
  deletedAt: Datetime

  """The user who deleted the row"""
  deletedBy: String

  """The description of the fuel"""
  description: String

  """The name of the fuel"""
  name: String!

  """The parent ID(s) (previous state) of the fuel"""
  parent: [Int]

  """
  The current state of the fuel within the lifecycle (created, split, merged, redefined, archived, unarchived)
  """
  state: String

  """
  The foreign key to the fuel_mapping table in swrs (used for carbon tax calculation)
  """
  swrsFuelMappingId: Int!

  """The unit of measure for the fuel"""
  units: String

  """Updated date of row"""
  updatedAt: Datetime

  """Updator of row"""
  updatedBy: String
}

"""Represents an update to a `Fuel`. Fields that are set will be updated."""
input FuelPatch {
  """Creation date of row"""
  createdAt: Datetime

  """Creator of row"""
  createdBy: String

  """Date of deletion"""
  deletedAt: Datetime

  """The user who deleted the row"""
  deletedBy: String

  """The description of the fuel"""
  description: String

  """The name of the fuel"""
  name: String

  """The parent ID(s) (previous state) of the fuel"""
  parent: [Int]

  """
  The current state of the fuel within the lifecycle (created, split, merged, redefined, archived, unarchived)
  """
  state: String

  """
  The foreign key to the fuel_mapping table in swrs (used for carbon tax calculation)
  """
  swrsFuelMappingId: Int

  """The unit of measure for the fuel"""
  units: String

  """Updated date of row"""
  updatedAt: Datetime

  """Updator of row"""
  updatedBy: String
}

"""A connection to a list of `Fuel` values."""
type FuelsConnection {
  """
  A list of edges which contains the `Fuel` and cursor to aid in pagination.
  """
  edges: [FuelsEdge!]!

  """A list of `Fuel` objects."""
  nodes: [Fuel]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Fuel` you could get from the connection."""
  totalCount: Int!
}

"""A `Fuel` edge in the connection."""
type FuelsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Fuel` at the end of the edge."""
  node: Fuel
}

"""Methods to use when ordering `Fuel`."""
enum FuelsOrderBy {
  CREATED_AT_ASC
  CREATED_AT_DESC
  CREATED_BY_ASC
  CREATED_BY_DESC
  DELETED_AT_ASC
  DELETED_AT_DESC
  DELETED_BY_ASC
  DELETED_BY_DESC
  DESCRIPTION_ASC
  DESCRIPTION_DESC
  ID_ASC
  ID_DESC
  NAME_ASC
  NAME_DESC
  NATURAL
  PARENT_ASC
  PARENT_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  STATE_ASC
  STATE_DESC
  SWRS_FUEL_MAPPING_ID_ASC
  SWRS_FUEL_MAPPING_ID_DESC
  UNITS_ASC
  UNITS_DESC
  UPDATED_AT_ASC
  UPDATED_AT_DESC
  UPDATED_BY_ASC
  UPDATED_BY_DESC
}

"""Table of gases used in the CIIP program"""
type Gas implements Node {
  """Creation date of row"""
  createdAt: Datetime!

  """Creator of row"""
  createdBy: String

  """Date of deletion"""
  deletedAt: Datetime

  """The user who deleted the row"""
  deletedBy: String

  """Reads and enables pagination through a set of `EmissionCategoryGas`."""
  emissionCategoryGasesByGasId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: EmissionCategoryGasCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `EmissionCategoryGas`."""
    orderBy: [EmissionCategoryGasesOrderBy!] = [PRIMARY_KEY_ASC]
  ): EmissionCategoryGasesConnection!

  """Describe the gas and its use"""
  gasDescription: String

  """The name of the gas"""
  gasType: String

  """Global warming potential of the gas"""
  gwp: BigFloat

  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  id: ID!

  """Unique ID for the gas"""
  rowId: Int!

  """Updated date of row"""
  updatedAt: Datetime!

  """Updator of row"""
  updatedBy: String
}

"""
A condition to be used against `Gas` object types. All fields are tested for equality and combined with a logical ‘and.’
"""
input GasCondition {
  """Checks for equality with the object’s `createdAt` field."""
  createdAt: Datetime

  """Checks for equality with the object’s `createdBy` field."""
  createdBy: String

  """Checks for equality with the object’s `deletedAt` field."""
  deletedAt: Datetime

  """Checks for equality with the object’s `deletedBy` field."""
  deletedBy: String

  """Checks for equality with the object’s `gasDescription` field."""
  gasDescription: String

  """Checks for equality with the object’s `gasType` field."""
  gasType: String

  """Checks for equality with the object’s `gwp` field."""
  gwp: BigFloat

  """Checks for equality with the object’s `rowId` field."""
  rowId: Int

  """Checks for equality with the object’s `updatedAt` field."""
  updatedAt: Datetime

  """Checks for equality with the object’s `updatedBy` field."""
  updatedBy: String
}

"""A connection to a list of `Gas` values."""
type GasesConnection {
  """
  A list of edges which contains the `Gas` and cursor to aid in pagination.
  """
  edges: [GasesEdge!]!

  """A list of `Gas` objects."""
  nodes: [Gas]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Gas` you could get from the connection."""
  totalCount: Int!
}

"""A `Gas` edge in the connection."""
type GasesEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Gas` at the end of the edge."""
  node: Gas
}

"""Methods to use when ordering `Gas`."""
enum GasesOrderBy {
  CREATED_AT_ASC
  CREATED_AT_DESC
  CREATED_BY_ASC
  CREATED_BY_DESC
  DELETED_AT_ASC
  DELETED_AT_DESC
  DELETED_BY_ASC
  DELETED_BY_DESC
  GAS_DESCRIPTION_ASC
  GAS_DESCRIPTION_DESC
  GAS_TYPE_ASC
  GAS_TYPE_DESC
  GWP_ASC
  GWP_DESC
  ID_ASC
  ID_DESC
  NATURAL
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  UPDATED_AT_ASC
  UPDATED_AT_DESC
  UPDATED_BY_ASC
  UPDATED_BY_DESC
}

"""An input for mutations affecting `Gas`"""
input GasInput {
  """Creation date of row"""
  createdAt: Datetime

  """Creator of row"""
  createdBy: String

  """Date of deletion"""
  deletedAt: Datetime

  """The user who deleted the row"""
  deletedBy: String

  """Describe the gas and its use"""
  gasDescription: String

  """The name of the gas"""
  gasType: String

  """Global warming potential of the gas"""
  gwp: BigFloat

  """Updated date of row"""
  updatedAt: Datetime

  """Updator of row"""
  updatedBy: String
}

"""Represents an update to a `Gas`. Fields that are set will be updated."""
input GasPatch {
  """Creation date of row"""
  createdAt: Datetime

  """Creator of row"""
  createdBy: String

  """Date of deletion"""
  deletedAt: Datetime

  """The user who deleted the row"""
  deletedBy: String

  """Describe the gas and its use"""
  gasDescription: String

  """The name of the gas"""
  gasType: String

  """Global warming potential of the gas"""
  gwp: BigFloat

  """Updated date of row"""
  updatedAt: Datetime

  """Updator of row"""
  updatedBy: String
}

"""All input for the `initApplicationAdministrationFormResult` mutation."""
input InitApplicationAdministrationFormResultInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  facilityId: Int!
  reportingYear: String!
}

"""The output of our `initApplicationAdministrationFormResult` mutation."""
type InitApplicationAdministrationFormResultPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  json: JSON

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `initApplicationEmissionFormResult` mutation."""
input InitApplicationEmissionFormResultInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  facilityId: Int!
  reportingYear: String!
}

"""The output of our `initApplicationEmissionFormResult` mutation."""
type InitApplicationEmissionFormResultPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  json: JSON

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `initApplicationFuelFormResult` mutation."""
input InitApplicationFuelFormResultInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  facilityId: Int!
  reportingYear: String!
}

"""The output of our `initApplicationFuelFormResult` mutation."""
type InitApplicationFuelFormResultPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  json: JSON

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""
A JavaScript object encoded in the JSON format as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON

type JwtToken {
  acr: String
  aud: String
  authTime: Int
  azp: String

  """Reads a single `CiipUser` that is related to this `JwtToken`."""
  ciipUserBySub: CiipUser
  email: String
  emailVerified: Boolean
  exp: Int
  familyName: String
  givenName: String
  iat: Int
  iss: String
  jti: UUID
  name: String
  nbf: Int
  preferredUsername: String
  sessionState: UUID
  sub: UUID
  typ: String
}

"""
The root mutation type which contains root level fields which mutate data.
"""
type Mutation {
  """Creates a single `Application`."""
  createApplication(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateApplicationInput!
  ): CreateApplicationPayload
  createApplicationMutationChain(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateApplicationMutationChainInput!
  ): CreateApplicationMutationChainPayload

  """Creates a single `ApplicationReview`."""
  createApplicationReview(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateApplicationReviewInput!
  ): CreateApplicationReviewPayload
  createApplicationReviewMutationChain(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateApplicationReviewMutationChainInput!
  ): CreateApplicationReviewMutationChainPayload

  """Creates a single `ApplicationStatus`."""
  createApplicationStatus(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateApplicationStatusInput!
  ): CreateApplicationStatusPayload

  """Creates a single `Benchmark`."""
  createBenchmark(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateBenchmarkInput!
  ): CreateBenchmarkPayload
  createBenchmarkMutationChain(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateBenchmarkMutationChainInput!
  ): CreateBenchmarkMutationChainPayload

  """Creates a single `CertificationUrl`."""
  createCertificationUrl(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateCertificationUrlInput!
  ): CreateCertificationUrlPayload

  """Creates a single `CiipApplicationWizard`."""
  createCiipApplicationWizard(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateCiipApplicationWizardInput!
  ): CreateCiipApplicationWizardPayload

  """Creates a single `CiipUser`."""
  createCiipUser(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateCiipUserInput!
  ): CreateCiipUserPayload

  """Creates a single `CiipUserOrganisation`."""
  createCiipUserOrganisation(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateCiipUserOrganisationInput!
  ): CreateCiipUserOrganisationPayload

  """Creates a single `EmissionCategoryGas`."""
  createEmissionCategoryGas(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateEmissionCategoryGasInput!
  ): CreateEmissionCategoryGasPayload

  """Creates a single `Facility`."""
  createFacility(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateFacilityInput!
  ): CreateFacilityPayload

  """Creates a single `FormJson`."""
  createFormJson(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateFormJsonInput!
  ): CreateFormJsonPayload

  """Creates a single `FormResult`."""
  createFormResult(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateFormResultInput!
  ): CreateFormResultPayload

  """Creates a single `Fuel`."""
  createFuel(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateFuelInput!
  ): CreateFuelPayload

  """Creates a single `Gas`."""
  createGas(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateGasInput!
  ): CreateGasPayload

  """Creates a single `Organisation`."""
  createOrganisation(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateOrganisationInput!
  ): CreateOrganisationPayload

  """Creates a single `Product`."""
  createProduct(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateProductInput!
  ): CreateProductPayload

  """Creates a single `ProductForm`."""
  createProductForm(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateProductFormInput!
  ): CreateProductFormPayload

  """Creates a single `ReportingYear`."""
  createReportingYear(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateReportingYearInput!
  ): CreateReportingYearPayload

  """Creates a single `ReviewComment`."""
  createReviewComment(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateReviewCommentInput!
  ): CreateReviewCommentPayload

  """Deletes a single `Application` using its globally unique id."""
  deleteApplication(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteApplicationInput!
  ): DeleteApplicationPayload

  """Deletes a single `Application` using a unique key."""
  deleteApplicationByRowId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteApplicationByRowIdInput!
  ): DeleteApplicationPayload

  """Deletes a single `ApplicationReview` using its globally unique id."""
  deleteApplicationReview(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteApplicationReviewInput!
  ): DeleteApplicationReviewPayload

  """Deletes a single `ApplicationReview` using a unique key."""
  deleteApplicationReviewByRowId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteApplicationReviewByRowIdInput!
  ): DeleteApplicationReviewPayload

  """Deletes a single `ApplicationStatus` using its globally unique id."""
  deleteApplicationStatus(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteApplicationStatusInput!
  ): DeleteApplicationStatusPayload

  """Deletes a single `ApplicationStatus` using a unique key."""
  deleteApplicationStatusByRowId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteApplicationStatusByRowIdInput!
  ): DeleteApplicationStatusPayload

  """Deletes a single `Benchmark` using its globally unique id."""
  deleteBenchmark(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteBenchmarkInput!
  ): DeleteBenchmarkPayload

  """Deletes a single `Benchmark` using a unique key."""
  deleteBenchmarkByRowId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteBenchmarkByRowIdInput!
  ): DeleteBenchmarkPayload

  """Deletes a single `CertificationUrl` using its globally unique id."""
  deleteCertificationUrl(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteCertificationUrlInput!
  ): DeleteCertificationUrlPayload

  """Deletes a single `CertificationUrl` using a unique key."""
  deleteCertificationUrlByRowId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteCertificationUrlByRowIdInput!
  ): DeleteCertificationUrlPayload

  """Deletes a single `CiipApplicationWizard` using its globally unique id."""
  deleteCiipApplicationWizard(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteCiipApplicationWizardInput!
  ): DeleteCiipApplicationWizardPayload

  """Deletes a single `CiipApplicationWizard` using a unique key."""
  deleteCiipApplicationWizardByFormId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteCiipApplicationWizardByFormIdInput!
  ): DeleteCiipApplicationWizardPayload

  """Deletes a single `CiipUser` using its globally unique id."""
  deleteCiipUser(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteCiipUserInput!
  ): DeleteCiipUserPayload

  """Deletes a single `CiipUser` using a unique key."""
  deleteCiipUserByRowId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteCiipUserByRowIdInput!
  ): DeleteCiipUserPayload

  """Deletes a single `CiipUserOrganisation` using its globally unique id."""
  deleteCiipUserOrganisation(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteCiipUserOrganisationInput!
  ): DeleteCiipUserOrganisationPayload

  """Deletes a single `CiipUserOrganisation` using a unique key."""
  deleteCiipUserOrganisationByUserIdAndOrganisationId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteCiipUserOrganisationByUserIdAndOrganisationIdInput!
  ): DeleteCiipUserOrganisationPayload

  """Deletes a single `EmissionCategoryGas` using its globally unique id."""
  deleteEmissionCategoryGas(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteEmissionCategoryGasInput!
  ): DeleteEmissionCategoryGasPayload

  """Deletes a single `EmissionCategoryGas` using a unique key."""
  deleteEmissionCategoryGasByRowId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteEmissionCategoryGasByRowIdInput!
  ): DeleteEmissionCategoryGasPayload

  """Deletes a single `Facility` using its globally unique id."""
  deleteFacility(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteFacilityInput!
  ): DeleteFacilityPayload

  """Deletes a single `Facility` using a unique key."""
  deleteFacilityByRowId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteFacilityByRowIdInput!
  ): DeleteFacilityPayload

  """Deletes a single `FormJson` using its globally unique id."""
  deleteFormJson(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteFormJsonInput!
  ): DeleteFormJsonPayload

  """Deletes a single `FormJson` using a unique key."""
  deleteFormJsonByRowId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteFormJsonByRowIdInput!
  ): DeleteFormJsonPayload

  """Deletes a single `FormResult` using its globally unique id."""
  deleteFormResult(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteFormResultInput!
  ): DeleteFormResultPayload

  """Deletes a single `FormResult` using a unique key."""
  deleteFormResultByRowId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteFormResultByRowIdInput!
  ): DeleteFormResultPayload

  """Deletes a single `Fuel` using its globally unique id."""
  deleteFuel(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteFuelInput!
  ): DeleteFuelPayload

  """Deletes a single `Fuel` using a unique key."""
  deleteFuelByRowId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteFuelByRowIdInput!
  ): DeleteFuelPayload

  """Deletes a single `Gas` using its globally unique id."""
  deleteGas(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteGasInput!
  ): DeleteGasPayload

  """Deletes a single `Gas` using a unique key."""
  deleteGasByRowId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteGasByRowIdInput!
  ): DeleteGasPayload

  """Deletes a single `Organisation` using its globally unique id."""
  deleteOrganisation(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteOrganisationInput!
  ): DeleteOrganisationPayload

  """Deletes a single `Organisation` using a unique key."""
  deleteOrganisationByRowId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteOrganisationByRowIdInput!
  ): DeleteOrganisationPayload

  """Deletes a single `Product` using its globally unique id."""
  deleteProduct(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteProductInput!
  ): DeleteProductPayload

  """Deletes a single `Product` using a unique key."""
  deleteProductByRowId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteProductByRowIdInput!
  ): DeleteProductPayload

  """Deletes a single `ProductForm` using its globally unique id."""
  deleteProductForm(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteProductFormInput!
  ): DeleteProductFormPayload

  """Deletes a single `ProductForm` using a unique key."""
  deleteProductFormByRowId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteProductFormByRowIdInput!
  ): DeleteProductFormPayload

  """Deletes a single `ReportingYear` using its globally unique id."""
  deleteReportingYear(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteReportingYearInput!
  ): DeleteReportingYearPayload

  """Deletes a single `ReportingYear` using a unique key."""
  deleteReportingYearByReportingYear(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteReportingYearByReportingYearInput!
  ): DeleteReportingYearPayload

  """Deletes a single `ReviewComment` using its globally unique id."""
  deleteReviewComment(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteReviewCommentInput!
  ): DeleteReviewCommentPayload

  """Deletes a single `ReviewComment` using a unique key."""
  deleteReviewCommentByRowId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteReviewCommentByRowIdInput!
  ): DeleteReviewCommentPayload
  initApplicationAdministrationFormResult(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: InitApplicationAdministrationFormResultInput!
  ): InitApplicationAdministrationFormResultPayload
  initApplicationEmissionFormResult(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: InitApplicationEmissionFormResultInput!
  ): InitApplicationEmissionFormResultPayload
  initApplicationFuelFormResult(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: InitApplicationFuelFormResultInput!
  ): InitApplicationFuelFormResultPayload
  saveProductMutationChain(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: SaveProductMutationChainInput!
  ): SaveProductMutationChainPayload

  """
  Updates a single `Application` using its globally unique id and a patch.
  """
  updateApplication(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateApplicationInput!
  ): UpdateApplicationPayload

  """Updates a single `Application` using a unique key and a patch."""
  updateApplicationByRowId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateApplicationByRowIdInput!
  ): UpdateApplicationPayload

  """
  Updates a single `ApplicationReview` using its globally unique id and a patch.
  """
  updateApplicationReview(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateApplicationReviewInput!
  ): UpdateApplicationReviewPayload

  """Updates a single `ApplicationReview` using a unique key and a patch."""
  updateApplicationReviewByRowId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateApplicationReviewByRowIdInput!
  ): UpdateApplicationReviewPayload

  """
  Updates a single `ApplicationStatus` using its globally unique id and a patch.
  """
  updateApplicationStatus(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateApplicationStatusInput!
  ): UpdateApplicationStatusPayload

  """Updates a single `ApplicationStatus` using a unique key and a patch."""
  updateApplicationStatusByRowId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateApplicationStatusByRowIdInput!
  ): UpdateApplicationStatusPayload

  """Updates a single `Benchmark` using its globally unique id and a patch."""
  updateBenchmark(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateBenchmarkInput!
  ): UpdateBenchmarkPayload

  """Updates a single `Benchmark` using a unique key and a patch."""
  updateBenchmarkByRowId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateBenchmarkByRowIdInput!
  ): UpdateBenchmarkPayload

  """
  Updates a single `CertificationUrl` using its globally unique id and a patch.
  """
  updateCertificationUrl(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateCertificationUrlInput!
  ): UpdateCertificationUrlPayload

  """Updates a single `CertificationUrl` using a unique key and a patch."""
  updateCertificationUrlByRowId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateCertificationUrlByRowIdInput!
  ): UpdateCertificationUrlPayload

  """
  Updates a single `CiipApplicationWizard` using its globally unique id and a patch.
  """
  updateCiipApplicationWizard(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateCiipApplicationWizardInput!
  ): UpdateCiipApplicationWizardPayload

  """
  Updates a single `CiipApplicationWizard` using a unique key and a patch.
  """
  updateCiipApplicationWizardByFormId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateCiipApplicationWizardByFormIdInput!
  ): UpdateCiipApplicationWizardPayload

  """Updates a single `CiipUser` using its globally unique id and a patch."""
  updateCiipUser(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateCiipUserInput!
  ): UpdateCiipUserPayload

  """Updates a single `CiipUser` using a unique key and a patch."""
  updateCiipUserByRowId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateCiipUserByRowIdInput!
  ): UpdateCiipUserPayload

  """
  Updates a single `CiipUserOrganisation` using its globally unique id and a patch.
  """
  updateCiipUserOrganisation(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateCiipUserOrganisationInput!
  ): UpdateCiipUserOrganisationPayload

  """
  Updates a single `CiipUserOrganisation` using a unique key and a patch.
  """
  updateCiipUserOrganisationByUserIdAndOrganisationId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateCiipUserOrganisationByUserIdAndOrganisationIdInput!
  ): UpdateCiipUserOrganisationPayload

  """
  Updates a single `EmissionCategoryGas` using its globally unique id and a patch.
  """
  updateEmissionCategoryGas(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateEmissionCategoryGasInput!
  ): UpdateEmissionCategoryGasPayload

  """Updates a single `EmissionCategoryGas` using a unique key and a patch."""
  updateEmissionCategoryGasByRowId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateEmissionCategoryGasByRowIdInput!
  ): UpdateEmissionCategoryGasPayload

  """Updates a single `Facility` using its globally unique id and a patch."""
  updateFacility(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateFacilityInput!
  ): UpdateFacilityPayload

  """Updates a single `Facility` using a unique key and a patch."""
  updateFacilityByRowId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateFacilityByRowIdInput!
  ): UpdateFacilityPayload

  """Updates a single `FormJson` using its globally unique id and a patch."""
  updateFormJson(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateFormJsonInput!
  ): UpdateFormJsonPayload

  """Updates a single `FormJson` using a unique key and a patch."""
  updateFormJsonByRowId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateFormJsonByRowIdInput!
  ): UpdateFormJsonPayload

  """
  Updates a single `FormResult` using its globally unique id and a patch.
  """
  updateFormResult(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateFormResultInput!
  ): UpdateFormResultPayload

  """Updates a single `FormResult` using a unique key and a patch."""
  updateFormResultByRowId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateFormResultByRowIdInput!
  ): UpdateFormResultPayload

  """Updates a single `Fuel` using its globally unique id and a patch."""
  updateFuel(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateFuelInput!
  ): UpdateFuelPayload

  """Updates a single `Fuel` using a unique key and a patch."""
  updateFuelByRowId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateFuelByRowIdInput!
  ): UpdateFuelPayload

  """Updates a single `Gas` using its globally unique id and a patch."""
  updateGas(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateGasInput!
  ): UpdateGasPayload

  """Updates a single `Gas` using a unique key and a patch."""
  updateGasByRowId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateGasByRowIdInput!
  ): UpdateGasPayload

  """
  Updates a single `Organisation` using its globally unique id and a patch.
  """
  updateOrganisation(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateOrganisationInput!
  ): UpdateOrganisationPayload

  """Updates a single `Organisation` using a unique key and a patch."""
  updateOrganisationByRowId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateOrganisationByRowIdInput!
  ): UpdateOrganisationPayload

  """Updates a single `Product` using its globally unique id and a patch."""
  updateProduct(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateProductInput!
  ): UpdateProductPayload

  """Updates a single `Product` using a unique key and a patch."""
  updateProductByRowId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateProductByRowIdInput!
  ): UpdateProductPayload

  """
  Updates a single `ProductForm` using its globally unique id and a patch.
  """
  updateProductForm(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateProductFormInput!
  ): UpdateProductFormPayload

  """Updates a single `ProductForm` using a unique key and a patch."""
  updateProductFormByRowId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateProductFormByRowIdInput!
  ): UpdateProductFormPayload

  """
  Updates a single `ReportingYear` using its globally unique id and a patch.
  """
  updateReportingYear(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateReportingYearInput!
  ): UpdateReportingYearPayload

  """Updates a single `ReportingYear` using a unique key and a patch."""
  updateReportingYearByReportingYear(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateReportingYearByReportingYearInput!
  ): UpdateReportingYearPayload

  """
  Updates a single `ReviewComment` using its globally unique id and a patch.
  """
  updateReviewComment(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateReviewCommentInput!
  ): UpdateReviewCommentPayload

  """Updates a single `ReviewComment` using a unique key and a patch."""
  updateReviewCommentByRowId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateReviewCommentByRowIdInput!
  ): UpdateReviewCommentPayload
}

"""An object with a globally unique `ID`."""
interface Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  id: ID!
}

type OperatorContactDatum {
  contactCity: String
  contactCountry: String
  contactMailingAddress: String
  contactPostalCode: String
  contactProvince: String
  contactType: String
  email: String
  fax: String
  firstName: String
  lastName: String
  positionTitle: String
  reportId: Int
  reportingYear: String
  swrsOrganisationId: Int
  swrsReportId: Int
  telephone: String
}

"""
Table containing information on an organisaiton that has applied for CIIP
"""
type Organisation implements Node {
  """Reads and enables pagination through a set of `CiipUserOrganisation`."""
  ciipUserOrganisationsByOrganisationId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CiipUserOrganisationCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CiipUserOrganisation`."""
    orderBy: [CiipUserOrganisationsOrderBy!] = [PRIMARY_KEY_ASC]
  ): CiipUserOrganisationsConnection!

  """cra business number"""
  craBusinessNumber: String

  """duns number"""
  duns: String

  """Reads and enables pagination through a set of `Facility`."""
  facilitiesByOrganisationId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: FacilityCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Facility`."""
    orderBy: [FacilitiesOrderBy!] = [PRIMARY_KEY_ASC]
  ): FacilitiesConnection!

  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  id: ID!

  """organisation city"""
  operatorCity: String

  """organisation country"""
  operatorCountry: String

  """organisation mailing address"""
  operatorMailingAddress: String

  """legal name of organisation"""
  operatorName: String

  """organisation postal code"""
  operatorPostalCode: String

  """organisation province"""
  operatorProvince: String

  """trade name of organisation"""
  operatorTradeName: String

  """report id from swrs"""
  reportId: Int

  """the reporting year"""
  reportingYear: String

  """unique if for the organisation"""
  rowId: Int!

  """swrs organisation id"""
  swrsOrganisationId: Int

  """swrs report id from swrs"""
  swrsReportId: Int
}

"""
A condition to be used against `Organisation` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input OrganisationCondition {
  """Checks for equality with the object’s `craBusinessNumber` field."""
  craBusinessNumber: String

  """Checks for equality with the object’s `duns` field."""
  duns: String

  """Checks for equality with the object’s `operatorCity` field."""
  operatorCity: String

  """Checks for equality with the object’s `operatorCountry` field."""
  operatorCountry: String

  """Checks for equality with the object’s `operatorMailingAddress` field."""
  operatorMailingAddress: String

  """Checks for equality with the object’s `operatorName` field."""
  operatorName: String

  """Checks for equality with the object’s `operatorPostalCode` field."""
  operatorPostalCode: String

  """Checks for equality with the object’s `operatorProvince` field."""
  operatorProvince: String

  """Checks for equality with the object’s `operatorTradeName` field."""
  operatorTradeName: String

  """Checks for equality with the object’s `reportId` field."""
  reportId: Int

  """Checks for equality with the object’s `reportingYear` field."""
  reportingYear: String

  """Checks for equality with the object’s `rowId` field."""
  rowId: Int

  """Checks for equality with the object’s `swrsOrganisationId` field."""
  swrsOrganisationId: Int

  """Checks for equality with the object’s `swrsReportId` field."""
  swrsReportId: Int
}

type OrganisationDatum {
  craBusinessNumber: String
  duns: String
  operatorCity: String
  operatorCountry: String
  operatorMailingAddress: String
  operatorName: String
  operatorPostalCode: String
  operatorProvince: String
  operatorTradeName: String
  reportId: Int
  reportingYear: String
  swrsOrganisationId: Int
  swrsReportId: Int
}

"""An input for mutations affecting `Organisation`"""
input OrganisationInput {
  """cra business number"""
  craBusinessNumber: String

  """duns number"""
  duns: String

  """organisation city"""
  operatorCity: String

  """organisation country"""
  operatorCountry: String

  """organisation mailing address"""
  operatorMailingAddress: String

  """legal name of organisation"""
  operatorName: String

  """organisation postal code"""
  operatorPostalCode: String

  """organisation province"""
  operatorProvince: String

  """trade name of organisation"""
  operatorTradeName: String

  """report id from swrs"""
  reportId: Int

  """the reporting year"""
  reportingYear: String

  """swrs organisation id"""
  swrsOrganisationId: Int

  """swrs report id from swrs"""
  swrsReportId: Int
}

"""
Represents an update to a `Organisation`. Fields that are set will be updated.
"""
input OrganisationPatch {
  """cra business number"""
  craBusinessNumber: String

  """duns number"""
  duns: String

  """organisation city"""
  operatorCity: String

  """organisation country"""
  operatorCountry: String

  """organisation mailing address"""
  operatorMailingAddress: String

  """legal name of organisation"""
  operatorName: String

  """organisation postal code"""
  operatorPostalCode: String

  """organisation province"""
  operatorProvince: String

  """trade name of organisation"""
  operatorTradeName: String

  """report id from swrs"""
  reportId: Int

  """the reporting year"""
  reportingYear: String

  """swrs organisation id"""
  swrsOrganisationId: Int

  """swrs report id from swrs"""
  swrsReportId: Int
}

"""A connection to a list of `Organisation` values."""
type OrganisationsConnection {
  """
  A list of edges which contains the `Organisation` and cursor to aid in pagination.
  """
  edges: [OrganisationsEdge!]!

  """A list of `Organisation` objects."""
  nodes: [Organisation]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Organisation` you could get from the connection."""
  totalCount: Int!
}

"""A `Organisation` edge in the connection."""
type OrganisationsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Organisation` at the end of the edge."""
  node: Organisation
}

"""Methods to use when ordering `Organisation`."""
enum OrganisationsOrderBy {
  CRA_BUSINESS_NUMBER_ASC
  CRA_BUSINESS_NUMBER_DESC
  DUNS_ASC
  DUNS_DESC
  ID_ASC
  ID_DESC
  NATURAL
  OPERATOR_CITY_ASC
  OPERATOR_CITY_DESC
  OPERATOR_COUNTRY_ASC
  OPERATOR_COUNTRY_DESC
  OPERATOR_MAILING_ADDRESS_ASC
  OPERATOR_MAILING_ADDRESS_DESC
  OPERATOR_NAME_ASC
  OPERATOR_NAME_DESC
  OPERATOR_POSTAL_CODE_ASC
  OPERATOR_POSTAL_CODE_DESC
  OPERATOR_PROVINCE_ASC
  OPERATOR_PROVINCE_DESC
  OPERATOR_TRADE_NAME_ASC
  OPERATOR_TRADE_NAME_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  REPORT_ID_ASC
  REPORT_ID_DESC
  REPORTING_YEAR_ASC
  REPORTING_YEAR_DESC
  SWRS_ORGANISATION_ID_ASC
  SWRS_ORGANISATION_ID_DESC
  SWRS_REPORT_ID_ASC
  SWRS_REPORT_ID_DESC
}

"""Information about pagination in a connection."""
type PageInfo {
  """When paginating forwards, the cursor to continue."""
  endCursor: Cursor

  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: Cursor
}

"""Table containing the information for a CIIP product"""
type Product implements Node {
  """Reads and enables pagination through a set of `Benchmark`."""
  benchmarksByProductId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: BenchmarkCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Benchmark`."""
    orderBy: [BenchmarksOrderBy!] = [PRIMARY_KEY_ASC]
  ): BenchmarksConnection!

  """Creation date of row"""
  createdAt: Datetime!

  """Creator of row"""
  createdBy: String

  """Date of deletion"""
  deletedAt: Datetime

  """The user who deleted the row"""
  deletedBy: String

  """The description of the product"""
  description: String

  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  id: ID!

  """The name of the product"""
  name: String!

  """The parent ID(s) (previous state) of the product"""
  parent: [Int]

  """Reads a single `ProductForm` that is related to this `Product`."""
  productFormByProductFormId: ProductForm

  """
  The id of the product form definition, for products that require more complex calculation
  """
  productFormId: Int

  """Unique ID for the product"""
  rowId: Int!

  """
  The current state of the product within the lifecycle (created, split, merged, redefined, archived, unarchived)
  """
  state: String

  """The unit of measure for the product"""
  units: String

  """Updated date of row"""
  updatedAt: Datetime!

  """Updator of row"""
  updatedBy: String
}

"""
A condition to be used against `Product` object types. All fields are tested for equality and combined with a logical ‘and.’
"""
input ProductCondition {
  """Checks for equality with the object’s `createdAt` field."""
  createdAt: Datetime

  """Checks for equality with the object’s `createdBy` field."""
  createdBy: String

  """Checks for equality with the object’s `deletedAt` field."""
  deletedAt: Datetime

  """Checks for equality with the object’s `deletedBy` field."""
  deletedBy: String

  """Checks for equality with the object’s `description` field."""
  description: String

  """Checks for equality with the object’s `name` field."""
  name: String

  """Checks for equality with the object’s `parent` field."""
  parent: [Int]

  """Checks for equality with the object’s `productFormId` field."""
  productFormId: Int

  """Checks for equality with the object’s `rowId` field."""
  rowId: Int

  """Checks for equality with the object’s `state` field."""
  state: String

  """Checks for equality with the object’s `units` field."""
  units: String

  """Checks for equality with the object’s `updatedAt` field."""
  updatedAt: Datetime

  """Checks for equality with the object’s `updatedBy` field."""
  updatedBy: String
}

"""
The table that holds the custom form schemas and calculation formulas for complex products
"""
type ProductForm implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  id: ID!

  """The description of the custom form schema"""
  productFormDescription: String

  """The json schema used to render the form"""
  productFormSchema: JSON!

  """
  The formula used to calculate the procuction value from the form inputs
  """
  productionCalculationFormula: String!

  """Reads and enables pagination through a set of `Product`."""
  productsByProductFormId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProductCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Product`."""
    orderBy: [ProductsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ProductsConnection!

  """A generated primary key id for the row"""
  rowId: Int!
}

"""
A condition to be used against `ProductForm` object types. All fields are tested
for equality and combined with a logical ‘and.’
"""
input ProductFormCondition {
  """Checks for equality with the object’s `productFormDescription` field."""
  productFormDescription: String

  """Checks for equality with the object’s `productFormSchema` field."""
  productFormSchema: JSON

  """
  Checks for equality with the object’s `productionCalculationFormula` field.
  """
  productionCalculationFormula: String

  """Checks for equality with the object’s `rowId` field."""
  rowId: Int
}

"""An input for mutations affecting `ProductForm`"""
input ProductFormInput {
  """The description of the custom form schema"""
  productFormDescription: String

  """The json schema used to render the form"""
  productFormSchema: JSON!

  """
  The formula used to calculate the procuction value from the form inputs
  """
  productionCalculationFormula: String!
}

"""
Represents an update to a `ProductForm`. Fields that are set will be updated.
"""
input ProductFormPatch {
  """The description of the custom form schema"""
  productFormDescription: String

  """The json schema used to render the form"""
  productFormSchema: JSON

  """
  The formula used to calculate the procuction value from the form inputs
  """
  productionCalculationFormula: String
}

"""A connection to a list of `ProductForm` values."""
type ProductFormsConnection {
  """
  A list of edges which contains the `ProductForm` and cursor to aid in pagination.
  """
  edges: [ProductFormsEdge!]!

  """A list of `ProductForm` objects."""
  nodes: [ProductForm]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `ProductForm` you could get from the connection."""
  totalCount: Int!
}

"""A `ProductForm` edge in the connection."""
type ProductFormsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `ProductForm` at the end of the edge."""
  node: ProductForm
}

"""Methods to use when ordering `ProductForm`."""
enum ProductFormsOrderBy {
  ID_ASC
  ID_DESC
  NATURAL
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  PRODUCT_FORM_DESCRIPTION_ASC
  PRODUCT_FORM_DESCRIPTION_DESC
  PRODUCT_FORM_SCHEMA_ASC
  PRODUCT_FORM_SCHEMA_DESC
  PRODUCTION_CALCULATION_FORMULA_ASC
  PRODUCTION_CALCULATION_FORMULA_DESC
}

"""An input for mutations affecting `Product`"""
input ProductInput {
  """Creation date of row"""
  createdAt: Datetime

  """Creator of row"""
  createdBy: String

  """Date of deletion"""
  deletedAt: Datetime

  """The user who deleted the row"""
  deletedBy: String

  """The description of the product"""
  description: String

  """The name of the product"""
  name: String!

  """The parent ID(s) (previous state) of the product"""
  parent: [Int]

  """
  The id of the product form definition, for products that require more complex calculation
  """
  productFormId: Int

  """
  The current state of the product within the lifecycle (created, split, merged, redefined, archived, unarchived)
  """
  state: String

  """The unit of measure for the product"""
  units: String

  """Updated date of row"""
  updatedAt: Datetime

  """Updator of row"""
  updatedBy: String
}

"""
Represents an update to a `Product`. Fields that are set will be updated.
"""
input ProductPatch {
  """Creation date of row"""
  createdAt: Datetime

  """Creator of row"""
  createdBy: String

  """Date of deletion"""
  deletedAt: Datetime

  """The user who deleted the row"""
  deletedBy: String

  """The description of the product"""
  description: String

  """The name of the product"""
  name: String

  """The parent ID(s) (previous state) of the product"""
  parent: [Int]

  """
  The id of the product form definition, for products that require more complex calculation
  """
  productFormId: Int

  """
  The current state of the product within the lifecycle (created, split, merged, redefined, archived, unarchived)
  """
  state: String

  """The unit of measure for the product"""
  units: String

  """Updated date of row"""
  updatedAt: Datetime

  """Updator of row"""
  updatedBy: String
}

"""A connection to a list of `Product` values."""
type ProductsConnection {
  """
  A list of edges which contains the `Product` and cursor to aid in pagination.
  """
  edges: [ProductsEdge!]!

  """A list of `Product` objects."""
  nodes: [Product]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Product` you could get from the connection."""
  totalCount: Int!
}

"""A `Product` edge in the connection."""
type ProductsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Product` at the end of the edge."""
  node: Product
}

"""Methods to use when ordering `Product`."""
enum ProductsOrderBy {
  CREATED_AT_ASC
  CREATED_AT_DESC
  CREATED_BY_ASC
  CREATED_BY_DESC
  DELETED_AT_ASC
  DELETED_AT_DESC
  DELETED_BY_ASC
  DELETED_BY_DESC
  DESCRIPTION_ASC
  DESCRIPTION_DESC
  ID_ASC
  ID_DESC
  NAME_ASC
  NAME_DESC
  NATURAL
  PARENT_ASC
  PARENT_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  PRODUCT_FORM_ID_ASC
  PRODUCT_FORM_ID_DESC
  STATE_ASC
  STATE_DESC
  UNITS_ASC
  UNITS_DESC
  UPDATED_AT_ASC
  UPDATED_AT_DESC
  UPDATED_BY_ASC
  UPDATED_BY_DESC
}

"""The root query type which gives access points into the data universe."""
type Query implements Node {
  """Reads and enables pagination through a set of `ApplicationReview`."""
  allApplicationReviews(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ApplicationReviewCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `ApplicationReview`."""
    orderBy: [ApplicationReviewsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ApplicationReviewsConnection

  """Reads and enables pagination through a set of `Application`."""
  allApplications(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ApplicationCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Application`."""
    orderBy: [ApplicationsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ApplicationsConnection

  """Reads and enables pagination through a set of `ApplicationStatus`."""
  allApplicationStatuses(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ApplicationStatusCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `ApplicationStatus`."""
    orderBy: [ApplicationStatusesOrderBy!] = [PRIMARY_KEY_ASC]
  ): ApplicationStatusesConnection

  """Reads and enables pagination through a set of `Benchmark`."""
  allBenchmarks(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: BenchmarkCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Benchmark`."""
    orderBy: [BenchmarksOrderBy!] = [PRIMARY_KEY_ASC]
  ): BenchmarksConnection

  """Reads and enables pagination through a set of `CertificationUrl`."""
  allCertificationUrls(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CertificationUrlCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CertificationUrl`."""
    orderBy: [CertificationUrlsOrderBy!] = [PRIMARY_KEY_ASC]
  ): CertificationUrlsConnection

  """Reads and enables pagination through a set of `CiipApplication`."""
  allCiipApplications(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CiipApplicationCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CiipApplication`."""
    orderBy: [CiipApplicationsOrderBy!] = [PRIMARY_KEY_ASC]
  ): CiipApplicationsConnection

  """Reads and enables pagination through a set of `CiipApplicationWizard`."""
  allCiipApplicationWizards(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CiipApplicationWizardCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CiipApplicationWizard`."""
    orderBy: [CiipApplicationWizardsOrderBy!] = [PRIMARY_KEY_ASC]
  ): CiipApplicationWizardsConnection

  """
  Reads and enables pagination through a set of `CiipCarbonTaxCalculation`.
  """
  allCiipCarbonTaxCalculations(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CiipCarbonTaxCalculationCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CiipCarbonTaxCalculation`."""
    orderBy: [CiipCarbonTaxCalculationsOrderBy!] = [NATURAL]
  ): CiipCarbonTaxCalculationsConnection

  """Reads and enables pagination through a set of `CiipCertifier`."""
  allCiipCertifiers(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CiipCertifierCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CiipCertifier`."""
    orderBy: [CiipCertifiersOrderBy!] = [PRIMARY_KEY_ASC]
  ): CiipCertifiersConnection

  """Reads and enables pagination through a set of `CiipContact`."""
  allCiipContacts(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CiipContactCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CiipContact`."""
    orderBy: [CiipContactsOrderBy!] = [PRIMARY_KEY_ASC]
  ): CiipContactsConnection

  """
  Reads and enables pagination through a set of `CiipElectricityAndHeat`.
  """
  allCiipElectricityAndHeats(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CiipElectricityAndHeatCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CiipElectricityAndHeat`."""
    orderBy: [CiipElectricityAndHeatsOrderBy!] = [PRIMARY_KEY_ASC]
  ): CiipElectricityAndHeatsConnection

  """Reads and enables pagination through a set of `CiipFacility`."""
  allCiipFacilities(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CiipFacilityCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CiipFacility`."""
    orderBy: [CiipFacilitiesOrderBy!] = [PRIMARY_KEY_ASC]
  ): CiipFacilitiesConnection

  """Reads and enables pagination through a set of `CiipFuel`."""
  allCiipFuels(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CiipFuelCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CiipFuel`."""
    orderBy: [CiipFuelsOrderBy!] = [PRIMARY_KEY_ASC]
  ): CiipFuelsConnection

  """Reads and enables pagination through a set of `CiipOperator`."""
  allCiipOperators(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CiipOperatorCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CiipOperator`."""
    orderBy: [CiipOperatorsOrderBy!] = [PRIMARY_KEY_ASC]
  ): CiipOperatorsConnection

  """Reads and enables pagination through a set of `CiipProduction`."""
  allCiipProductions(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CiipProductionCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CiipProduction`."""
    orderBy: [CiipProductionsOrderBy!] = [PRIMARY_KEY_ASC]
  ): CiipProductionsConnection

  """Reads and enables pagination through a set of `CiipUserOrganisation`."""
  allCiipUserOrganisations(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CiipUserOrganisationCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CiipUserOrganisation`."""
    orderBy: [CiipUserOrganisationsOrderBy!] = [PRIMARY_KEY_ASC]
  ): CiipUserOrganisationsConnection

  """Reads and enables pagination through a set of `CiipUser`."""
  allCiipUsers(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CiipUserCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CiipUser`."""
    orderBy: [CiipUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): CiipUsersConnection

  """Reads and enables pagination through a set of `EmissionCategoryGas`."""
  allEmissionCategoryGases(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: EmissionCategoryGasCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `EmissionCategoryGas`."""
    orderBy: [EmissionCategoryGasesOrderBy!] = [PRIMARY_KEY_ASC]
  ): EmissionCategoryGasesConnection

  """
  Reads and enables pagination through a set of `EstimatedCarbonTaxPaid`.
  """
  allEstimatedCarbonTaxPaids(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: EstimatedCarbonTaxPaidCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `EstimatedCarbonTaxPaid`."""
    orderBy: [EstimatedCarbonTaxPaidsOrderBy!] = [NATURAL]
  ): EstimatedCarbonTaxPaidsConnection

  """Reads and enables pagination through a set of `Facility`."""
  allFacilities(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: FacilityCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Facility`."""
    orderBy: [FacilitiesOrderBy!] = [PRIMARY_KEY_ASC]
  ): FacilitiesConnection

  """Reads and enables pagination through a set of `FormJson`."""
  allFormJsons(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: FormJsonCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `FormJson`."""
    orderBy: [FormJsonsOrderBy!] = [PRIMARY_KEY_ASC]
  ): FormJsonsConnection

  """Reads and enables pagination through a set of `FormResult`."""
  allFormResults(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: FormResultCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `FormResult`."""
    orderBy: [FormResultsOrderBy!] = [PRIMARY_KEY_ASC]
  ): FormResultsConnection

  """Reads and enables pagination through a set of `Fuel`."""
  allFuels(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: FuelCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Fuel`."""
    orderBy: [FuelsOrderBy!] = [PRIMARY_KEY_ASC]
  ): FuelsConnection

  """Reads and enables pagination through a set of `Gas`."""
  allGases(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: GasCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Gas`."""
    orderBy: [GasesOrderBy!] = [PRIMARY_KEY_ASC]
  ): GasesConnection

  """Reads and enables pagination through a set of `Organisation`."""
  allOrganisations(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: OrganisationCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Organisation`."""
    orderBy: [OrganisationsOrderBy!] = [PRIMARY_KEY_ASC]
  ): OrganisationsConnection

  """Reads and enables pagination through a set of `ProductForm`."""
  allProductForms(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProductFormCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `ProductForm`."""
    orderBy: [ProductFormsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ProductFormsConnection

  """Reads and enables pagination through a set of `Product`."""
  allProducts(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProductCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Product`."""
    orderBy: [ProductsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ProductsConnection

  """Reads and enables pagination through a set of `ReportingYear`."""
  allReportingYears(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ReportingYearCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `ReportingYear`."""
    orderBy: [ReportingYearsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ReportingYearsConnection

  """Reads and enables pagination through a set of `ReviewComment`."""
  allReviewComments(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ReviewCommentCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `ReviewComment`."""
    orderBy: [ReviewCommentsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ReviewCommentsConnection

  """Reads a single `Application` using its globally unique `ID`."""
  application(
    """
    The globally unique `ID` to be used in selecting a single `Application`.
    """
    id: ID!
  ): Application
  applicationByRowId(rowId: Int!): Application

  """Reads a single `ApplicationReview` using its globally unique `ID`."""
  applicationReview(
    """
    The globally unique `ID` to be used in selecting a single `ApplicationReview`.
    """
    id: ID!
  ): ApplicationReview
  applicationReviewByRowId(rowId: Int!): ApplicationReview

  """Reads a single `ApplicationStatus` using its globally unique `ID`."""
  applicationStatus(
    """
    The globally unique `ID` to be used in selecting a single `ApplicationStatus`.
    """
    id: ID!
  ): ApplicationStatus
  applicationStatusByRowId(rowId: Int!): ApplicationStatus

  """Reads a single `Benchmark` using its globally unique `ID`."""
  benchmark(
    """The globally unique `ID` to be used in selecting a single `Benchmark`."""
    id: ID!
  ): Benchmark
  benchmarkByRowId(rowId: Int!): Benchmark

  """Reads a single `CertificationUrl` using its globally unique `ID`."""
  certificationUrl(
    """
    The globally unique `ID` to be used in selecting a single `CertificationUrl`.
    """
    id: ID!
  ): CertificationUrl
  certificationUrlByRowId(rowId: Int!): CertificationUrl

  """Reads a single `CiipApplication` using its globally unique `ID`."""
  ciipApplication(
    """
    The globally unique `ID` to be used in selecting a single `CiipApplication`.
    """
    id: ID!
  ): CiipApplication
  ciipApplicationByRowId(rowId: Int!): CiipApplication

  """Reads a single `CiipApplicationWizard` using its globally unique `ID`."""
  ciipApplicationWizard(
    """
    The globally unique `ID` to be used in selecting a single `CiipApplicationWizard`.
    """
    id: ID!
  ): CiipApplicationWizard
  ciipApplicationWizardByFormId(formId: Int!): CiipApplicationWizard

  """Reads a single `CiipCertifier` using its globally unique `ID`."""
  ciipCertifier(
    """
    The globally unique `ID` to be used in selecting a single `CiipCertifier`.
    """
    id: ID!
  ): CiipCertifier
  ciipCertifierByRowId(rowId: Int!): CiipCertifier

  """Reads a single `CiipContact` using its globally unique `ID`."""
  ciipContact(
    """
    The globally unique `ID` to be used in selecting a single `CiipContact`.
    """
    id: ID!
  ): CiipContact
  ciipContactByRowId(rowId: Int!): CiipContact

  """
  Reads a single `CiipElectricityAndHeat` using its globally unique `ID`.
  """
  ciipElectricityAndHeat(
    """
    The globally unique `ID` to be used in selecting a single `CiipElectricityAndHeat`.
    """
    id: ID!
  ): CiipElectricityAndHeat
  ciipElectricityAndHeatByRowId(rowId: Int!): CiipElectricityAndHeat

  """Reads a single `CiipFacility` using its globally unique `ID`."""
  ciipFacility(
    """
    The globally unique `ID` to be used in selecting a single `CiipFacility`.
    """
    id: ID!
  ): CiipFacility
  ciipFacilityByRowId(rowId: Int!): CiipFacility

  """Reads a single `CiipFuel` using its globally unique `ID`."""
  ciipFuel(
    """The globally unique `ID` to be used in selecting a single `CiipFuel`."""
    id: ID!
  ): CiipFuel
  ciipFuelByRowId(rowId: Int!): CiipFuel

  """Reads a single `CiipOperator` using its globally unique `ID`."""
  ciipOperator(
    """
    The globally unique `ID` to be used in selecting a single `CiipOperator`.
    """
    id: ID!
  ): CiipOperator
  ciipOperatorByRowId(rowId: Int!): CiipOperator

  """Reads a single `CiipProduction` using its globally unique `ID`."""
  ciipProduction(
    """
    The globally unique `ID` to be used in selecting a single `CiipProduction`.
    """
    id: ID!
  ): CiipProduction
  ciipProductionByRowId(rowId: Int!): CiipProduction

  """Reads a single `CiipUser` using its globally unique `ID`."""
  ciipUser(
    """The globally unique `ID` to be used in selecting a single `CiipUser`."""
    id: ID!
  ): CiipUser
  ciipUserByRowId(rowId: Int!): CiipUser

  """Reads a single `CiipUserOrganisation` using its globally unique `ID`."""
  ciipUserOrganisation(
    """
    The globally unique `ID` to be used in selecting a single `CiipUserOrganisation`.
    """
    id: ID!
  ): CiipUserOrganisation
  ciipUserOrganisationByUserIdAndOrganisationId(organisationId: Int!, userId: Int!): CiipUserOrganisation

  """Reads a single `EmissionCategoryGas` using its globally unique `ID`."""
  emissionCategoryGas(
    """
    The globally unique `ID` to be used in selecting a single `EmissionCategoryGas`.
    """
    id: ID!
  ): EmissionCategoryGas
  emissionCategoryGasByRowId(rowId: Int!): EmissionCategoryGas

  """Reads a single `Facility` using its globally unique `ID`."""
  facility(
    """The globally unique `ID` to be used in selecting a single `Facility`."""
    id: ID!
  ): Facility
  facilityByRowId(rowId: Int!): Facility

  """Reads a single `FormJson` using its globally unique `ID`."""
  formJson(
    """The globally unique `ID` to be used in selecting a single `FormJson`."""
    id: ID!
  ): FormJson
  formJsonByRowId(rowId: Int!): FormJson

  """Reads a single `FormResult` using its globally unique `ID`."""
  formResult(
    """
    The globally unique `ID` to be used in selecting a single `FormResult`.
    """
    id: ID!
  ): FormResult
  formResultByRowId(rowId: Int!): FormResult

  """Reads a single `Fuel` using its globally unique `ID`."""
  fuel(
    """The globally unique `ID` to be used in selecting a single `Fuel`."""
    id: ID!
  ): Fuel
  fuelByRowId(rowId: Int!): Fuel

  """Reads a single `Gas` using its globally unique `ID`."""
  gas(
    """The globally unique `ID` to be used in selecting a single `Gas`."""
    id: ID!
  ): Gas
  gasByRowId(rowId: Int!): Gas

  """
  Reads and enables pagination through a set of `EstimatedCarbonTaxPaid`.
  """
  getCarbonTaxByBcghgid(
    """Read all values in the set after (below) this cursor."""
    after: Cursor
    bcghgidInput: BigFloat

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int
    reportingYear: String
  ): EstimatedCarbonTaxPaidsConnection!

  """Reads and enables pagination through a set of `CarbonTaxDatum`."""
  getCarbonTaxData(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int
  ): CarbonTaxDataConnection!

  """Reads and enables pagination through a set of `CiipProduction`."""
  getProductsByApplicationId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor
    appId: String

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int
  ): CiipProductionsConnection!

  """Reads and enables pagination through a set of `CiipProduction`."""
  getProductsByBcghgid(
    """Read all values in the set after (below) this cursor."""
    after: Cursor
    bcghgidInput: BigFloat

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int
  ): CiipProductionsConnection!

  """Function returning current reporting year and related dates"""
  getReportingYear: ReportingYear

  """Reads and enables pagination through a set of `EmissionDatum`."""
  getSwrsEmissionData(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor
    facilityId: Int

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int
    reportingYear: String
  ): EmissionDataConnection!
  getSwrsFacilityData(facilityId: Int, reportingYear: String): FacilityDatum

  """Reads and enables pagination through a set of `FuelDatum`."""
  getSwrsFuelData(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor
    facilityId: Int

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int
    reportingYear: String
  ): FuelDataConnection!
  getSwrsOperatorContactData(facilityId: Int, reportingYear: String): OperatorContactDatum
  getSwrsOrganisationData(facilityId: Int, reportingYear: String): OrganisationDatum

  """
  The root query type must be a `Node` to work well with Relay 1 mutations. This just resolves to `query`.
  """
  id: ID!

  """Fetches an object given its globally unique `ID`."""
  node(
    """The globally unique `ID`."""
    id: ID!
  ): Node

  """Reads a single `Organisation` using its globally unique `ID`."""
  organisation(
    """
    The globally unique `ID` to be used in selecting a single `Organisation`.
    """
    id: ID!
  ): Organisation
  organisationByRowId(rowId: Int!): Organisation

  """Reads a single `Product` using its globally unique `ID`."""
  product(
    """The globally unique `ID` to be used in selecting a single `Product`."""
    id: ID!
  ): Product
  productByRowId(rowId: Int!): Product

  """Reads a single `ProductForm` using its globally unique `ID`."""
  productForm(
    """
    The globally unique `ID` to be used in selecting a single `ProductForm`.
    """
    id: ID!
  ): ProductForm
  productFormByRowId(rowId: Int!): ProductForm

  """
  Exposes the root query type nested one level down. This is helpful for Relay 1
  which can only query top level fields if they are in a particular form.
  """
  query: Query!

  """Reads a single `ReportingYear` using its globally unique `ID`."""
  reportingYear(
    """
    The globally unique `ID` to be used in selecting a single `ReportingYear`.
    """
    id: ID!
  ): ReportingYear
  reportingYearByReportingYear(reportingYear: Int!): ReportingYear

  """Reads a single `ReviewComment` using its globally unique `ID`."""
  reviewComment(
    """
    The globally unique `ID` to be used in selecting a single `ReviewComment`.
    """
    id: ID!
  ): ReviewComment
  reviewCommentByRowId(rowId: Int!): ReviewComment

  """Reads and enables pagination through a set of `CiipApplication`."""
  searchApplicationList(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor
    direction: String

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int
    orderByField: String
    searchField: String
    searchValue: String
  ): CiipApplicationsConnection!

  """Reads and enables pagination through a set of `CiipUserOrganisation`."""
  searchCiipUserOrganisation(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor
    direction: String

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int
    orderByField: String
    searchField: String
    searchValue: String
  ): CiipUserOrganisationsConnection!

  """Reads and enables pagination through a set of `Product`."""
  searchProducts(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor
    direction: String

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int
    orderByField: String
    searchField: String
    searchValue: String
  ): ProductsConnection!
  session: JwtToken
}

"""
Table containing the reporting year and important dates related to the application
"""
type ReportingYear implements Node {
  """The date cipp applications close"""
  applicationEndDate: Datetime!

  """The date cipp applications open"""
  applicationOpenDate: Datetime!

  """The date cipp users can expect a response by"""
  applicationResponseDate: Datetime!

  """Reads and enables pagination through a set of `Application`."""
  applicationsByReportingYear(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ApplicationCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Application`."""
    orderBy: [ApplicationsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ApplicationsConnection!

  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  id: ID!

  """The date reporting period ends"""
  reportingPeriodEnd: Datetime!

  """The date reporting period starts"""
  reportingPeriodStart: Datetime!

  """The current reporting year"""
  reportingYear: Int!
}

"""
A condition to be used against `ReportingYear` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input ReportingYearCondition {
  """Checks for equality with the object’s `applicationEndDate` field."""
  applicationEndDate: Datetime

  """Checks for equality with the object’s `applicationOpenDate` field."""
  applicationOpenDate: Datetime

  """Checks for equality with the object’s `applicationResponseDate` field."""
  applicationResponseDate: Datetime

  """Checks for equality with the object’s `reportingPeriodEnd` field."""
  reportingPeriodEnd: Datetime

  """Checks for equality with the object’s `reportingPeriodStart` field."""
  reportingPeriodStart: Datetime

  """Checks for equality with the object’s `reportingYear` field."""
  reportingYear: Int
}

"""An input for mutations affecting `ReportingYear`"""
input ReportingYearInput {
  """The date cipp applications close"""
  applicationEndDate: Datetime!

  """The date cipp applications open"""
  applicationOpenDate: Datetime!

  """The date cipp users can expect a response by"""
  applicationResponseDate: Datetime!

  """The date reporting period ends"""
  reportingPeriodEnd: Datetime!

  """The date reporting period starts"""
  reportingPeriodStart: Datetime!

  """The current reporting year"""
  reportingYear: Int!
}

"""
Represents an update to a `ReportingYear`. Fields that are set will be updated.
"""
input ReportingYearPatch {
  """The date cipp applications close"""
  applicationEndDate: Datetime

  """The date cipp applications open"""
  applicationOpenDate: Datetime

  """The date cipp users can expect a response by"""
  applicationResponseDate: Datetime

  """The date reporting period ends"""
  reportingPeriodEnd: Datetime

  """The date reporting period starts"""
  reportingPeriodStart: Datetime

  """The current reporting year"""
  reportingYear: Int
}

"""A connection to a list of `ReportingYear` values."""
type ReportingYearsConnection {
  """
  A list of edges which contains the `ReportingYear` and cursor to aid in pagination.
  """
  edges: [ReportingYearsEdge!]!

  """A list of `ReportingYear` objects."""
  nodes: [ReportingYear]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `ReportingYear` you could get from the connection."""
  totalCount: Int!
}

"""A `ReportingYear` edge in the connection."""
type ReportingYearsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `ReportingYear` at the end of the edge."""
  node: ReportingYear
}

"""Methods to use when ordering `ReportingYear`."""
enum ReportingYearsOrderBy {
  APPLICATION_END_DATE_ASC
  APPLICATION_END_DATE_DESC
  APPLICATION_OPEN_DATE_ASC
  APPLICATION_OPEN_DATE_DESC
  APPLICATION_RESPONSE_DATE_ASC
  APPLICATION_RESPONSE_DATE_DESC
  NATURAL
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  REPORTING_PERIOD_END_ASC
  REPORTING_PERIOD_END_DESC
  REPORTING_PERIOD_START_ASC
  REPORTING_PERIOD_START_DESC
  REPORTING_YEAR_ASC
  REPORTING_YEAR_DESC
}

"""Table containing the information for a CIIP review_comment"""
type ReviewComment implements Node {
  """
  Reads a single `ApplicationReview` that is related to this `ReviewComment`.
  """
  applicationReviewByApplicationReviewId: ApplicationReview

  """FK to application review"""
  applicationReviewId: Int!

  """Creation date of row"""
  createdAt: Datetime!

  """Creator of row"""
  createdBy: String

  """Date of deletion"""
  deletedAt: Datetime

  """The user who deleted the row"""
  deletedBy: String

  """The comment on the review_comment"""
  description: String

  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  id: ID!

  """Unique ID for the review_comment"""
  rowId: Int!

  """The status on the review_comment"""
  status: String

  """Updated date of row"""
  updatedAt: Datetime!

  """Updator of row"""
  updatedBy: String
}

"""
A condition to be used against `ReviewComment` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input ReviewCommentCondition {
  """Checks for equality with the object’s `applicationReviewId` field."""
  applicationReviewId: Int

  """Checks for equality with the object’s `createdAt` field."""
  createdAt: Datetime

  """Checks for equality with the object’s `createdBy` field."""
  createdBy: String

  """Checks for equality with the object’s `deletedAt` field."""
  deletedAt: Datetime

  """Checks for equality with the object’s `deletedBy` field."""
  deletedBy: String

  """Checks for equality with the object’s `description` field."""
  description: String

  """Checks for equality with the object’s `rowId` field."""
  rowId: Int

  """Checks for equality with the object’s `status` field."""
  status: String

  """Checks for equality with the object’s `updatedAt` field."""
  updatedAt: Datetime

  """Checks for equality with the object’s `updatedBy` field."""
  updatedBy: String
}

"""An input for mutations affecting `ReviewComment`"""
input ReviewCommentInput {
  """FK to application review"""
  applicationReviewId: Int!

  """Creation date of row"""
  createdAt: Datetime

  """Creator of row"""
  createdBy: String

  """Date of deletion"""
  deletedAt: Datetime

  """The user who deleted the row"""
  deletedBy: String

  """The comment on the review_comment"""
  description: String

  """The status on the review_comment"""
  status: String

  """Updated date of row"""
  updatedAt: Datetime

  """Updator of row"""
  updatedBy: String
}

"""
Represents an update to a `ReviewComment`. Fields that are set will be updated.
"""
input ReviewCommentPatch {
  """FK to application review"""
  applicationReviewId: Int

  """Creation date of row"""
  createdAt: Datetime

  """Creator of row"""
  createdBy: String

  """Date of deletion"""
  deletedAt: Datetime

  """The user who deleted the row"""
  deletedBy: String

  """The comment on the review_comment"""
  description: String

  """The status on the review_comment"""
  status: String

  """Updated date of row"""
  updatedAt: Datetime

  """Updator of row"""
  updatedBy: String
}

"""A connection to a list of `ReviewComment` values."""
type ReviewCommentsConnection {
  """
  A list of edges which contains the `ReviewComment` and cursor to aid in pagination.
  """
  edges: [ReviewCommentsEdge!]!

  """A list of `ReviewComment` objects."""
  nodes: [ReviewComment]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `ReviewComment` you could get from the connection."""
  totalCount: Int!
}

"""A `ReviewComment` edge in the connection."""
type ReviewCommentsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `ReviewComment` at the end of the edge."""
  node: ReviewComment
}

"""Methods to use when ordering `ReviewComment`."""
enum ReviewCommentsOrderBy {
  APPLICATION_REVIEW_ID_ASC
  APPLICATION_REVIEW_ID_DESC
  CREATED_AT_ASC
  CREATED_AT_DESC
  CREATED_BY_ASC
  CREATED_BY_DESC
  DELETED_AT_ASC
  DELETED_AT_DESC
  DELETED_BY_ASC
  DELETED_BY_DESC
  DESCRIPTION_ASC
  DESCRIPTION_DESC
  ID_ASC
  ID_DESC
  NATURAL
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  STATUS_ASC
  STATUS_DESC
  UPDATED_AT_ASC
  UPDATED_AT_DESC
  UPDATED_BY_ASC
  UPDATED_BY_DESC
}

"""All input for the `saveProductMutationChain` mutation."""
input SaveProductMutationChainInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  newDescription: String
  newName: String
  newParent: [Int]
  newState: String
  newUnits: String
  prevId: Int
}

"""The output of our `saveProductMutationChain` mutation."""
type SaveProductMutationChainPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  product: Product

  """An edge for our `Product`. May be used by Relay 1."""
  productEdge(
    """The method to use when ordering `Product`."""
    orderBy: [ProductsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ProductsEdge

  """Reads a single `ProductForm` that is related to this `Product`."""
  productFormByProductFormId: ProductForm

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `updateApplicationByRowId` mutation."""
input UpdateApplicationByRowIdInput {
  """
  An object where the defined keys will be set on the `Application` being updated.
  """
  applicationPatch: ApplicationPatch!

  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The application id used for reference and join"""
  rowId: Int!
}

"""All input for the `updateApplication` mutation."""
input UpdateApplicationInput {
  """
  An object where the defined keys will be set on the `Application` being updated.
  """
  applicationPatch: ApplicationPatch!

  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Application` to be updated.
  """
  id: ID!
}

"""The output of our update `Application` mutation."""
type UpdateApplicationPayload {
  """The `Application` that was updated by this mutation."""
  application: Application

  """An edge for our `Application`. May be used by Relay 1."""
  applicationEdge(
    """The method to use when ordering `Application`."""
    orderBy: [ApplicationsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ApplicationsEdge

  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """Reads a single `Facility` that is related to this `Application`."""
  facilityByFacilityId: Facility

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `ReportingYear` that is related to this `Application`."""
  reportingYearByReportingYear: ReportingYear
}

"""All input for the `updateApplicationReviewByRowId` mutation."""
input UpdateApplicationReviewByRowIdInput {
  """
  An object where the defined keys will be set on the `ApplicationReview` being updated.
  """
  applicationReviewPatch: ApplicationReviewPatch!

  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The application_review id used for reference and join"""
  rowId: Int!
}

"""All input for the `updateApplicationReview` mutation."""
input UpdateApplicationReviewInput {
  """
  An object where the defined keys will be set on the `ApplicationReview` being updated.
  """
  applicationReviewPatch: ApplicationReviewPatch!

  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `ApplicationReview` to be updated.
  """
  id: ID!
}

"""The output of our update `ApplicationReview` mutation."""
type UpdateApplicationReviewPayload {
  """The `ApplicationReview` that was updated by this mutation."""
  applicationReview: ApplicationReview

  """An edge for our `ApplicationReview`. May be used by Relay 1."""
  applicationReviewEdge(
    """The method to use when ordering `ApplicationReview`."""
    orderBy: [ApplicationReviewsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ApplicationReviewsEdge

  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Reads a single `FormResult` that is related to this `ApplicationReview`.
  """
  formResultByFormResultId: FormResult

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `updateApplicationStatusByRowId` mutation."""
input UpdateApplicationStatusByRowIdInput {
  """
  An object where the defined keys will be set on the `ApplicationStatus` being updated.
  """
  applicationStatusPatch: ApplicationStatusPatch!

  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The id used for reference and join"""
  rowId: Int!
}

"""All input for the `updateApplicationStatus` mutation."""
input UpdateApplicationStatusInput {
  """
  An object where the defined keys will be set on the `ApplicationStatus` being updated.
  """
  applicationStatusPatch: ApplicationStatusPatch!

  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `ApplicationStatus` to be updated.
  """
  id: ID!
}

"""The output of our update `ApplicationStatus` mutation."""
type UpdateApplicationStatusPayload {
  """
  Reads a single `Application` that is related to this `ApplicationStatus`.
  """
  applicationByApplicationId: Application

  """The `ApplicationStatus` that was updated by this mutation."""
  applicationStatus: ApplicationStatus

  """An edge for our `ApplicationStatus`. May be used by Relay 1."""
  applicationStatusEdge(
    """The method to use when ordering `ApplicationStatus`."""
    orderBy: [ApplicationStatusesOrderBy!] = [PRIMARY_KEY_ASC]
  ): ApplicationStatusesEdge

  """Reads a single `CiipUser` that is related to this `ApplicationStatus`."""
  ciipUserByDeletedBy: CiipUser

  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `updateBenchmarkByRowId` mutation."""
input UpdateBenchmarkByRowIdInput {
  """
  An object where the defined keys will be set on the `Benchmark` being updated.
  """
  benchmarkPatch: BenchmarkPatch!

  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """Unique ID for the benchmark"""
  rowId: Int!
}

"""All input for the `updateBenchmark` mutation."""
input UpdateBenchmarkInput {
  """
  An object where the defined keys will be set on the `Benchmark` being updated.
  """
  benchmarkPatch: BenchmarkPatch!

  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Benchmark` to be updated.
  """
  id: ID!
}

"""The output of our update `Benchmark` mutation."""
type UpdateBenchmarkPayload {
  """The `Benchmark` that was updated by this mutation."""
  benchmark: Benchmark

  """An edge for our `Benchmark`. May be used by Relay 1."""
  benchmarkEdge(
    """The method to use when ordering `Benchmark`."""
    orderBy: [BenchmarksOrderBy!] = [PRIMARY_KEY_ASC]
  ): BenchmarksEdge

  """Reads a single `CiipUser` that is related to this `Benchmark`."""
  ciipUserByDeletedBy: CiipUser

  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """Reads a single `Product` that is related to this `Benchmark`."""
  productByProductId: Product

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `updateCertificationUrlByRowId` mutation."""
input UpdateCertificationUrlByRowIdInput {
  """
  An object where the defined keys will be set on the `CertificationUrl` being updated.
  """
  certificationUrlPatch: CertificationUrlPatch!

  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """Unique ID for the certification_url"""
  rowId: Int!
}

"""All input for the `updateCertificationUrl` mutation."""
input UpdateCertificationUrlInput {
  """
  An object where the defined keys will be set on the `CertificationUrl` being updated.
  """
  certificationUrlPatch: CertificationUrlPatch!

  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `CertificationUrl` to be updated.
  """
  id: ID!
}

"""The output of our update `CertificationUrl` mutation."""
type UpdateCertificationUrlPayload {
  """
  Reads a single `Application` that is related to this `CertificationUrl`.
  """
  applicationByApplicationId: Application

  """The `CertificationUrl` that was updated by this mutation."""
  certificationUrl: CertificationUrl

  """An edge for our `CertificationUrl`. May be used by Relay 1."""
  certificationUrlEdge(
    """The method to use when ordering `CertificationUrl`."""
    orderBy: [CertificationUrlsOrderBy!] = [PRIMARY_KEY_ASC]
  ): CertificationUrlsEdge

  """Reads a single `CiipUser` that is related to this `CertificationUrl`."""
  ciipUserByDeletedBy: CiipUser

  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `updateCiipApplicationWizardByFormId` mutation."""
input UpdateCiipApplicationWizardByFormIdInput {
  """
  An object where the defined keys will be set on the `CiipApplicationWizard` being updated.
  """
  ciipApplicationWizardPatch: CiipApplicationWizardPatch!

  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The id of the form"""
  formId: Int!
}

"""All input for the `updateCiipApplicationWizard` mutation."""
input UpdateCiipApplicationWizardInput {
  """
  An object where the defined keys will be set on the `CiipApplicationWizard` being updated.
  """
  ciipApplicationWizardPatch: CiipApplicationWizardPatch!

  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `CiipApplicationWizard` to be updated.
  """
  id: ID!
}

"""The output of our update `CiipApplicationWizard` mutation."""
type UpdateCiipApplicationWizardPayload {
  """The `CiipApplicationWizard` that was updated by this mutation."""
  ciipApplicationWizard: CiipApplicationWizard

  """An edge for our `CiipApplicationWizard`. May be used by Relay 1."""
  ciipApplicationWizardEdge(
    """The method to use when ordering `CiipApplicationWizard`."""
    orderBy: [CiipApplicationWizardsOrderBy!] = [PRIMARY_KEY_ASC]
  ): CiipApplicationWizardsEdge

  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Reads a single `FormJson` that is related to this `CiipApplicationWizard`.
  """
  formJsonByFormId: FormJson

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `updateCiipUserByRowId` mutation."""
input UpdateCiipUserByRowIdInput {
  """
  An object where the defined keys will be set on the `CiipUser` being updated.
  """
  ciipUserPatch: CiipUserPatch!

  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """Unique ID for the user"""
  rowId: Int!
}

"""All input for the `updateCiipUser` mutation."""
input UpdateCiipUserInput {
  """
  An object where the defined keys will be set on the `CiipUser` being updated.
  """
  ciipUserPatch: CiipUserPatch!

  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `CiipUser` to be updated.
  """
  id: ID!
}

"""
All input for the `updateCiipUserOrganisationByUserIdAndOrganisationId` mutation.
"""
input UpdateCiipUserOrganisationByUserIdAndOrganisationIdInput {
  """
  An object where the defined keys will be set on the `CiipUserOrganisation` being updated.
  """
  ciipUserOrganisationPatch: CiipUserOrganisationPatch!

  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """foreign key that references the organisation table"""
  organisationId: Int!

  """foreign key that references the user table"""
  userId: Int!
}

"""All input for the `updateCiipUserOrganisation` mutation."""
input UpdateCiipUserOrganisationInput {
  """
  An object where the defined keys will be set on the `CiipUserOrganisation` being updated.
  """
  ciipUserOrganisationPatch: CiipUserOrganisationPatch!

  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `CiipUserOrganisation` to be updated.
  """
  id: ID!
}

"""The output of our update `CiipUserOrganisation` mutation."""
type UpdateCiipUserOrganisationPayload {
  """
  Reads a single `CiipUser` that is related to this `CiipUserOrganisation`.
  """
  ciipUserByUserId: CiipUser

  """The `CiipUserOrganisation` that was updated by this mutation."""
  ciipUserOrganisation: CiipUserOrganisation

  """An edge for our `CiipUserOrganisation`. May be used by Relay 1."""
  ciipUserOrganisationEdge(
    """The method to use when ordering `CiipUserOrganisation`."""
    orderBy: [CiipUserOrganisationsOrderBy!] = [PRIMARY_KEY_ASC]
  ): CiipUserOrganisationsEdge

  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Reads a single `Organisation` that is related to this `CiipUserOrganisation`.
  """
  organisationByOrganisationId: Organisation

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""The output of our update `CiipUser` mutation."""
type UpdateCiipUserPayload {
  """The `CiipUser` that was updated by this mutation."""
  ciipUser: CiipUser

  """Reads a single `CiipUser` that is related to this `CiipUser`."""
  ciipUserByDeletedBy: CiipUser

  """An edge for our `CiipUser`. May be used by Relay 1."""
  ciipUserEdge(
    """The method to use when ordering `CiipUser`."""
    orderBy: [CiipUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): CiipUsersEdge

  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `updateEmissionCategoryGasByRowId` mutation."""
input UpdateEmissionCategoryGasByRowIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `EmissionCategoryGas` being updated.
  """
  emissionCategoryGasPatch: EmissionCategoryGasPatch!

  """Unique ID for the emission_category_gas"""
  rowId: Int!
}

"""All input for the `updateEmissionCategoryGas` mutation."""
input UpdateEmissionCategoryGasInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `EmissionCategoryGas` being updated.
  """
  emissionCategoryGasPatch: EmissionCategoryGasPatch!

  """
  The globally unique `ID` which will identify a single `EmissionCategoryGas` to be updated.
  """
  id: ID!
}

"""The output of our update `EmissionCategoryGas` mutation."""
type UpdateEmissionCategoryGasPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `EmissionCategoryGas` that was updated by this mutation."""
  emissionCategoryGas: EmissionCategoryGas

  """An edge for our `EmissionCategoryGas`. May be used by Relay 1."""
  emissionCategoryGasEdge(
    """The method to use when ordering `EmissionCategoryGas`."""
    orderBy: [EmissionCategoryGasesOrderBy!] = [PRIMARY_KEY_ASC]
  ): EmissionCategoryGasesEdge

  """Reads a single `Gas` that is related to this `EmissionCategoryGas`."""
  gasByGasId: Gas

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `updateFacilityByRowId` mutation."""
input UpdateFacilityByRowIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `Facility` being updated.
  """
  facilityPatch: FacilityPatch!

  """unique id for the facility"""
  rowId: Int!
}

"""All input for the `updateFacility` mutation."""
input UpdateFacilityInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `Facility` being updated.
  """
  facilityPatch: FacilityPatch!

  """
  The globally unique `ID` which will identify a single `Facility` to be updated.
  """
  id: ID!
}

"""The output of our update `Facility` mutation."""
type UpdateFacilityPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Facility` that was updated by this mutation."""
  facility: Facility

  """An edge for our `Facility`. May be used by Relay 1."""
  facilityEdge(
    """The method to use when ordering `Facility`."""
    orderBy: [FacilitiesOrderBy!] = [PRIMARY_KEY_ASC]
  ): FacilitiesEdge

  """Reads a single `Organisation` that is related to this `Facility`."""
  organisationByOrganisationId: Organisation

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `updateFormJsonByRowId` mutation."""
input UpdateFormJsonByRowIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `FormJson` being updated.
  """
  formJsonPatch: FormJsonPatch!

  """Unique ID for the form"""
  rowId: Int!
}

"""All input for the `updateFormJson` mutation."""
input UpdateFormJsonInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `FormJson` being updated.
  """
  formJsonPatch: FormJsonPatch!

  """
  The globally unique `ID` which will identify a single `FormJson` to be updated.
  """
  id: ID!
}

"""The output of our update `FormJson` mutation."""
type UpdateFormJsonPayload {
  """Reads a single `CiipUser` that is related to this `FormJson`."""
  ciipUserByDeletedBy: CiipUser

  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `FormJson` that was updated by this mutation."""
  formJson: FormJson

  """An edge for our `FormJson`. May be used by Relay 1."""
  formJsonEdge(
    """The method to use when ordering `FormJson`."""
    orderBy: [FormJsonsOrderBy!] = [PRIMARY_KEY_ASC]
  ): FormJsonsEdge

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `updateFormResultByRowId` mutation."""
input UpdateFormResultByRowIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `FormResult` being updated.
  """
  formResultPatch: FormResultPatch!

  """Unique ID for the form"""
  rowId: Int!
}

"""All input for the `updateFormResult` mutation."""
input UpdateFormResultInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `FormResult` being updated.
  """
  formResultPatch: FormResultPatch!

  """
  The globally unique `ID` which will identify a single `FormResult` to be updated.
  """
  id: ID!
}

"""The output of our update `FormResult` mutation."""
type UpdateFormResultPayload {
  """Reads a single `Application` that is related to this `FormResult`."""
  applicationByApplicationId: Application

  """Reads a single `CiipUser` that is related to this `FormResult`."""
  ciipUserByDeletedBy: CiipUser

  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """Reads a single `FormJson` that is related to this `FormResult`."""
  formJsonByFormId: FormJson

  """The `FormResult` that was updated by this mutation."""
  formResult: FormResult

  """An edge for our `FormResult`. May be used by Relay 1."""
  formResultEdge(
    """The method to use when ordering `FormResult`."""
    orderBy: [FormResultsOrderBy!] = [PRIMARY_KEY_ASC]
  ): FormResultsEdge

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `updateFuelByRowId` mutation."""
input UpdateFuelByRowIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `Fuel` being updated.
  """
  fuelPatch: FuelPatch!

  """Unique ID for the fuel"""
  rowId: Int!
}

"""All input for the `updateFuel` mutation."""
input UpdateFuelInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `Fuel` being updated.
  """
  fuelPatch: FuelPatch!

  """
  The globally unique `ID` which will identify a single `Fuel` to be updated.
  """
  id: ID!
}

"""The output of our update `Fuel` mutation."""
type UpdateFuelPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Fuel` that was updated by this mutation."""
  fuel: Fuel

  """An edge for our `Fuel`. May be used by Relay 1."""
  fuelEdge(
    """The method to use when ordering `Fuel`."""
    orderBy: [FuelsOrderBy!] = [PRIMARY_KEY_ASC]
  ): FuelsEdge

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `updateGasByRowId` mutation."""
input UpdateGasByRowIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `Gas` being updated.
  """
  gasPatch: GasPatch!

  """Unique ID for the gas"""
  rowId: Int!
}

"""All input for the `updateGas` mutation."""
input UpdateGasInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `Gas` being updated.
  """
  gasPatch: GasPatch!

  """
  The globally unique `ID` which will identify a single `Gas` to be updated.
  """
  id: ID!
}

"""The output of our update `Gas` mutation."""
type UpdateGasPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Gas` that was updated by this mutation."""
  gas: Gas

  """An edge for our `Gas`. May be used by Relay 1."""
  gasEdge(
    """The method to use when ordering `Gas`."""
    orderBy: [GasesOrderBy!] = [PRIMARY_KEY_ASC]
  ): GasesEdge

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `updateOrganisationByRowId` mutation."""
input UpdateOrganisationByRowIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `Organisation` being updated.
  """
  organisationPatch: OrganisationPatch!

  """unique if for the organisation"""
  rowId: Int!
}

"""All input for the `updateOrganisation` mutation."""
input UpdateOrganisationInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Organisation` to be updated.
  """
  id: ID!

  """
  An object where the defined keys will be set on the `Organisation` being updated.
  """
  organisationPatch: OrganisationPatch!
}

"""The output of our update `Organisation` mutation."""
type UpdateOrganisationPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Organisation` that was updated by this mutation."""
  organisation: Organisation

  """An edge for our `Organisation`. May be used by Relay 1."""
  organisationEdge(
    """The method to use when ordering `Organisation`."""
    orderBy: [OrganisationsOrderBy!] = [PRIMARY_KEY_ASC]
  ): OrganisationsEdge

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `updateProductByRowId` mutation."""
input UpdateProductByRowIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `Product` being updated.
  """
  productPatch: ProductPatch!

  """Unique ID for the product"""
  rowId: Int!
}

"""All input for the `updateProductFormByRowId` mutation."""
input UpdateProductFormByRowIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `ProductForm` being updated.
  """
  productFormPatch: ProductFormPatch!

  """A generated primary key id for the row"""
  rowId: Int!
}

"""All input for the `updateProductForm` mutation."""
input UpdateProductFormInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `ProductForm` to be updated.
  """
  id: ID!

  """
  An object where the defined keys will be set on the `ProductForm` being updated.
  """
  productFormPatch: ProductFormPatch!
}

"""The output of our update `ProductForm` mutation."""
type UpdateProductFormPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `ProductForm` that was updated by this mutation."""
  productForm: ProductForm

  """An edge for our `ProductForm`. May be used by Relay 1."""
  productFormEdge(
    """The method to use when ordering `ProductForm`."""
    orderBy: [ProductFormsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ProductFormsEdge

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `updateProduct` mutation."""
input UpdateProductInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Product` to be updated.
  """
  id: ID!

  """
  An object where the defined keys will be set on the `Product` being updated.
  """
  productPatch: ProductPatch!
}

"""The output of our update `Product` mutation."""
type UpdateProductPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Product` that was updated by this mutation."""
  product: Product

  """An edge for our `Product`. May be used by Relay 1."""
  productEdge(
    """The method to use when ordering `Product`."""
    orderBy: [ProductsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ProductsEdge

  """Reads a single `ProductForm` that is related to this `Product`."""
  productFormByProductFormId: ProductForm

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `updateReportingYearByReportingYear` mutation."""
input UpdateReportingYearByReportingYearInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The current reporting year"""
  reportingYear: Int!

  """
  An object where the defined keys will be set on the `ReportingYear` being updated.
  """
  reportingYearPatch: ReportingYearPatch!
}

"""All input for the `updateReportingYear` mutation."""
input UpdateReportingYearInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `ReportingYear` to be updated.
  """
  id: ID!

  """
  An object where the defined keys will be set on the `ReportingYear` being updated.
  """
  reportingYearPatch: ReportingYearPatch!
}

"""The output of our update `ReportingYear` mutation."""
type UpdateReportingYearPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """The `ReportingYear` that was updated by this mutation."""
  reportingYear: ReportingYear

  """An edge for our `ReportingYear`. May be used by Relay 1."""
  reportingYearEdge(
    """The method to use when ordering `ReportingYear`."""
    orderBy: [ReportingYearsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ReportingYearsEdge
}

"""All input for the `updateReviewCommentByRowId` mutation."""
input UpdateReviewCommentByRowIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `ReviewComment` being updated.
  """
  reviewCommentPatch: ReviewCommentPatch!

  """Unique ID for the review_comment"""
  rowId: Int!
}

"""All input for the `updateReviewComment` mutation."""
input UpdateReviewCommentInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `ReviewComment` to be updated.
  """
  id: ID!

  """
  An object where the defined keys will be set on the `ReviewComment` being updated.
  """
  reviewCommentPatch: ReviewCommentPatch!
}

"""The output of our update `ReviewComment` mutation."""
type UpdateReviewCommentPayload {
  """
  Reads a single `ApplicationReview` that is related to this `ReviewComment`.
  """
  applicationReviewByApplicationReviewId: ApplicationReview

  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """The `ReviewComment` that was updated by this mutation."""
  reviewComment: ReviewComment

  """An edge for our `ReviewComment`. May be used by Relay 1."""
  reviewCommentEdge(
    """The method to use when ordering `ReviewComment`."""
    orderBy: [ReviewCommentsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ReviewCommentsEdge
}

"""
A universally unique identifier as defined by [RFC 4122](https://tools.ietf.org/html/rfc4122).
"""
scalar UUID
