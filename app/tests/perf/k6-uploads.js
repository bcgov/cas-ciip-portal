/* eslint-disable */
import http from "k6/http";
import { check } from "k6";
import { FormData } from "https://jslib.k6.io/formdata/0.0.2/index.js";
import { textSummary } from "https://jslib.k6.io/k6-summary/0.0.1/index.js";

/*
    Upload test files generated by running make generate_perf_files` in project root
 */
const file_45MB = open("../../../k6files/file_45M.bin", "b");
const file_100KB = open("../../../k6files/file_100KB.bin", "b");
const file = __ENV.USE_LARGE_FILE === "true" ? file_45MB : file_100KB;

const createAttachmentPayload = JSON.stringify({
  id: "createAttachmentMutation",
  query: `
      mutation createAttachmentMutation($input: CreateAttachmentInput!) {
        createAttachment(input: $input) {
          attachment {
            rowId
            file
          }
        }
      }`,
  variables: {
    input: {
      attachment: {
        file: null,
        fileName: "file.bin",
        fileSize: "45MB",
        fileType: "test",
        applicationId: 1,
        versionNumber: 1,
      },
    },
  },
});

const createFormData = (file) => {
  const fd = new FormData();
  fd.append("operations", createAttachmentPayload);

  fd.append("map", '{"nfile":["variables.input.attachment.file"]}');
  fd.append("nfile", file);

  return fd;
};

const createPostParams = (formDataBoundary) => {
  const postParams = {
    headers: {
      "Content-Type": `multipart/form-data; boundary=${formDataBoundary}`,
    },
    cookies: {
      "mocks.auth": "reporter",
      "mocks.mocked_timestamp": 1624926000,
    },
  };

  return postParams;
};
const form_data = createFormData(http.file(file, "file.bin"));

export function handleSummary(data) {
  return {
    stdout: textSummary(data, { indent: " ", enableColors: true }) + "\n", // Show the text summary to stdout...
    [`./results/uploads_${__ENV.PERF_MODE}_result.json`]: JSON.stringify(data),
  };
}

export const options =
  __ENV.PERF_MODE === "load"
    ? {
        scenarios: {
          mutations_spike: {
            vus: 100,
            iterations: 10,
            executor: "per-vu-iterations",
          },
        },
      }
    : {
        scenarios: {
          mutations_spike: {
            vus: 1,
            iterations: 1,
            executor: "per-vu-iterations",
          },
        },
      };

export default () => {
  const url = __ENV.GRAPHQL_ENDPOINT || "http://localhost:3004/graphql";
  const res = http.post(
    url,
    form_data.body(),
    Object.assign({}, createPostParams(form_data.boundary), {
      tags: { name: "createAttachmentMutation" },
    })
  );
  const parsedBody = JSON.parse(res.body);
  check(parsedBody, {
    "no graphql error returned": (parsedBody) => !parsedBody.errors,
    "there is data in the response": (parsedBody) =>
      parsedBody.data !== undefined,
  });
  if (parsedBody.errors) {
    console.log(
      "===================================================================="
    );
    console.log(" ");
    console.log(" ");
    console.log(res.body);
    console.log(" ");
    console.log(" ");
    console.log(JSON.stringify(parsedBody.errors, null, 2));
    console.log(" ");
    console.log(" ");
    console.log(" ");
  }
};
