/* eslint-disable */
import http from "k6/http";
import { check } from "k6";
import { FormData } from "https://jslib.k6.io/formdata/0.0.2/index.js";
import { textSummary } from "https://jslib.k6.io/k6-summary/0.0.1/index.js";

/*
    Upload test files generated by running make generate_perf_files` in project root
    or using command:
          head -c [file size] </dev/urandom >[file name]

          example:
          head -c 100000 </dev/urandom >file_1M.bin
 */
const file100KB = open("../../../k6files/file_100KB.bin", "b");
// const file100KB = open("./sample_pdf.pdf", "b");
const file1M = open("../../../k6files/file_1M.bin", "b");

const createAttachmentPayload = JSON.stringify({
  id: "createAttachmentMutation",
  query: `
      mutation createAttachmentMutation($input: CreateAttachmentInput!) {
        createAttachment(input: $input) {
          attachment {
            rowId
            file
          }
        }
      }`,
  variables: {
    input: {
      attachment: {
        file: null,
        fileName: "sample_file.bin",
        fileSize: "1MB",
        fileType: "test",
        applicationId: 1,
        versionNumber: 1,
      },
    },
  },
});

const createFormData = (file) => {
  const fd = new FormData();
  fd.append("operations", createAttachmentPayload);

  fd.append("map", '{"nfile":["variables.input.attachment.file"]}');
  fd.append("nfile", file);

  return fd;
};

const createPostParams = (formDataBoundary) => {
  const postParams = {
    headers: {
      "Content-Type": `multipart/form-data; boundary=${formDataBoundary}`,
    },
    cookies: {
      "mocks.auth": "reporter",
      "mocks.mocked_timestamp": 1624926000,
    },
  };

  return postParams;
};
const fd_100KB = createFormData(http.file(file100KB, "file_100k.pdf"));
const fd_1MB = createFormData(http.file(file1M, "file_1M.bin"));

export function handleSummary(data) {
  return {
    stdout: textSummary(data, { indent: " ", enableColors: true }) + "\n", // Show the text summary to stdout...
    [`./results/uploads_${__ENV.PERF_MODE}_result.json`]: JSON.stringify(data),
  };
}

export default () => {
  const url = __ENV.GRAPHQL_ENDPOINT || "http://localhost:3004/graphql";
  const res = http.post(
    url,
    fd_100KB.body(),
    Object.assign({}, createPostParams(fd_100KB.boundary), {
      tags: { name: "createAttachmentMutation" },
    })
  );
  const parsedBody = JSON.parse(res.body);
  check(parsedBody, {
    "no graphql error returned": (parsedBody) => !parsedBody.errors,
    "there is data in the response": (parsedBody) =>
      parsedBody.data !== undefined,
  });
  if (parsedBody.errors) {
    console.log(
      "===================================================================="
    );
    console.log(" ");
    console.log(" ");
    console.log(res.body);
    console.log(" ");
    console.log(" ");
    console.log(JSON.stringify(parsedBody.errors, null, 2));
    console.log(" ");
    console.log(" ");
    console.log(" ");
    // console.log(JSON.stringify(res, null, 2));
  }

  // const res1m = http.post(
  //   __ENV.APP_HOST + "/graphql",
  //   fd_1MB.body(),
  //   Object.assign({}, createPostParams(fd_1MB.boundary), {
  //     tags: { name: "createAttachmentMutation" },
  //   })
  // );

  // const parsedBody1m = JSON.parse(res1m.body);
  // check(parsedBody1m, {
  //   "no graphql error returned": (parsedBody1m) => !parsedBody1m.errors,
  //   "there is data in the response": (parsedBody1m) =>
  //     parsedBody1m.data !== undefined,
  // });
};
