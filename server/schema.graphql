"""All input for the create `FormJson` mutation."""
input CreateFormJsonInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `FormJson` to be created by this mutation."""
  formJson: FormJsonInput!
}

"""The output of our create `FormJson` mutation."""
type CreateFormJsonPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `FormJson` that was created by this mutation."""
  formJson: FormJson

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `FormJson`. May be used by Relay 1."""
  formJsonEdge(
    """The method to use when ordering `FormJson`."""
    orderBy: [FormJsonsOrderBy!] = PRIMARY_KEY_ASC
  ): FormJsonsEdge
}

"""All input for the create `FormResult` mutation."""
input CreateFormResultInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `FormResult` to be created by this mutation."""
  formResult: FormResultInput!
}

"""The output of our create `FormResult` mutation."""
type CreateFormResultPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `FormResult` that was created by this mutation."""
  formResult: FormResult

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `FormResult`. May be used by Relay 1."""
  formResultEdge(
    """The method to use when ordering `FormResult`."""
    orderBy: [FormResultsOrderBy!] = PRIMARY_KEY_ASC
  ): FormResultsEdge
}

"""All input for the create `User` mutation."""
input CreateUserInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `User` to be created by this mutation."""
  user: UserInput!
}

"""The output of our create `User` mutation."""
type CreateUserPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `User` that was created by this mutation."""
  user: User

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `User`. May be used by Relay 1."""
  userEdge(
    """The method to use when ordering `User`."""
    orderBy: [UsersOrderBy!] = PRIMARY_KEY_ASC
  ): UsersEdge
}

"""A location in a connection that can be used for resuming pagination."""
scalar Cursor

"""All input for the `deleteFormJsonByRowId` mutation."""
input DeleteFormJsonByRowIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """Unique ID for the form"""
  rowId: Int!
}

"""All input for the `deleteFormJson` mutation."""
input DeleteFormJsonInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `FormJson` to be deleted.
  """
  id: ID!
}

"""The output of our delete `FormJson` mutation."""
type DeleteFormJsonPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `FormJson` that was deleted by this mutation."""
  formJson: FormJson
  deletedFormJsonId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `FormJson`. May be used by Relay 1."""
  formJsonEdge(
    """The method to use when ordering `FormJson`."""
    orderBy: [FormJsonsOrderBy!] = PRIMARY_KEY_ASC
  ): FormJsonsEdge
}

"""All input for the `deleteFormResultByRowId` mutation."""
input DeleteFormResultByRowIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """Unique ID for the form"""
  rowId: Int!
}

"""All input for the `deleteFormResult` mutation."""
input DeleteFormResultInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `FormResult` to be deleted.
  """
  id: ID!
}

"""The output of our delete `FormResult` mutation."""
type DeleteFormResultPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `FormResult` that was deleted by this mutation."""
  formResult: FormResult
  deletedFormResultId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `FormResult`. May be used by Relay 1."""
  formResultEdge(
    """The method to use when ordering `FormResult`."""
    orderBy: [FormResultsOrderBy!] = PRIMARY_KEY_ASC
  ): FormResultsEdge
}

"""All input for the `deleteUserByRowId` mutation."""
input DeleteUserByRowIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """Unique ID for the user"""
  rowId: Int!
}

"""All input for the `deleteUser` mutation."""
input DeleteUserInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `User` to be deleted.
  """
  id: ID!
}

"""The output of our delete `User` mutation."""
type DeleteUserPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `User` that was deleted by this mutation."""
  user: User
  deletedUserId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `User`. May be used by Relay 1."""
  userEdge(
    """The method to use when ordering `User`."""
    orderBy: [UsersOrderBy!] = PRIMARY_KEY_ASC
  ): UsersEdge
}

type FormJson implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  id: ID!

  """Unique ID for the form"""
  rowId: Int!

  """Name for the form"""
  name: String!

  """The JSON object that creates the form"""
  formJson: JSON!
}

"""
A condition to be used against `FormJson` object types. All fields are tested
for equality and combined with a logical ‘and.’
"""
input FormJsonCondition {
  """Checks for equality with the object’s `rowId` field."""
  rowId: Int

  """Checks for equality with the object’s `name` field."""
  name: String

  """Checks for equality with the object’s `formJson` field."""
  formJson: JSON
}

"""An input for mutations affecting `FormJson`"""
input FormJsonInput {
  """Unique ID for the form"""
  rowId: Int

  """Name for the form"""
  name: String!

  """The JSON object that creates the form"""
  formJson: JSON!
}

"""
Represents an update to a `FormJson`. Fields that are set will be updated.
"""
input FormJsonPatch {
  """Unique ID for the form"""
  rowId: Int

  """Name for the form"""
  name: String

  """The JSON object that creates the form"""
  formJson: JSON
}

"""A connection to a list of `FormJson` values."""
type FormJsonsConnection {
  """A list of `FormJson` objects."""
  nodes: [FormJson]!

  """
  A list of edges which contains the `FormJson` and cursor to aid in pagination.
  """
  edges: [FormJsonsEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `FormJson` you could get from the connection."""
  totalCount: Int!
}

"""A `FormJson` edge in the connection."""
type FormJsonsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `FormJson` at the end of the edge."""
  node: FormJson
}

"""Methods to use when ordering `FormJson`."""
enum FormJsonsOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  NAME_ASC
  NAME_DESC
  FORM_JSON_ASC
  FORM_JSON_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

type FormResult implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  id: ID!

  """Unique ID for the form"""
  rowId: Int!

  """The Unique ID of the form"""
  formId: Int!

  """The Unique ID of the User"""
  userId: Int!

  """The field id / slug"""
  field: String

  """The value of the field"""
  fieldValue: String
}

"""
A condition to be used against `FormResult` object types. All fields are tested
for equality and combined with a logical ‘and.’
"""
input FormResultCondition {
  """Checks for equality with the object’s `rowId` field."""
  rowId: Int

  """Checks for equality with the object’s `formId` field."""
  formId: Int

  """Checks for equality with the object’s `userId` field."""
  userId: Int

  """Checks for equality with the object’s `field` field."""
  field: String

  """Checks for equality with the object’s `fieldValue` field."""
  fieldValue: String
}

"""An input for mutations affecting `FormResult`"""
input FormResultInput {
  """Unique ID for the form"""
  rowId: Int

  """The Unique ID of the form"""
  formId: Int!

  """The Unique ID of the User"""
  userId: Int!

  """The field id / slug"""
  field: String

  """The value of the field"""
  fieldValue: String
}

"""
Represents an update to a `FormResult`. Fields that are set will be updated.
"""
input FormResultPatch {
  """Unique ID for the form"""
  rowId: Int

  """The Unique ID of the form"""
  formId: Int

  """The Unique ID of the User"""
  userId: Int

  """The field id / slug"""
  field: String

  """The value of the field"""
  fieldValue: String
}

"""A connection to a list of `FormResult` values."""
type FormResultsConnection {
  """A list of `FormResult` objects."""
  nodes: [FormResult]!

  """
  A list of edges which contains the `FormResult` and cursor to aid in pagination.
  """
  edges: [FormResultsEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `FormResult` you could get from the connection."""
  totalCount: Int!
}

"""A `FormResult` edge in the connection."""
type FormResultsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `FormResult` at the end of the edge."""
  node: FormResult
}

"""Methods to use when ordering `FormResult`."""
enum FormResultsOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  FORM_ID_ASC
  FORM_ID_DESC
  USER_ID_ASC
  USER_ID_DESC
  FIELD_ASC
  FIELD_DESC
  FIELD_VALUE_ASC
  FIELD_VALUE_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
A JavaScript object encoded in the JSON format as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON

"""
The root mutation type which contains root level fields which mutate data.
"""
type Mutation {
  """Creates a single `FormJson`."""
  createFormJson(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateFormJsonInput!
  ): CreateFormJsonPayload

  """Creates a single `FormResult`."""
  createFormResult(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateFormResultInput!
  ): CreateFormResultPayload

  """Creates a single `User`."""
  createUser(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateUserInput!
  ): CreateUserPayload

  """Updates a single `FormJson` using its globally unique id and a patch."""
  updateFormJson(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateFormJsonInput!
  ): UpdateFormJsonPayload

  """Updates a single `FormJson` using a unique key and a patch."""
  updateFormJsonByRowId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateFormJsonByRowIdInput!
  ): UpdateFormJsonPayload

  """
  Updates a single `FormResult` using its globally unique id and a patch.
  """
  updateFormResult(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateFormResultInput!
  ): UpdateFormResultPayload

  """Updates a single `FormResult` using a unique key and a patch."""
  updateFormResultByRowId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateFormResultByRowIdInput!
  ): UpdateFormResultPayload

  """Updates a single `User` using its globally unique id and a patch."""
  updateUser(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateUserInput!
  ): UpdateUserPayload

  """Updates a single `User` using a unique key and a patch."""
  updateUserByRowId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateUserByRowIdInput!
  ): UpdateUserPayload

  """Deletes a single `FormJson` using its globally unique id."""
  deleteFormJson(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteFormJsonInput!
  ): DeleteFormJsonPayload

  """Deletes a single `FormJson` using a unique key."""
  deleteFormJsonByRowId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteFormJsonByRowIdInput!
  ): DeleteFormJsonPayload

  """Deletes a single `FormResult` using its globally unique id."""
  deleteFormResult(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteFormResultInput!
  ): DeleteFormResultPayload

  """Deletes a single `FormResult` using a unique key."""
  deleteFormResultByRowId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteFormResultByRowIdInput!
  ): DeleteFormResultPayload

  """Deletes a single `User` using its globally unique id."""
  deleteUser(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteUserInput!
  ): DeleteUserPayload

  """Deletes a single `User` using a unique key."""
  deleteUserByRowId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteUserByRowIdInput!
  ): DeleteUserPayload
}

"""An object with a globally unique `ID`."""
interface Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  id: ID!
}

"""Information about pagination in a connection."""
type PageInfo {
  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: Cursor

  """When paginating forwards, the cursor to continue."""
  endCursor: Cursor
}

"""The root query type which gives access points into the data universe."""
type Query implements Node {
  """
  Exposes the root query type nested one level down. This is helpful for Relay 1
  which can only query top level fields if they are in a particular form.
  """
  query: Query!

  """
  The root query type must be a `Node` to work well with Relay 1 mutations. This just resolves to `query`.
  """
  id: ID!

  """Fetches an object given its globally unique `ID`."""
  node(
    """The globally unique `ID`."""
    id: ID!
  ): Node

  """Reads and enables pagination through a set of `FormJson`."""
  allFormJsons(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `FormJson`."""
    orderBy: [FormJsonsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: FormJsonCondition
  ): FormJsonsConnection

  """Reads and enables pagination through a set of `FormResult`."""
  allFormResults(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `FormResult`."""
    orderBy: [FormResultsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: FormResultCondition
  ): FormResultsConnection

  """Reads and enables pagination through a set of `User`."""
  allUsers(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `User`."""
    orderBy: [UsersOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: UserCondition
  ): UsersConnection
  formJsonByRowId(rowId: Int!): FormJson
  formResultByRowId(rowId: Int!): FormResult
  userByRowId(rowId: Int!): User

  """Reads a single `FormJson` using its globally unique `ID`."""
  formJson(
    """The globally unique `ID` to be used in selecting a single `FormJson`."""
    id: ID!
  ): FormJson

  """Reads a single `FormResult` using its globally unique `ID`."""
  formResult(
    """
    The globally unique `ID` to be used in selecting a single `FormResult`.
    """
    id: ID!
  ): FormResult

  """Reads a single `User` using its globally unique `ID`."""
  user(
    """The globally unique `ID` to be used in selecting a single `User`."""
    id: ID!
  ): User
}

"""All input for the `updateFormJsonByRowId` mutation."""
input UpdateFormJsonByRowIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `FormJson` being updated.
  """
  formJsonPatch: FormJsonPatch!

  """Unique ID for the form"""
  rowId: Int!
}

"""All input for the `updateFormJson` mutation."""
input UpdateFormJsonInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `FormJson` to be updated.
  """
  id: ID!

  """
  An object where the defined keys will be set on the `FormJson` being updated.
  """
  formJsonPatch: FormJsonPatch!
}

"""The output of our update `FormJson` mutation."""
type UpdateFormJsonPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `FormJson` that was updated by this mutation."""
  formJson: FormJson

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `FormJson`. May be used by Relay 1."""
  formJsonEdge(
    """The method to use when ordering `FormJson`."""
    orderBy: [FormJsonsOrderBy!] = PRIMARY_KEY_ASC
  ): FormJsonsEdge
}

"""All input for the `updateFormResultByRowId` mutation."""
input UpdateFormResultByRowIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `FormResult` being updated.
  """
  formResultPatch: FormResultPatch!

  """Unique ID for the form"""
  rowId: Int!
}

"""All input for the `updateFormResult` mutation."""
input UpdateFormResultInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `FormResult` to be updated.
  """
  id: ID!

  """
  An object where the defined keys will be set on the `FormResult` being updated.
  """
  formResultPatch: FormResultPatch!
}

"""The output of our update `FormResult` mutation."""
type UpdateFormResultPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `FormResult` that was updated by this mutation."""
  formResult: FormResult

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `FormResult`. May be used by Relay 1."""
  formResultEdge(
    """The method to use when ordering `FormResult`."""
    orderBy: [FormResultsOrderBy!] = PRIMARY_KEY_ASC
  ): FormResultsEdge
}

"""All input for the `updateUserByRowId` mutation."""
input UpdateUserByRowIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `User` being updated.
  """
  userPatch: UserPatch!

  """Unique ID for the user"""
  rowId: Int!
}

"""All input for the `updateUser` mutation."""
input UpdateUserInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `User` to be updated.
  """
  id: ID!

  """
  An object where the defined keys will be set on the `User` being updated.
  """
  userPatch: UserPatch!
}

"""The output of our update `User` mutation."""
type UpdateUserPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `User` that was updated by this mutation."""
  user: User

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `User`. May be used by Relay 1."""
  userEdge(
    """The method to use when ordering `User`."""
    orderBy: [UsersOrderBy!] = PRIMARY_KEY_ASC
  ): UsersEdge
}

type User implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  id: ID!

  """Unique ID for the user"""
  rowId: Int!

  """User's first name"""
  firstName: String

  """User's last name"""
  lastName: String

  """User's email address"""
  emailAddress: String
}

"""
A condition to be used against `User` object types. All fields are tested for equality and combined with a logical ‘and.’
"""
input UserCondition {
  """Checks for equality with the object’s `rowId` field."""
  rowId: Int

  """Checks for equality with the object’s `firstName` field."""
  firstName: String

  """Checks for equality with the object’s `lastName` field."""
  lastName: String

  """Checks for equality with the object’s `emailAddress` field."""
  emailAddress: String
}

"""An input for mutations affecting `User`"""
input UserInput {
  """Unique ID for the user"""
  rowId: Int!

  """User's first name"""
  firstName: String

  """User's last name"""
  lastName: String

  """User's email address"""
  emailAddress: String
}

"""Represents an update to a `User`. Fields that are set will be updated."""
input UserPatch {
  """Unique ID for the user"""
  rowId: Int

  """User's first name"""
  firstName: String

  """User's last name"""
  lastName: String

  """User's email address"""
  emailAddress: String
}

"""A connection to a list of `User` values."""
type UsersConnection {
  """A list of `User` objects."""
  nodes: [User]!

  """
  A list of edges which contains the `User` and cursor to aid in pagination.
  """
  edges: [UsersEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `User` you could get from the connection."""
  totalCount: Int!
}

"""A `User` edge in the connection."""
type UsersEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `User` at the end of the edge."""
  node: User
}

"""Methods to use when ordering `User`."""
enum UsersOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  FIRST_NAME_ASC
  FIRST_NAME_DESC
  LAST_NAME_ASC
  LAST_NAME_DESC
  EMAIL_ADDRESS_ASC
  EMAIL_ADDRESS_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}
